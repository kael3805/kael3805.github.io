<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>多渠道多场景的支付设计</title>
    <link href="/2023/04/24/%E5%A4%9A%E6%B8%A0%E9%81%93%E5%A4%9A%E5%9C%BA%E6%99%AF%E7%9A%84%E6%94%AF%E4%BB%98%E8%AE%BE%E8%AE%A1/"/>
    <url>/2023/04/24/%E5%A4%9A%E6%B8%A0%E9%81%93%E5%A4%9A%E5%9C%BA%E6%99%AF%E7%9A%84%E6%94%AF%E4%BB%98%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="多渠道多场景的支付设计"><a href="#多渠道多场景的支付设计" class="headerlink" title="多渠道多场景的支付设计"></a>多渠道多场景的支付设计</h1><blockquote><p>在线支付是很多系统都常见的一种功能，几乎所有涉及到交易的系统都会用到支付，比如商城、各种平台的会员充值、外卖平台等。而我们日常生活中比较常用的支付方式莫过于微信或者支付宝，也有少部分场景会直接用到网银来支付。通常情况下，我们在开发一个带有支付功能的系统时，通常不会只对接一套支付系统。并且每一家的支付系统实现的方式、接口的标准等，几乎都不一样。这使得我们在开发和维护系统时，情况变得复杂。</p><p>除此之外，我们的系统中可能还涉及到多种支付场景，比如会员充值、购买商品、参加活动等，但这些场景在处理业务时又不尽相同。</p></blockquote><h2 id="支付设计的痛点"><a href="#支付设计的痛点" class="headerlink" title="支付设计的痛点"></a>支付设计的痛点</h2><p>针对开头我们提到的支付业务开发过程中遇到的问题，我们将问题大致罗列出以下几点：</p><ol><li>支付渠道比较多，而且各个第三方支付实现标准不统一，如接口参数、返回值、认证方式等。</li><li>用户使用的支付终端不同，比如：电脑浏览器、手机浏览器、手机APP。这些不同的终端对应的支付实现也不完全相同。</li><li>场景复杂，购买商品、会员充值等各种场景虽然都需要支付，但支付时的前置和后置处理不一样。比如购买商品时可能需要选择是否使用券、有没有满减活动等，而会员充值时又需要选择充值的标准，比如普通会员、白金会员等。</li></ol><p>针对这些问题，下面开始逐步拆解分析。</p><h2 id="多渠道多终端"><a href="#多渠道多终端" class="headerlink" title="多渠道多终端"></a>多渠道多终端</h2><p>首先我们先看前两个问题，支付渠道多而且支持的终端不同，比如下面这张图：</p><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304241007594.png" alt="image-20230424100750487"></p><p>图中使用了两种支付渠道，分别是支付宝和微信，并且每种支付渠道又包含三种可选的支付终端。我们希望客户端在发起支付请求时，告诉服务端当前使用哪种支付渠道来支付，并且告诉服务端当前使用的终端是什么。这样服务端就可以根据这些信息去和第三方支付系统做适配。</p><p>说到这里可能有人会说，这个简单，使用适配器模式，分别给支付宝和微信的三个终端各写一个适配，根据客户端传递过来的支付类型和终端类型选择对应的适配器来处理，然后使用工厂来创建适配器，不同的支付类型选择不同的适配器。最终我们的设计如下图所示：</p><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304241119645.png" alt="image-20230424111959618"></p><p>在这个设计中，我们先是抽象出一个接口，这个接口中统一业务的操作方法。由适配器来针对不同的终端来适配操作，最后使用工厂来针对不同的支付方式构建不同的适配器。这个设计看上去近乎完美，很好的解决了接口不统一的问题，上层业务只需要调用抽象接口的方法，适配器会自动的帮我们调用对应的适配对象来处理。</p><p>但是，这其中还是有很多的问题存在，比如我们需要新增一个接口方法，此时，我们就需要将每一个适配器和适配对象都增加这个方法。再比如，我们需要增加新的终端类型（支付场景比较少见），那么就需要在适配器中新增一个适配对象。</p><p>从上图中我们可以看到，适配对象与适配器之间是一种强关联关系，每个不同的终端都会有一个独立的对象存在，这显然违反了设计模式中的迪米特原则（即：最小知识原则）。另外，我们在实际对接的时候发现，有多接口并不区分终端类型，比如查询订单、取消订单等，那么这些具有相同操作的接口在每个终端中都需要实现一次，这显然也不符合设计模式的合成复用原则。</p><p>由此可见，这个看似近乎完美的设计，实则漏洞百出。那么该如何进行优化呢？我们可以将问题进一步拆解分析。</p><p>首先，我们先考虑我们在实现支付时都需要处理哪些业务：</p><ol><li>创建支付，完成一系列的校验、数据锁定及订单插入等操作，通知客户端唤起收银台；</li><li>支付成功，完成一系列后续业务，比如：订单进入发货流程、给用户的充值到账等。</li><li>取消支付，处理未支付的订单，接触数据锁定等。</li><li>申请退款，处理已支付订单，退还用户款项。</li><li>查询订单，获取订单信息。</li></ol><p>我们实际开发时，基本上能用到的也就这些方法。从这些业务中，我们可以看到，创建支付时需要唤起收银台，那么每个终端对于收银台的实现可能都不一样。因此，我们按照是否限定终端进行分组，可以得出以下结果。</p><ul><li>限定终端<ul><li>创建支付</li></ul></li><li>不限定终端<ul><li>支付成功</li><li>取消支付</li><li>申请退款</li><li>查询订单</li></ul></li></ul><p>除此之外，我们将每一种支付类型视为一个支付通道，比如用户选择支付宝，那么就走支付宝的通道，如果使用的是微信，那么就走微信通道。我们针对上面的适配器模式做个优化，在接口与实现类中间增加一个抽象，这个抽象用来实现那些具有相同行为的操作。如图：</p><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304241211128.png" alt="image-20230424121132100"></p><p>工厂类中，我们改用枚举来实现，如图：</p><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304241220676.png" alt="image-20230424122057651"></p><p>在此实现中，我们可以根据传入的通道类型和终端类型创建对应的支付实现。讲到这里可能有人会说，这也没啥改变，在工厂中一样还是强依赖关系，而且实现起来比适配器模式更加复杂了。那么好，我们看看优化后的设计比适配器模式好在哪里。</p><p>首先，各支付接口中，具有相同行为的操作被提取到一个抽象类中，抽象类中实现了统一的行为操作处理。对于个性化的操作下沉到子类去实现，这样既保证了接口的完整性，又满足了合成复用原则。当有新的接口增加时，如果同样属于相同行为操作，那么只需要在抽象类中实现一次，则各子类中就拥有了相同的操作，而不需要给每个终端都写一个实现方法。</p><p>对于抽象类和具体的实现而言，它并不知道当前用户使用了哪个终端来处理，这些都被封装到一个工厂中。而对于调用者而言，它只知道使用了哪种支付方式和使用哪种终端，至于具体使用哪个类来实现操作也是完全不知情的。因此，只有工厂是清楚的知道哪种支付类型和终端使用哪个实现。并且对于工厂而言，它只负责创建实例，至于执行那种行为操作它也是不知情的。这样，每个组件都各司其职，而对于其他组件所需要做的事情不做任何干涉。这不正满足了设计模式中的迪米特原则吗？</p><p>这样，当我们后续需要对接新的支付系统时，只需要新增一个通道实现，然后给工厂增加一个选择器即可。当需要给通道新增接口时，只需要在对应的实现类中增加即可。</p><h2 id="多场景支付"><a href="#多场景支付" class="headerlink" title="多场景支付"></a>多场景支付</h2><p>说完多渠道支付，我们再说说多场景支付，这在我们构建系统时也是经常会遇到的。比如我们现在要开发一个B2C商城，一开始我们只需要提供用户购买商品即可，但随着业务的发展。平台推行一种会员方案，普通用户没有折扣、VIP用户可以享受每单5折优惠。然而VIP不是随便可以获得的，需要用户每个月支付20元的会员费。</p><p>针对这种场景，我们分析可得出，购买商品所需要的信息和会员充值所需要的信息是不一样的，如图：</p><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304241259490.png" alt="image-20230424125919457"></p><p>除此之外，购买商品和会员充值的后续业务处理也是不同的，比如商品购买成功后会进入配送流程，而会员充值，则只需要给用户标记为会员即可。讲到这里，可能有人会说，这个简单，前面支付渠道已经封装的很好了，我只需要给每个场景单独提供一套支付操作就可以了。这么说也没错，场景不同则实现也不同。但这里有一个问题，比如我们的支付修改了，之前是直接结算，现在需要在流程结束后统一结算，那么你该如何处理？再比如，我们之前的支付接口实现变了，你又该如何处理？</p><p>如果是单一场景或只有一两个支付场景还好，如果系统中存在十几种甚至更多支付场景呢。那么就只能将每一个场景的支付部分的代码都修改一遍，这无疑是灾难性的。首先，修改这些代码可能会导致新的问题产生，对于已经测试上线的功能需要进行回测。第二，支付环节每一次的变化都需要修改一遍代码，因此复杂度为<code>O(n)</code>，n 即：每次变化需要修改的代码次数。</p><p>那么有没有什么好的办法来解决这个问题呢？答案是肯定有的。那么好，我们针对上面的场景来进行分析，首先我们先分析一下，所有的支付场景都有哪些共同点。</p><ol><li>发起支付请求；</li><li>支付成功处理；</li><li>取消支付；</li><li>申请退款；</li></ol><p>看到这里是不是感觉到有点儿眼熟，对的，它和我们在设计支付时几乎是一样的。区别是我们在设计支付时，它所对应的目标对象是第三方支付系统，换句话说，我们的支付设计更像是一个代理，我们所有的针对第三方支付系统的操作都交由支付通道来代为处理，将业务与第三方支付隔离。</p><p>而支付场景所对应的目标是我们的业务系统，从计算机的角度而言，每一个业务场景都是一组计算，只不过场景不同而导致算法不同而已，这里的算法可以理解为业务流程。针对不同场景选择不同的算法，这让我们想到设计模式中的策略模式。</p><p>策略模式通俗点来说就是对象的某个行为在不同的场景下可以有不同的处理方式。例如我们可以用嘴巴来吃东西、喝水、呼吸，如果你是在喝水，那么你可以选择用勺子、杯子、吸管等，如果你在吃东西，那么你可以选择用筷子、用手抓，如果你是在呼吸，那么你什么都不需要用，只要张嘴喘气即可。同样是嘴巴，同样是往身体里面进东西，但场景不一样所需要的处理也不一样。</p><p>我们针对上面的场景，结合策略模式设计，如下图所示：</p><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304241348700.png" alt="image-20230424134831668"></p><p>图中，我们先是定义了一个交易策略的接口，然后分别针对购买商品和会员充值两个场景添加了对应的实现。交易上下文也就是我们统一处理业务的类，上下文中需要针对不同场景设置相应的策略，对于上下文而言，只需要调用策略的方法来完成功能，无需知道使用的是哪种策略。我们可以在上下文中调用支付通道来完成相应的支付操作，而具体的业务则交由策略实现来处理。当支付发生变化时，我们只需要对上下文进行修改即可，修改完成后，我们只需要测试某一场景的流程是否正确即可。当一个场景测试通过时，则其他场景全部通过。此时的复杂度为<code>O(1)</code>，即每一次的变化只修改一次上下文即可。</p><p>讲到这里，设计还没有结束，按照上面的设计，虽然可以解决场景问题，但是它和支付一样，也会有相同的操作存在。回顾我们之前粗暴的实现支付时，每一笔支付，无论是哪种场景都需要在业务系统中记录一个订单，后续所有的操作都会基于这个订单来处理。那么往数据库中插入订单就是每个场景都需要做的。</p><p>根据我们之前设计支付时的经验，当业务中既有相同行为操作又有个性化行为操作时，我们的做法是进一步抽象，将个性化操作下沉到子类实现，而通用操作交由抽象类来做。我们修改上面的设计如下图所示：</p><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304241409685.png" alt="image-20230424140926649"></p><p>图中，我们将插入订单操作提取到一个抽象类中，并且设置为受保护方法，因为我们只希望子类去调用，而对于策略的调用者来说是不允许直接插入订单的。为了减少修改，我们同样适用工厂来实现策略的创建，不同的是，这一次我们使用枚举工厂，也就是将每一个策略绑定到一个枚举项上面，通过传入不同的枚举，我们就可以调用不同的策略，如图：</p><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304241505724.png" alt="image-20230424150511694"></p><h2 id="设计融合"><a href="#设计融合" class="headerlink" title="设计融合"></a>设计融合</h2><blockquote><p>面前我们已经设计好了多渠道支付和多场景支付，此时两个设计还是各自独立的。我们需要将这些设计融合在一起。</p></blockquote><p>最终完成的设计如图所示：</p><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304241506024.png" alt="image-20230424150614985"></p><p>针对此设计图，下面我们开始组织代码。</p><h3 id="支付通道代码实现"><a href="#支付通道代码实现" class="headerlink" title="支付通道代码实现"></a>支付通道代码实现</h3><p><code>PayChannel</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 支付通道接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kael</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PayChannel</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取支付通道ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回通道ID</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">getChannelId</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建支付</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> param 支付参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回收银台地址</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">createOrder</span><span class="hljs-params">(Object param)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询订单</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> param 查询参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回订单信息</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">queryOrder</span><span class="hljs-params">(Object param)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取消订单</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> param 取消参数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">cancelOrder</span><span class="hljs-params">(Object param)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 申请退款</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> param 申请参数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">applyForRefund</span><span class="hljs-params">(Object param)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>AbstractAlipayChannel</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 支付宝通道</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kael</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractAlipayChannel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PayChannel</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getChannelId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> PayChannelType.ALIPAY.getId();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">queryOrder</span><span class="hljs-params">(Object param)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;查询支付宝订单&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;支付宝订单信息&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cancelOrder</span><span class="hljs-params">(Object param)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;取消支付宝订单&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">applyForRefund</span><span class="hljs-params">(Object param)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;申请支付宝退款&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>AlipayPcChannel</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 支付宝 PC 端支付</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kael</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlipayPcChannel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAlipayChannel</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">createOrder</span><span class="hljs-params">(Object param)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;支付宝 PC 收银台&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>AlipayWapChannel</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 支付宝 Wap 端支付</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kael</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlipayWapChannel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAlipayChannel</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">createOrder</span><span class="hljs-params">(Object param)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;支付宝 Wap 收银台&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>AlipayAppChannel</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 支付宝 App 端支付</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kael</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlipayAppChannel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAlipayChannel</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">createOrder</span><span class="hljs-params">(Object param)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;支付宝 App 收银台&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>AbstractWechatChannel</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 微信通道</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kael</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractWechatChannel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PayChannel</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getChannelId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> PayChannelType.WECHAT.getId();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">queryOrder</span><span class="hljs-params">(Object param)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;查询微信订单&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;微信订单信息&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cancelOrder</span><span class="hljs-params">(Object param)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;取消微信订单&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">applyForRefund</span><span class="hljs-params">(Object param)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;申请微信退款&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>WechatPcChannel</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 微信 PC 端支付</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kael</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WechatPcChannel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractWechatChannel</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">createOrder</span><span class="hljs-params">(Object param)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;微信 PC 收银台&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>WechatWapChannel</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 微信 Wap 端支付</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kael</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WechatWapChannel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractWechatChannel</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">createOrder</span><span class="hljs-params">(Object param)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;微信 Wap 收银台&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>WechatAppChannel</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 微信 App 端支付</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kael</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WechatAppChannel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractWechatChannel</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">createOrder</span><span class="hljs-params">(Object param)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;微信 App 收银台&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>PayChannelType</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 支付通道类型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kael</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">PayChannelType</span> &#123;<br>    <span class="hljs-comment">// 支付宝</span><br>    ALIPAY(<span class="hljs-number">1</span>),<br>    <span class="hljs-comment">// 微信支付</span><br>    WECHAT(<span class="hljs-number">2</span>);<br><br>    <span class="hljs-comment">// 通道ID</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    PayChannelType(Integer id) &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>PayTerminal</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 支付终端</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kael</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">PayTerminal</span> &#123;<br>    <span class="hljs-comment">// 电脑浏览器</span><br>    PC,<br>    <span class="hljs-comment">// 手机浏览器</span><br>    WAP,<br>    <span class="hljs-comment">// 手机APP</span><br>    APP;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>PayChannelFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 支付通道工厂</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kael</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PayChannelFactory</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造支付通道</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> channelType 支付通道类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> terminal 支付终端</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> PayChannel <span class="hljs-title function_">builder</span><span class="hljs-params">(PayChannelType channelType, PayTerminal terminal)</span> &#123;<br>        PayChannel channel;<br>        <span class="hljs-keyword">switch</span> (channelType) &#123;<br>            <span class="hljs-keyword">case</span> ALIPAY -&gt; &#123;<br>                <span class="hljs-keyword">switch</span> (terminal) &#123;<br>                    <span class="hljs-keyword">case</span> PC -&gt; channel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlipayPcChannel</span>();<br>                    <span class="hljs-keyword">case</span> WAP -&gt; channel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlipayWapChannel</span>();<br>                    <span class="hljs-keyword">case</span> APP -&gt; channel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlipayAppChannel</span>();<br>                    <span class="hljs-keyword">default</span> -&gt; channel = <span class="hljs-literal">null</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">case</span> WECHAT -&gt; &#123;<br>                <span class="hljs-keyword">switch</span> (terminal) &#123;<br>                    <span class="hljs-keyword">case</span> PC -&gt; channel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WechatPcChannel</span>();<br>                    <span class="hljs-keyword">case</span> WAP -&gt; channel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WechatWapChannel</span>();<br>                    <span class="hljs-keyword">case</span> APP -&gt; channel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WechatAppChannel</span>();<br>                    <span class="hljs-keyword">default</span> -&gt; channel = <span class="hljs-literal">null</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">default</span> -&gt; channel = <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> channel;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="交易策略代码实现"><a href="#交易策略代码实现" class="headerlink" title="交易策略代码实现"></a>交易策略代码实现</h3><p><code>TransactionStrategy</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 交易策略</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kael</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TransactionStrategy</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成交易订单号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回订单号</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">generateOutTradeNo</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建交易</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> param 交易参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回交易信息</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">create</span><span class="hljs-params">(Object param)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 确认支付</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> outTradeNo 交易订单号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">success</span><span class="hljs-params">(String outTradeNo)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取消支付</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> outTradeNo 交易订单号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">cancel</span><span class="hljs-params">(String outTradeNo)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>AbstractTransaction</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 抽象交易</span><br><span class="hljs-comment"> * 用途：抽取交易策略中的同类操作</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kael</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractTransaction</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TransactionStrategy</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加支付订单</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> params 订单参数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addPayOrder</span><span class="hljs-params">(Object params)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;向数据库插入支付订单&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>CommodityTransaction</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 商品交易</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kael</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommodityTransaction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTransaction</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">generateOutTradeNo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> TransactionType.COMMODITY.name() + <span class="hljs-string">&quot;_&quot;</span> + System.currentTimeMillis();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">create</span><span class="hljs-params">(Object param)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;购买商品：&quot;</span> + param);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">outTradeNo</span> <span class="hljs-operator">=</span> generateOutTradeNo();<br>        System.out.println(<span class="hljs-string">&quot;订单号：&quot;</span> + outTradeNo);<br>        <span class="hljs-built_in">super</span>.addPayOrder(param);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;创建商品交易&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">success</span><span class="hljs-params">(String outTradeNo)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;商品交易成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cancel</span><span class="hljs-params">(String outTradeNo)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;商品交易取消&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>RechargeTransaction</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 会员充值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kael</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RechargeTransaction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTransaction</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">generateOutTradeNo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> TransactionType.RECHARGE.name() + <span class="hljs-string">&quot;_&quot;</span> + System.currentTimeMillis();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">create</span><span class="hljs-params">(Object param)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;会员充值：&quot;</span> + param);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">outTradeNo</span> <span class="hljs-operator">=</span> generateOutTradeNo();<br>        System.out.println(<span class="hljs-string">&quot;订单号：&quot;</span> + outTradeNo);<br>        <span class="hljs-built_in">super</span>.addPayOrder(param);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;创建会员充值&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">success</span><span class="hljs-params">(String outTradeNo)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;会员充值成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cancel</span><span class="hljs-params">(String outTradeNo)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;会员充值取消&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>TransactionType</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 交易类型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kael</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">TransactionType</span> &#123;<br>    <span class="hljs-comment">// 商品交易</span><br>    COMMODITY(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CommodityTransaction</span>()),<br>    <span class="hljs-comment">// 会员充值</span><br>    RECHARGE(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RechargeTransaction</span>());<br><br>    <span class="hljs-keyword">private</span> TransactionStrategy strategy;<br><br>    TransactionType(TransactionStrategy strategy) &#123;<br>        <span class="hljs-built_in">this</span>.strategy = strategy;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> TransactionStrategy <span class="hljs-title function_">getStrategy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.strategy;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>TransactionContext</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 交易上下文</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kael</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransactionContext</span> &#123;<br>    <span class="hljs-comment">// 交易策略</span><br>    <span class="hljs-keyword">private</span> TransactionStrategy strategy;<br>    <span class="hljs-comment">// 支付通道</span><br>    <span class="hljs-keyword">private</span> PayChannel channel;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置交易策略</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> transactionType 策略类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStrategy</span><span class="hljs-params">(TransactionType transactionType)</span> &#123;<br>        <span class="hljs-built_in">this</span>.strategy = transactionType.getStrategy();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setChannel</span><span class="hljs-params">(PayChannelType channelType, PayTerminal terminal)</span> &#123;<br>        <span class="hljs-built_in">this</span>.channel = PayChannelFactory.builder(channelType, terminal);<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 创建交易</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> param 交易参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回创建结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">create</span><span class="hljs-params">(Object param)</span> &#123;<br>        strategy.create(param);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> channel.createOrder(<span class="hljs-string">&quot;&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;打开&quot;</span> + result);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;创建商品交易&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支付成功</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> outTradeNo 商户订单号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">success</span><span class="hljs-params">(String outTradeNo)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> channel.queryOrder(outTradeNo);<br>        <span class="hljs-keyword">if</span> (result != <span class="hljs-literal">null</span>) &#123;<br>            strategy.success(outTradeNo);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;交易失败&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取消交易</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> outTradeNo 商户订单号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cancel</span><span class="hljs-params">(String outTradeNo)</span> &#123;<br>        channel.cancelOrder(outTradeNo);<br>        strategy.cancel(outTradeNo);<br>        System.out.println(<span class="hljs-string">&quot;商品交易取消&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>最后，我们开始对上面的实现进行组装测试。</p><p><code>PayTest</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 支付测试</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kael</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PayTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;\n---------- 购买商品 ----------&quot;</span>);<br>        <span class="hljs-type">TransactionContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransactionContext</span>();<br>        context.setStrategy(TransactionType.COMMODITY);<br>        context.setChannel(PayChannelType.ALIPAY, PayTerminal.PC);<br>        <span class="hljs-comment">// 创建支付</span><br>        context.create(<span class="hljs-string">&quot;自行车&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;等待用户付款...........&quot;</span>);<br>        <span class="hljs-comment">// 确认支付</span><br>        context.success(<span class="hljs-string">&quot;&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;\n---------- 会员充值 ----------&quot;</span>);<br>        context = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransactionContext</span>();<br>        context.setStrategy(TransactionType.RECHARGE);<br>        context.setChannel(PayChannelType.WECHAT, PayTerminal.APP);<br>        <span class="hljs-comment">// 创建支付</span><br>        context.create(<span class="hljs-string">&quot;白金会员&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;等待用户付款...........&quot;</span>);<br>        <span class="hljs-comment">// 确认支付</span><br>        context.success(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试案例中，我们模拟一个购买商品、一个会员充值，并且两种场景分别使用支付宝的PC支付和微信的APP支付。代码执行后，返回结果如下：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs lasso">-- console <span class="hljs-keyword">log</span> --<br><br>---------- 购买商品 ----------<br>购买商品：自行车<br>订单号：COMMODITY_1682321282696<br>向数据库插入支付订单<br>打开支付宝 PC 收银台<br>等待用户付款<span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>..<br>查询支付宝订单<br>商品交易成功<br><br>---------- 会员充值 ----------<br>会员充值：白金会员<br>订单号：RECHARGE_1682321282707<br>向数据库插入支付订单<br>打开微信 App 收银台<br>等待用户付款<span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>..<br>查询微信订单<br>会员充值成功<br></code></pre></td></tr></table></figure><p>从执行结果上来看，我们完全可以根据不同的参数来进行不同场景不同渠道的支付组合。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><blockquote><p>这个设计可能不是最完美的，但基本解决了我们一开始所遇到的问题。正所谓优化无止境，无论何时你可能总会找到一个更好的设计。</p><p>通过这个设计案例，我们会发现：</p><ul><li>设计是循序渐进的，我们必须由浅入深逐步细化，不要想着能够一步到位。</li><li>实际的软件设计过程中，对于设计模式的运用往往不是某一个单一模式能够解决的。大部分情况下需要多种设计模式进行组合，设计过程尽可能的遵循设计模式基本原则。</li><li>复杂的业务设计建议使用图和伪代码来进行推导，以此来检验我们在设计上的可行性。</li><li>设计被实践之后需要及时记录文档，通过实践，我们已经检验了设计的可行性和稳定性。完整的设计需要及时的记录文档，一方面是当其他人接手时可以迅速的了解设计，另一方面是将来我们遇到同样的场景时可以拿来参考。</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>系统设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>系统设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch 学习笔记</title>
    <link href="/2023/04/21/Elastic%20Search%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/04/21/Elastic%20Search%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Elasticsearch-学习笔记"><a href="#Elasticsearch-学习笔记" class="headerlink" title="Elasticsearch 学习笔记"></a>Elasticsearch 学习笔记</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Elasticsearch（简称：ES） 是一个免费且开放的分布式搜索和分析引擎，适用于包括文本、数字、地理空间、结构化和非结构化数据等在内的所有类型的数据。Elasticsearch 在 Apache Lucene 的基础上开发而成，由 Elasticsearch N.V.（即现在的 Elastic）于 2010 年首次发布。Elasticsearch 以其简单的 REST 风格 API、分布式特性、速度和可扩展性而闻名，是 Elastic Stack 的核心组件；Elastic Stack 是一套适用于数据采集、扩充、存储、分析和可视化的免费开源工具。人们通常将 Elastic Stack 称为 ELK Stack（代指 Elasticsearch、Logstash 和 Kibana），目前 Elastic Stack 包括一系列丰富的轻量型数据采集代理，这些代理统称为 Beats，可用来向 Elasticsearch 发送数据。</p><p>官方网站：<a href="https://www.elastic.co/cn/">https://www.elastic.co/cn/</a></p><p>官方英文文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/getting-started.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/getting-started.html</a></p><p>官方中文文档：<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html">https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html</a></p></blockquote><h3 id="Elasticsearch-用途"><a href="#Elasticsearch-用途" class="headerlink" title="Elasticsearch 用途"></a>Elasticsearch 用途</h3><ul><li>应用程序搜索</li><li>网站搜索</li><li>企业搜索</li><li>日志处理和分析</li><li>基础设施指标和容器监测</li><li>应用程序性能监测</li><li>地理空间数据分析和可视化</li><li>安全分析</li><li>业务分析</li></ul><h3 id="Elasticsearch-基本概念"><a href="#Elasticsearch-基本概念" class="headerlink" title="Elasticsearch 基本概念"></a>Elasticsearch 基本概念</h3><ul><li><p>索引（Index）：索引是具有相同结构的文档集合。在 Elasticsearch 中，索引是个非常重要的内容，对于 Elasticsearch 的大部分操作都是基于索引来完成的。它类似于关系数据库中的数据库。每个索引可以包含多个文档和类型。索引可以分为分片，每个分片可以分布在不同的节点上。</p></li><li><p>类型（Type）：Elasticsearch 中的类型类似数据库中的表。但是从 7.0 版本开始，Elasticsearch 不再支持 Type 的概念，不同的类型使用单独的索引来管理。所有的文档类型都默认使用<code>_doc</code>。</p></li><li><p>文档（Document）：文档类似于关系数据库中的一行记录。每个文档都有一个唯一标识符（ID），并且有一个 JSON 格式的数据内容。</p></li><li><p>映射（Mapping）：映射定义了索引中每个字段的数据类型和属性。ElasticSearch 会根据映射将数据存储在倒排索引中。</p></li><li><p>倒排索引：ElasticSearch 使用倒排索引来实现文档搜索。它将文档中的每个单词都存储到一个排序后的列表中，并将单词所出现的文档 ID 与之关联。这样，就可以通过关键字来快速查找匹配的文档。</p><p>举例：比如搜索关键词“小米手机”，保存记录中有<code>1.南方小米、2.东北大米、3.小米手机</code>。</p><p>ES 会对搜索的关键词进行分词，分词后匹配如下：</p><table><thead><tr><th>关键词</th><th>ID</th></tr></thead><tbody><tr><td>小</td><td>1,3</td></tr><tr><td>米</td><td>1,2,3</td></tr><tr><td>手</td><td>3</td></tr><tr><td>机</td><td>3</td></tr></tbody></table><p>从表中，可以看到，每个分词对应着一组 ID。然后 ES 会对这些匹配的 ID 进行评分，即按照 ID 的出现次数。从分词表中可以看出 ID 为 3 的匹配次数最多。最终 ES 会按照评分从高到低排序查询出数据，即[3.小米手机, 1.南方小米, 2.大米]。</p></li><li><p>分片（shard）：分片是将一个索引（index）拆分成多个部分的过程，每个部分称为一个分片。每个分片包含部分索引数据和索引元数据，这些分片可以在不同的节点上存储和处理，从而提高性能和可扩展性。分片包含主分片和副本分片，每个索引默认都有一个主分片和一个副本分片，并且放到不同的节点上。</p><ul><li>主分片（primary shard）：主分片是索引的原始分片，包含索引的一部分数据。每个主分片在一个节点上维护，可以被分配到集群中的任何节点上。这有点儿类似关系型数据库的水平分库分表，或类似 Redis 的集群模式，通过减少单点存储的数据量来达到提高性能的目的。**<em>注意：主分片数量一旦确定就无法再修改了，如果必须要修改只能重新创建索引，并将原索引的数据迁移到新索引中。虽然 Elasticsearch 提供了自动迁移的 API，但如果数据量过大，迁移会非常耗时。因此，建议一开始就规划好分片数量，尽可能避免后期修改。</em>**</li><li>副本分片（replica shard）：副本分片是主分片的复制品，每个主分片可以有一个或多个副本。当主分片的数据发生变化，Elasticsearch 会自动将数据同步到副本分片上。当主分片失效，Elasticsearch 会自动选举一个副本分片作为主分片，以达到容错的目的。正常情况下，副本分片会作为只读分片提供查询。这有点类似关系型数据库的主从模式，通过主从达到读写分离的目的，当主节点故障，则从节点自动提升为主节点。</li></ul><p>主分片和副本分片被创建时，Elasticsearch 会自动将它们放到不同的节点上，以防止机器节点故障后，副本分片无法被提升为主分片。</p><p><strong>分片划分建议</strong></p><p>主分片的大小最好控制在 30GB 以内，即每个分片存储的数据不要超过 30G，并且主分片的最大数量最好不好超过 100 个。主分片的数量确定可以参考这个公式<code>预估索引数据大小 / 每个分片限制大小</code>。</p><p>比如：预计索引的数据有 500GB，每个索引控制在 30GB。</p><p>分片数量 &#x3D; 500 &#x2F; 30 &#x3D; 16</p><p>即：可以定义 16 个主分片。</p><p>这里只是一个参考，实际划分还要参考硬件性能、并发量等条件。另外，尽量避免单个索引的数量过大，如果数据量本身就很大，可以定义多个索引来存储。比如日志信息，日志是每时每刻都在产生的，可以设定一个时间范围，比如每个月的日志使用一个单独的索引，即索引定义为<code>logs_&lt;年&gt;_&lt;月&gt;</code>。这样做的好处是避免了单个索引的数据量过大，并且当集群扩展节点时，数据会分配到新的节点存储，这样也能达到平衡的目的。</p></li></ul><h2 id="安装-Elasticsearch"><a href="#安装-Elasticsearch" class="headerlink" title="安装 Elasticsearch"></a>安装 Elasticsearch</h2><blockquote><p>Elasticsearch 有简单安装和集群安装两种方式。如果只是想简单体验 Elasticsearch 的功能，可以下载一个 Elasticsearch 的安装包进行安装即可。或使用 Docker 镜像进行安装。</p><p>但在实际使用中，Elasticsearch 一般都使用的是集群环境。因此，本章节介绍怎么使用 Docker 搭建一个 Elasticsearch 的集群环境。使用 Docker 安装 Elasticsearch 集群需要先安装 Docker 和 Docker Compose 环境。</p><p>本次安装的 Elasticsearch 版本是 7.17.7，因为在安装 IK 分词器时发现，IK 分词器的版本只到 7.17.7。</p></blockquote><h3 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h3><p>使用 Docker 安装 Elasticsearch，需要先下载一个镜像，然后运行这个镜像。从镜像运行的容器中复制出 Elasticsearch 所需的配置文件。后面会以编排的形式将配置文件挂载上去。</p><ul><li><p>下载镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull elasticsearch:7.17.7<br></code></pre></td></tr></table></figure></li><li><p>使用镜像运行容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:7.17.7<br></code></pre></td></tr></table></figure></li><li><p>查看运行的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker ps -a<br></code></pre></td></tr></table></figure><p>命令执行结果如下：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs console">-- console log --<br>CONTAINER ID   IMAGE                       COMMAND                  CREATED          STATUS          PORTS                                                                                  NAMES<br>3277e5f102ab   elasticsearch:7.17.7        &quot;/tini -- /usr/local…&quot;   18 seconds ago   Up 13 seconds   0.0.0.0:9200-&gt;9200/tcp, :::9200-&gt;9200/tcp, 0.0.0.0:9300-&gt;9300/tcp, :::9300-&gt;9300/tcp   elasticsearch<br></code></pre></td></tr></table></figure></li><li><p>进入容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it &lt;容器ID&gt; /bin/bash<br></code></pre></td></tr></table></figure><p><strong>重点：成功进入容器后需要查询几个关键的信息。</strong></p><ul><li><p>查询目录所属用户</p><p>使用<code>ll</code>命令查看当前目录，返回如下信息</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs console">-- console log --<br>drwxrwxr-x  1 root          root     58 Mar 24 02:33 ./<br>drwxr-xr-x  1 root          root     27 Jan 31 05:40 ../<br>-rw-r--r--  1 root          root    220 Jan 31 05:40 .bash_logout<br>-rw-r--r--  1 root          root   3771 Jan 31 05:40 .bashrc<br>drwxrwxr-x  3 elasticsearch root     17 Mar 24 02:33 .cache/<br>-rw-r--r--  1 root          root    807 Jan 31 05:40 .profile<br>-r--r--r--  1 root          root   3860 Jan 31 05:33 LICENSE.txt<br>-r--r--r--  1 root          root 642830 Jan 31 05:35 NOTICE.txt<br>-r--r--r--  1 root          root   2710 Jan 31 05:33 README.asciidoc<br>drwxrwxr-x  1 elasticsearch root      6 Jan 31 05:39 bin/<br>drwxrwxr-x  1 elasticsearch root     36 Mar 24 02:33 config/<br>drwxrwxr-x  1 elasticsearch root     19 Mar 24 02:33 data/<br>dr-xr-xr-x  1 root          root     17 Jan 31 05:38 jdk/<br>dr-xr-xr-x  3 root          root   4096 Jan 31 05:38 lib/<br>drwxrwxr-x  1 elasticsearch root     37 Mar 24 02:33 logs/<br>dr-xr-xr-x 61 root          root   4096 Jan 31 05:38 modules/<br>drwxrwxr-x  1 elasticsearch root      6 Jan 31 05:35 plugins/<br></code></pre></td></tr></table></figure><p>这里主要关注三个重要的信息，config、data、logs 这三个目录的所属用户是<code>elasticsearch</code>。这里是个大坑，后面我们在编排服务时，挂载目录的所属用户要和这里的所属用户保持一致，否则启动会提示权限错误。</p></li><li><p>查看用户的 id 信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">id elasticsearch<br></code></pre></td></tr></table></figure><p>命令返回结果如下：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs console">-- console log --<br>uid=1000(elasticsearch) gid=1000(elasticsearch) groups=1000(elasticsearch),0(root)<br></code></pre></td></tr></table></figure><p>这里的 uid 的值是 1000，这个值一定要记好。后面会用到这个值。</p></li><li><p>查询当前路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pwd<br></code></pre></td></tr></table></figure><p>命令返回结果如下：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs console">-- console log --<br>/usr/share/elasticsearch<br></code></pre></td></tr></table></figure><p>这个路径也要记录下来，后面也会用到。确定好路径之后，可以使用<code>exit</code>命令退出容器。</p></li></ul></li><li><p>复制配置文件目录到宿主机</p><p>这一步是将容器下的配置目录复制到宿主机上，这里就用到了前面查询到的<code>/usr/share/elasticsearch</code>路径。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">新建用于保存配置文件的临时目录</span><br>mkdir -p ~/elasticsearch/example<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">复制容器中的配置文件到宿主机</span><br>docker cp &lt;容器ID&gt;:/usr/share/elasticsearch/config ~/elasticsearch/example/config<br></code></pre></td></tr></table></figure></li><li><p>停止并删除 Elasticsearch 容器</p><p>前面启动容器只是为了获取配置文件，配置文件复制出来以后，容器就可以停止了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rm $(docker stop &lt;容器ID&gt;)<br></code></pre></td></tr></table></figure></li></ul><h3 id="修改-elasticsearch-yml-配置文件"><a href="#修改-elasticsearch-yml-配置文件" class="headerlink" title="修改 elasticsearch.yml 配置文件"></a>修改 elasticsearch.yml 配置文件</h3><p>单节点启动的配置文件比较简单，我们需要将其修改成集群模式的配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 集群名称，所有集群节点的名称要一致。</span><br><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">es-cluster</span><br><span class="hljs-comment"># 节点名称，每个节点使用不同的命名，比如：es-node1、es-node2、es-node3</span><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">es-node1</span><br><span class="hljs-comment"># 是否可以成为master节点</span><br><span class="hljs-attr">node.master:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 是否允许该节点存储数据,默认开启</span><br><span class="hljs-attr">node.data:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 网络绑定</span><br><span class="hljs-attr">network.host:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-comment"># 设置对外服务的http端口</span><br><span class="hljs-attr">http.port:</span> <span class="hljs-number">9200</span><br><span class="hljs-comment"># 设置节点间交互的tcp端口</span><br><span class="hljs-attr">transport.port:</span> <span class="hljs-number">9300</span><br><span class="hljs-comment"># 集群发现，此处配置除了自己以外的其他节点。</span><br><span class="hljs-attr">discovery.seed_hosts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">es-node2</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">es-node3</span><br><span class="hljs-comment"># 指定可以成为 mater 节点的 hostname 或者 ip，这些配置将会在第一次选举中进行计算</span><br><span class="hljs-attr">cluster.initial_master_nodes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">es-node1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">es-node2</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">es-node3</span><br><span class="hljs-comment"># 支持跨域访问</span><br><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">&quot;*&quot;</span><br><span class="hljs-comment"># 安全认证</span><br><span class="hljs-attr">xpack.security.enabled:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment">#http.cors.allow-headers: &quot;Authorization&quot;</span><br></code></pre></td></tr></table></figure><h3 id="编排服务"><a href="#编排服务" class="headerlink" title="编排服务"></a>编排服务</h3><p>由于搭建的是集群，所以最好是将每个节点的配置、数据、日志等分开保存。</p><ul><li><p>创建主从节点目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">分别创建节点的数据文件目录</span><br>mkdir -p ~/elasticsearch/node1/data ~/elasticsearch/node2/data ~/elasticsearch/node3/data<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">分别创建三个节点的日志文件目录</span><br>mkdir -p ~/elasticsearch/node1/logs ~/elasticsearch/node2/config ~/elasticsearch/node3/logs<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建插件目录，由于插件是各个节点共享的，因此只创建一个目录即可。</span><br>mkdir -p ～/elasticsearch/plugins<br></code></pre></td></tr></table></figure></li><li><p>复制上一小节编写好的配置文件到节点目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp -r ~/elasticsearch/example/config ~/elasticsearch/node1/config<br>cp -r ~/elasticsearch/example/config ~/elasticsearch/node2/config<br>cp -r ~/elasticsearch/example/config ~/elasticsearch/node3/config<br></code></pre></td></tr></table></figure><p>复制完成后，分别修改三个节点的配置。主要的修改项如下：</p><ul><li>node.name：集群节点名称，它将作为节点的标识存在，最好是每个节点使用不同的名称。</li><li>discovery.seed_hosts：集群节点发现，此处配置除了自己以外的其他节点。可以是 hostname 或 IP:9300，这里的 9300 是集群交互端口，不写会默认使用 9300，如果你使用的是 IP 地址，建议还是写上。</li></ul></li><li><p>给新建的目录授权</p><p>这里为了后续的操作方便，可以直接给<code>elasticsearch</code>目录授权。另外还需要给新建的目录指定所属用户，这里就用到了前面查询到的 uid。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设置权限</span><br>chmod -R o+xrw ~/elasticsearch<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定data目录的所属用户</span><br>chown 1000 ~/elasticsearch/node1/data<br>chown 1000 ~/elasticsearch/node2/data<br>chown 1000 ~/elasticsearch/node3/data<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定logs目录的所属用户</span><br>chown 1000 ~/elasticsearch/node1/logs<br>chown 1000 ~/elasticsearch/node2/logs<br>chown 1000 ~/elasticsearch/node3/logs<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定日志目录的所属用户</span><br>chown 1000 ~/elasticsearch/node1/config<br>chown 1000 ~/elasticsearch/node2/config<br>chown 1000 ~/elasticsearch/node3/config<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定插件目录的所属用户</span><br>chown 1000 -R ～/elasticsearch/plugins<br></code></pre></td></tr></table></figure><p>此处使用的是递归授权，即 elasticsearch 目录及其子目录和文件，授予其他用户的执行和读写权限。另外，使用 chown 指定所属用户之后，使用<code>ll</code>命令查看时，发现目录的所属用户并不是<code>elasticsearch</code>。这是因为宿主机上不存在这个用户，但是它会有一个用户与容器中的<code>elasticsearch</code>用户对应。因此，只要保证宿主机的用户和容器中的用户<code>uid</code>一致就可以了。</p></li><li><p>新建 Docker 网络</p><p>这一步的目的是让后面创建的所有容器都基于这个网络运行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker network create -d bridge elasticsearch_network<br></code></pre></td></tr></table></figure><p>此处创建了一个桥接网络，后面的 Elasticsearch 和 Kibana 编排时，都使用这个网络。这样容器之间就可以互联互通了。如若不然，就必须将所有的服务都写入同一个编排文件中。</p><p>如果想要查看已经创建的网络，可以使用下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker network inspect &lt;网络名称&gt;<br></code></pre></td></tr></table></figure></li><li><p>编写编排文件</p><p>在<code>elasticsearch</code>目录下新建一个<code>elasticsearch-compose.yml</code>文件。编写内容如下：</p><p><code>elasticsearch-compose.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-attr">services:</span><br>    <span class="hljs-attr">es-node1:</span><br>        <span class="hljs-attr">container_name:</span> <span class="hljs-string">es-node1</span><br>        <span class="hljs-attr">hostname:</span> <span class="hljs-string">es-node1</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">elasticsearch:7.17.7</span><br>        <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>        <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>        <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">9200</span><span class="hljs-string">:9200</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">9300</span><span class="hljs-string">:9300</span><br>        <span class="hljs-comment"># 指定使用的网络</span><br>        <span class="hljs-attr">networks:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch_network</span><br>        <span class="hljs-attr">volumes:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/elasticsearch/node1/config:/usr/share/elasticsearch/config</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/elasticsearch/node1/data:/usr/share/elasticsearch/data</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/elasticsearch/node1/logs:/usr/share/elasticsearch/logs</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/elasticsearch/plugins:/usr/share/elasticsearch/plugins</span><br>        <span class="hljs-attr">environment:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;TZ=Asia/Shanghai&quot;</span><br>        <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">stdin_open:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">tty:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-attr">es-node2:</span><br>        <span class="hljs-attr">container_name:</span> <span class="hljs-string">es-node2</span><br>        <span class="hljs-attr">hostname:</span> <span class="hljs-string">es-node2</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">elasticsearch:7.17.7</span><br>        <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>        <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">9201</span><span class="hljs-string">:9200</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">9301</span><span class="hljs-string">:9300</span><br>        <span class="hljs-comment"># 指定使用的网络</span><br>        <span class="hljs-attr">networks:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch_network</span><br>        <span class="hljs-attr">volumes:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/elasticsearch/node2/config:/usr/share/elasticsearch/config</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/elasticsearch/node2/data:/usr/share/elasticsearch/data</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/elasticsearch/node2/logs:/usr/share/elasticsearch/logs</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/elasticsearch/plugins:/usr/share/elasticsearch/plugins</span><br>        <span class="hljs-attr">environment:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;TZ=Asia/Shanghai&quot;</span><br>        <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">stdin_open:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">tty:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-attr">es-node3:</span><br>        <span class="hljs-attr">container_name:</span> <span class="hljs-string">es-node3</span><br>        <span class="hljs-attr">hostname:</span> <span class="hljs-string">es-node3</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">elasticsearch:7.17.7</span><br>        <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>        <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">9202</span><span class="hljs-string">:9200</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">9302</span><span class="hljs-string">:9300</span><br>        <span class="hljs-comment"># 指定使用的网络</span><br>        <span class="hljs-attr">networks:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch_network</span><br>        <span class="hljs-attr">volumes:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/elasticsearch/node3/config:/usr/share/elasticsearch/config</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/elasticsearch/node3/data:/usr/share/elasticsearch/data</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/elasticsearch/node3/logs:/usr/share/elasticsearch/logs</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/elasticsearch/plugins:/usr/share/elasticsearch/plugins</span><br>        <span class="hljs-attr">environment:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;TZ=Asia/Shanghai&quot;</span><br>        <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">stdin_open:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">tty:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 开启外部网络访问，此处开启的是一开始创建好的桥接网络</span><br><span class="hljs-attr">networks:</span><br>    <span class="hljs-attr">elasticsearch_network:</span><br>        <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong><em>注意：JVM 内存的配置不要设置的太小，否则集群无法启动。我这里配置的是最低要求，实际使用时，可以根据情况自行调整。一般调整策略为：(宿主机总内存 &#x2F; 实例数量 &#x2F; 2) + 1，计算结果取整数。比如宿主机内存是 8G，部署了 3 个节点实例，实际计算 2.3333，取整数为 2，则我这里每个节点的最大内存不要超过 2GB。最小内存取最大内存的一半即可，但是不要低于 512M。</em></strong></p></li></ul><h3 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose -f elasticsearch-compose.yml up -d<br></code></pre></td></tr></table></figure><p>启动完成后，分别使用 9200、9201、9202 三个端口访问 Elasticsearch。如果都能正常访问，则说明搭建成功。也可以访问下面的地址来查看集群状态。</p><p><code>http://&lt;IP&gt;:&lt;端口&gt;/_cluster/health?pretty</code>，成功访问后返回如下信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;cluster_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;es-cluster&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;green&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;timed_out&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;number_of_nodes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;number_of_data_nodes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;active_primary_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;active_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;relocating_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;initializing_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;unassigned_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;delayed_unassigned_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;number_of_pending_tasks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;number_of_in_flight_fetch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;task_max_waiting_in_queue_millis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;active_shards_percent_as_number&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">100</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>其中<code>&quot;status&quot;: &quot;green&quot;</code>是指集群状态正常。<code>number_of_nodes</code>是指当前活动的节点数。</p><h2 id="安装-Kibana"><a href="#安装-Kibana" class="headerlink" title="安装 Kibana"></a>安装 Kibana</h2><blockquote><p>Kibana 是一个开源的分析与可视化平台，它可用于管理 Elasticsearch。</p><p>注意：Kibana 的版本最好和 Elasticsearch 的版本保持一致。</p></blockquote><h3 id="安装前准备-1"><a href="#安装前准备-1" class="headerlink" title="安装前准备"></a>安装前准备</h3><p>此处的步骤和安装 Elasticsearch 时的步骤，大致相同，都需要先运行一个临时容器，然后从中复制出配置文件。</p><ul><li><p>下载 Kibana 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">再次声明，Kibana 的版本最好与 ElasticSearch 保持一致。</span><br>docker pull kibana:7.17.7<br></code></pre></td></tr></table></figure></li><li><p>运行一个临时容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d --name kibana -p 5601:5601 kibana:7.17.7<br></code></pre></td></tr></table></figure></li><li><p>进入容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it &lt;容器ID&gt; /bin/bash<br></code></pre></td></tr></table></figure><ul><li><p>查看目录及权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">有些容器不能使用 ll 命令，如果不能用，可以使用 <span class="hljs-built_in">ls</span> -l</span><br>ls -l<br></code></pre></td></tr></table></figure><p>命令执行结果如下：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs console">-- console log --<br>total 1152<br>-rw-rw-r--   1 kibana root    3860 Jan 30 12:30 LICENSE.txt<br>-rw-rw-r--   1 kibana root 1128786 Jan 30 12:30 NOTICE.txt<br>-rw-rw-r--   1 kibana root    3970 Jan 30 12:30 README.txt<br>drwxrwxr-x   2 kibana root      94 Jan 30 12:30 bin<br>drwxrwxr-x   1 kibana root      24 Jan 30 12:44 config<br>drwxrwxr-x   1 kibana root      18 Mar 24 04:10 data<br>drwxrwxr-x   6 kibana root     108 Jan 30 12:30 node<br>drwxrwxr-x 682 kibana root   20480 Jan 30 12:30 node_modules<br>-rw-rw-r--   1 kibana root     740 Jan 30 12:30 package.json<br>drwxrwxr-x   2 kibana root       6 Jan 30 12:30 plugins<br>drwxrwxr-x   9 kibana root     131 Jan 30 12:30 src<br>drwxrwxr-x   3 kibana root      79 Jan 30 12:30 x-pack<br></code></pre></td></tr></table></figure></li><li><p>查看目录的完整路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pwd<br></code></pre></td></tr></table></figure><p>命令执行结果如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">-- <span class="hljs-built_in">console</span> <span class="hljs-built_in">log</span> --<br><span class="hljs-regexp">/usr/</span>share/kibana<br></code></pre></td></tr></table></figure></li><li><p>查看 kibana 的 uid</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">id kibana<br></code></pre></td></tr></table></figure><p>命令执行结果如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">--<span class="hljs-built_in"> console </span>log --<br><span class="hljs-attribute">uid</span>=1000(kibana) <span class="hljs-attribute">gid</span>=1000(kibana) <span class="hljs-attribute">groups</span>=1000(kibana),0(root)<br></code></pre></td></tr></table></figure></li></ul><p>将上面查询到的结果记录下来，后面会用到。</p></li><li><p>复制配置文件目录到宿主机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">新建用于保存配置文件的临时目录</span><br>mkdir -p ~/kibana/example<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">复制容器中的配置文件目录到宿主机临时目录</span><br>docker cp &lt;容器ID&gt;:/usr/share/kibana/config ~/kibana/example/config<br></code></pre></td></tr></table></figure><p>复制完配置文件之后，临时容器就可以删除了，否则后面再启动新实例的时候，会有端口冲突。</p></li></ul><h3 id="修改-kibana-yml-配置文件"><a href="#修改-kibana-yml-配置文件" class="headerlink" title="修改 kibana.yml 配置文件"></a>修改 kibana.yml 配置文件</h3><p><code>kibana.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># ---------- 服务配置 ----------</span><br><span class="hljs-comment"># Kibana 服务名</span><br><span class="hljs-attr">server.name:</span> <span class="hljs-string">kibana</span><br><span class="hljs-comment"># 服务IP</span><br><span class="hljs-attr">server.host:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><br><span class="hljs-comment"># 服务端口</span><br><span class="hljs-attr">server.port:</span> <span class="hljs-number">5601</span><br><span class="hljs-comment"># Kibana 停止超时时间，当 Kibana 需要关闭或重启时，需要等待 ES 确认。这里是等待的多少秒后关闭。</span><br><span class="hljs-comment"># 如果 ES 集群响应缓慢，这里设置的时间最好长一点。因为超过这个时间，Kibana就不会再等待了。</span><br><span class="hljs-comment"># 当然也不要太长。默认是5秒。</span><br><span class="hljs-attr">server.shutdownTimeout:</span> <span class="hljs-string">&quot;5s&quot;</span><br><br><span class="hljs-comment"># ---------- Elasticsearch ----------</span><br><span class="hljs-comment"># 设置 Elasticsearch 集群主机列表</span><br><span class="hljs-comment"># 如果编排 ES 服务时指定了 hostname，则这里可以用 hostname，否则可以使用IP地址。</span><br><span class="hljs-comment"># 如果使用的是宿主机IP，则这里的端口是容器对外暴露的端口。否则为容器内端口。</span><br><span class="hljs-attr">elasticsearch.hosts:</span><br>    [<span class="hljs-string">&quot;http://es-node1:9200&quot;</span>, <span class="hljs-string">&quot;http://es-node2:9200&quot;</span>, <span class="hljs-string">&quot;http://es-node3:9200&quot;</span>]<br><span class="hljs-comment"># 这个配置项，基于 Docker 部署会有。即：开启对容器内 ES 的监控。默认值为 true</span><br><span class="hljs-attr">monitoring.ui.container.elasticsearch.enabled:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># ---------- 其他配置 ----------</span><br><span class="hljs-comment"># 国际化，这里用的 Docker 镜像已经集成了语言包。如果是裸机安装，需要先安装语言包，才能国际化。</span><br><span class="hljs-attr">i18n.locale:</span> <span class="hljs-string">&quot;zh-CN&quot;</span><br></code></pre></td></tr></table></figure><p>Kibana 的配置项很多，这里只列举了一些关键参数。如果想要使用其他相关功能，可以查阅官方文档。</p><h3 id="编排服务-1"><a href="#编排服务-1" class="headerlink" title="编排服务"></a>编排服务</h3><ul><li><p>创建相关目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据文件目录</span><br>mkdir -p ~/kibana/data<br></code></pre></td></tr></table></figure></li><li><p>复制编写好的配置文件到正式目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp -r ~/kibana/example/config ~/kibana/config<br></code></pre></td></tr></table></figure></li><li><p>给目录授权</p><p>这一步可以借鉴前面的 Elasticsearch 授权说明。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">给目录授权</span><br>chmod -R o+xrw ~/kibana<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定所属用户</span><br>chown 1000 ~/kibana/config<br>chown 1000 ~/kibana/data<br></code></pre></td></tr></table></figure></li><li><p>查看已经运行的 Elasticsearch 容器的网络名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker inspect &lt;容器ID&gt; --format=&#x27;&#123;&#123;range $key,$value:=.NetworkSettings.Networks&#125;&#125;&#123;&#123;$key&#125;&#125; &#123;&#123;end&#125;&#125;&#x27;<br></code></pre></td></tr></table></figure><p>命令执行结果如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">-- <span class="hljs-built_in">console</span> <span class="hljs-built_in">log</span> --<br>elasticsearch_default<br></code></pre></td></tr></table></figure><p>在书写编排文件时，要让 kibana 加入到这个网络，否则无法使用 hostname 访问集群节点。</p></li><li><p>编写编排文件</p><p>在<code>kibana</code>目录下新建一个<code>kibana-compose.yml</code>文件，编写内容如下：</p><p><code>kibana-compose.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-attr">services:</span><br>    <span class="hljs-attr">kibana:</span><br>        <span class="hljs-attr">container_name:</span> <span class="hljs-string">kibana</span><br>        <span class="hljs-attr">hostname:</span> <span class="hljs-string">kibana</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">kibana:7.17.7</span><br>        <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>        <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">5601</span><span class="hljs-string">:5601</span><br>        <span class="hljs-comment"># 配置使用的网络</span><br>        <span class="hljs-attr">networks:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch_network</span><br>        <span class="hljs-attr">volumes:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/kibana/config:/usr/share/kibana/config</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/kibana/data:/usr/share/kibana/data</span><br>        <span class="hljs-attr">environment:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;TZ=Asia/Shanghai&quot;</span><br>        <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">stdin_open:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 开启外部网络访问，此处开启的是一开始创建好的桥接网络</span><br><span class="hljs-attr">networks:</span><br>    <span class="hljs-attr">elasticsearch_network:</span><br>        <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="启动-kibana"><a href="#启动-kibana" class="headerlink" title="启动 kibana"></a>启动 kibana</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose -f kibana-compose.yml up -d<br></code></pre></td></tr></table></figure><p>容器创建后，可以使用下面的命令查看是否启动成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看容器运行状态，如果 STATUS 始终是 UP，则说明容器启动成功。</span><br>docker ps -a<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看容器运行日志，如果没有报错信息，则说明 Kibana 运行良好。</span><br>docker logs -f &lt;容器ID&gt;<br></code></pre></td></tr></table></figure><p>确保一切正常之后，在浏览器输入：http:&#x2F;&#x2F;&lt;IP 地址&gt;:5061&#x2F;，就可以访问 Kibana 管理界面了。</p><h3 id="新建工作区"><a href="#新建工作区" class="headerlink" title="新建工作区"></a>新建工作区</h3><blockquote><p>新建工作区的目的是便于管理。当多个项目使用同一个 Elasticsearch 时，可以通过新建工作区来隔离。</p></blockquote><p>进入<code>菜单/Management/Stack Management</code>，在新打开的页面中找到<code>Kibana</code>标签下的<code>工作区</code>选项。点击右上角的<code>创建工作区</code>按钮。按照表单要求填写即可。</p><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><blockquote><p>Kibana 提供了一个非常好用的开发工具。日常的一些 ES 操作都可以在上面完成。</p></blockquote><p>开发工具位置：<code>菜单/Management/开发工具</code>。</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><blockquote><p>索引对于 Elasticsearch 存储来说是最基本的单元。所有的数据都是存储在某个索引上的。</p></blockquote><h3 id="新建索引"><a href="#新建索引" class="headerlink" title="新建索引"></a>新建索引</h3><h4 id="简单索引创建"><a href="#简单索引创建" class="headerlink" title="简单索引创建"></a>简单索引创建</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">PUT /demo_user_info<br></code></pre></td></tr></table></figure><p>命令执行结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;acknowledged&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;shards_acknowledged&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;demo_user_info&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>此时我们就创建了一个名为<code>demo_user_info</code>的索引。</p><p>这里需要注意，一个工作区内不能出现同名的索引。如果我们使用上面的指令执行多次，那么从第二次开始会报错。另外，索引从操作上来将不是必须提前创建的，我们也可以在创建文档的时候创建。比如下面这样：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http">PUT /demo_user_info/_doc<br>&#123;<br>userName: &quot;hello&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时，Elasticsearch 会自动帮我们创建一个<code>demo_user_info</code>的索引，并往索引中插入一条数据。</p><h4 id="创建索引并设置分片和副本"><a href="#创建索引并设置分片和副本" class="headerlink" title="创建索引并设置分片和副本"></a>创建索引并设置分片和副本</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http">PUT /demo_user_info<br>&#123;<br>  &quot;settings&quot;: &#123;<br>    &quot;number_of_shards&quot;: 2,<br>    &quot;number_of_replicas&quot;: 3<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li>number_of_shards：分片数量</li><li>number*of_replicas：副本数量，这里需要说明的是，副本总数量 &#x3D; 分片数量 * 设定的副本数量。比如：分片数量为 2，副本数量为 3，则副本总数量 &#x3D; 2 _ 3 &#x3D; 6 个。由此可以看出，这里指定的副本数量是指每个主分片有几个副本。</li></ul><h3 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h3><blockquote><p>索引不能修改主分片数量，其他修改可以通过相应的指令来修改。</p></blockquote><p><strong>修改副本数量</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http">PUT /demo_user_info/_settings<br>&#123;<br>  &quot;settings&quot;: &#123;<br>    &quot;number_of_replicas&quot;: 4<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>修改映射</strong></p><p>以修改<code>userName</code>为例。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs http">PUT /demo_user_info/_mapping<br>&#123;<br>  &quot;properties&quot;: &#123;<br>    &quot;userName&quot;: &#123;<br>      &quot;type&quot;: &quot;keyword&quot;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">DELETE /my-index<br></code></pre></td></tr></table></figure><h3 id="迁移分片"><a href="#迁移分片" class="headerlink" title="迁移分片"></a>迁移分片</h3><p>对于索引不能修改的设置，可以通过新建索引，然后进行索引迁移的办法来实现。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs http">POST _reindex<br>&#123;<br>  &quot;source&quot;: &#123;<br>    &quot;index&quot;: &quot;old-index&quot;<br>  &#125;,<br>  &quot;dest&quot;: &#123;<br>    &quot;index&quot;: &quot;new-index&quot;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>使用举例</strong></p><ul><li><p>关闭索引的写操作</p><p>关闭写操作的目的是为了在迁移的过程中，防止有新的写入，导致迁移后的数据不完整。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http">PUT /demo_user_info/_settings<br>&#123;<br>  &quot;blocks.write&quot;: true<br>&#125;<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>blocks.write</code>：写入锁。true-上锁；false-解锁。</li></ul></li><li><p>创建新索引</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http">PUT /demo_user_info-2<br>&#123;<br>  &quot;settings&quot;: &#123;<br>    &quot;number_of_shards&quot;: 1,<br>    &quot;number_of_replicas&quot;: 1<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>迁移数据到新索引</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs http">POST _reindex<br>&#123;<br>  &quot;source&quot;: &#123;<br>    &quot;index&quot;: &quot;demo_user_info&quot;<br>  &#125;,<br>  &quot;dest&quot;: &#123;<br>    &quot;index&quot;: &quot;demo_user_info-2&quot;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>数据迁移完毕后，测试没有问题再删除旧的索引。</p></li></ul><h3 id="索引别名"><a href="#索引别名" class="headerlink" title="索引别名"></a>索引别名</h3><blockquote><p>索引别名是一个可以指向多个索引的别名，它允许用户使用别名来查询索引，这在索引迁移和合并查询时非常有效。但是需要注意，一对多的别名在读写时，一方面性能不好，另一方面可能导致数据不一致。因此，除非必要，否则尽可能使用一对一的别名。</p></blockquote><p>还是以上面的索引迁移为例，我们可以在一开始设计索引时就定义好一个别名，比如<code>user_info</code>，它指向一个具体的索引<code>demo_user_info</code>。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs http">POST /_aliases<br>&#123;<br>  &quot;actions&quot;: [<br>    &#123;<br>      &quot;add&quot;: &#123;<br>        &quot;index&quot;: &quot;demo_user_info&quot;,<br>        &quot;alias&quot;: &quot;user_info&quot;<br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>待数据迁移完毕后，将别名指向新的索引。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">POST /_aliases<br>&#123;<br>  &quot;actions&quot;: [<br>    &#123;<br>      &quot;remove&quot;: &#123;<br>        &quot;index&quot;: &quot;demo_user_info&quot;,<br>        &quot;alias&quot;: &quot;user_info&quot;<br>      &#125;<br>    &#125;,<br>    &#123;<br>      &quot;add&quot;: &#123;<br>        &quot;index&quot;: &quot;demo_user_info-2&quot;,<br>        &quot;alias&quot;: &quot;user_info&quot;<br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，我们在查询索引时，就可以一直使用别名<code>user_info</code>来查询。避免索引迁移后进行大量的修改。</p><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><blockquote><p>Elasticsearch 的映射（Mapping）是指用于定义索引中字段的数据类型、分词器等属性的结构。映射由多个字段映射组成，每个字段映射定义了一个字段的名称、数据类型、分词器、索引方式、存储方式等属性。映射在索引创建时定义，可以用于约束和规范数据，以提高搜索效率和精度。</p></blockquote><p>在 Elasticsearch 中，每个索引都有一个映射，映射中包含了索引中所有字段的定义。下面是一个映射的示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;timestamp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;date&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>在这个映射中，包含了 4 个字段映射：</p><ul><li>title：文档标题字段，数据类型为 text。</li><li>content：文档内容字段，数据类型为 text。</li><li>author：作者字段，数据类型为 keyword。</li><li>timestamp：时间戳字段，数据类型为 date。</li></ul><p>每个字段映射可以包含多个属性，常用的属性包括：</p><ul><li>type：字段的数据类型，例如 text、keyword、date 等。</li><li>analyzer：用于对文本字段进行分词的分词器。</li><li>index：指定字段是否需要被索引，例如设置为 false 的字段不会被索引。</li><li>store：指定字段是否需要被存储，例如设置为 true 的字段会被存储在磁盘上，方便进行检索。</li><li>format：指定日期字段的格式。</li></ul><p>映射的作用主要有两个：</p><ol><li>约束数据：映射可以规范字段的数据类型、分词器等属性，从而约束数据的输入和格式，避免输入错误或无效数据的出现，提高搜索的准确性和精度。</li><li>提高搜索效率：映射可以指定字段的索引方式、存储方式等属性，从而提高搜索效率和速度，避免不必要的计算和 IO 操作。</li></ol><p>需要注意的是，和主分片一样，映射一旦定义后，就不能够再修改。因此，在设计映射时需要考虑到数据的需求和未来的扩展性，避免在后期需要修改映射的情况。如果需要修改映射并且保证每个文档都有新的映射，只能够通过重新创建索引的方式来实现。</p><h3 id="创建映射"><a href="#创建映射" class="headerlink" title="创建映射"></a>创建映射</h3><blockquote><p>通常情况下，映射会在创建索引时一起被创建出来。但如果已经有索引了，也可以再次创建，只不过新增的映射不会作用在历史数据上。</p></blockquote><ul><li><p>创建索引时同步创建映射</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http">PUT /my-index<br>&#123;<br>  &quot;mappings&quot;: &#123;<br>    &quot;properties&quot;: &#123;<br>      &quot;fieldName&quot;: &#123;<br>        &quot;type&quot;: &quot;text&quot;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在已有的索引上创建映射</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs http">PUT /my-index/_mapping<br>&#123;<br>  &quot;properties&quot;: &#123;<br>    &quot;fieldName&quot;: &#123;<br>      &quot;type&quot;: &quot;text&quot;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>创建索引使用到的参数也不用刻意去记，当第一个文档路径被成功创建之后，Elasticsearch 会根据数据结构自动推断出映射。之后，我们只需要根据自己的需求，修改对应的参数即可，比如：分词设置、分析器设置等。</p><p>另外，每个字段中还可以再定义<code>properties</code>配置，以此来构建一个复杂的数据结构。</p><h3 id="修改映射"><a href="#修改映射" class="headerlink" title="修改映射"></a>修改映射</h3><blockquote><p>注意：这里的修改只是修改了字段的索引方式，其它不能修改。索引的 Mapping 字段只能追加，不能删除和类型修改。</p></blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs http">PUT /my-index/_mapping<br>&#123;<br>  &quot;properties&quot;: &#123;<br>    &quot;fieldName&quot;: &#123;<br>      &quot;type&quot;: &quot;text&quot;,<br>      &quot;fields&quot;: &#123;<br>        &quot;keyword&quot;: &#123;<br>          &quot;type&quot;: &quot;keyword&quot;,<br>          &quot;ignore_above&quot;: 256<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从执行指令上来看，不难发现修改映射和添加映射一样，都是使用的 PUT 方法。当映射不存在时会创建一个新的映射，当映射存在时会对其进行修改。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote><p>结合上面的内容不难看出，在 Elasticsearch 中，所有涉及到结构层面的东西是不能修改的。比如主分片、映射等，因为这些修改会导致数据不完整，因此不支持修改。如果想要修改，只能够通过重建索引来实现。</p><p>建议：在使用 Elasticsearch 之前，应当规划好索引并且设计好数据结构。因为就算是 Elasticsearch 支持索引的迁移，这也会给运维的过程增加很多负担，因为每次的索引迁移都需要关闭索引的写入，这也就导致一段时间内，某些功能将不可用。</p><p>除此之外，对于数据量非常庞大，并且允许冷热分离的索引，建议采用一对多别名的方式来使用。可以使用时间维度将数据分成多个索引，随着时间的增长逐步增加。然后将别名与一定时间范围内的索引进行绑定来控制查询范围，比如只允许查询三个月内的数据，其他数据只能后台查询。</p></blockquote><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><blockquote><p>Elasticsearch 的文档类似关系型数据库中的一行记录，是日常开发过程中使用最多的操作。因此，文档的操作也是 Elasticsearch 学习的重点。</p></blockquote><h3 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h3><p>要创建一个文档，需要向 Elasticsearch 的一个索引中添加一个 JSON 格式的文档。虽然 Elasticsearch 支持在第一次创建文档时同步创建索引。但如果想要对索引进行设置，比如主分片数量、固定映射字段等操作，就必须先创建好文档再写入数据，因为同步创建索引时使用的是 Elasticsearch 默认值。</p><p>下面是一个创建文档的简单示例：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http">PUT /my_index/_doc/1<br>&#123;<br>  &quot;title&quot;: &quot;Elasticsearch文档&quot;,<br>  &quot;content&quot;: &quot;Elasticsearch 是一个分布式的全文搜索和分析引擎，它能够帮助用户存储、搜索和分析海量的数据。&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个例子中，使用了 PUT 请求将一个 JSON 格式的文档添加到名为“my_index”的索引中，该文档的 ID 为“1”。文档包含两个字段：“title”和“content”。</p><p>在创建文档时，可以选择为文档指定一个唯一的 ID，或者让 Elasticsearch 自动生成一个唯一的 ID。如果您未指定文档 ID，则 Elasticsearch 会自动生成一个唯一的 ID。</p><p>除了使用 PUT 请求之外，还可以使用 POST 请求创建文档。例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST <span class="hljs-regexp">/my_index/</span>_doc<br>&#123;<br>  <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;Elasticsearch文档&quot;</span>,<br>  <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;Elasticsearch 是一个分布式的全文搜索和分析引擎，它能够帮助用户存储、搜索和分析海量的数据。&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在这种情况下，Elasticsearch 会自动生成一个唯一的 ID，并将文档添加到名为“my_index”的索引中。</p><p>注意，如果尝试添加一个具有相同 ID 的文档，则 Elasticsearch 会将新文档替换旧文档。如果您希望将文档添加到索引中而不是替换旧文档，则可以使用 POST 请求，并将“_id”字段设置为一个新的唯一值。</p><p>在 Elasticsearch 中，PUT 和 POST 请求都可以用来创建新文档，但它们之间有一些重要的区别：</p><ul><li>PUT 请求必须指定文档 ID，而 POST 请求可以让 Elasticsearch 自动生成文档 ID。</li><li>PUT 请求是幂等的，即重复调用同一个 PUT 请求多次不会导致数据的变化，而 POST 请求不是幂等的。</li></ul><h3 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h3><p>每个文档都有一个版本号，使用版本号参数可以达到并发控制的效果。</p><p><strong>查询版本号</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">GET /my_index/_doc/1<br></code></pre></td></tr></table></figure><p>这里查询出 ID 为 1 的文档，返回内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_index&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_seq_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_primary_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;found&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Elasticsearch文档ssss&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Elasticsearch 是一个分布式的全文搜索和分析引擎，它能够帮助用户存储、搜索和分析海量的数据。&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这里有三个重要的信息：</p><ul><li>_version：它是 Elasticsearch 的内部版本号，是 Elasticsearch 在创建或更新文档时自动分配的，也是 Elasticsearch 内部控制幂等的机制，不能作为乐观锁来使用。</li><li>_seq_no：文档序列号，这是一个外部版本，每次修改文档序列号都会增加。它可以作为乐观锁来控制并发操作。</li><li>_primary_term：文档所在的分片号，Elasticsearch 的索引是支持分片的，数据放在哪个分片上是有 Elasticsearch 决定的。因此，使用序列号控制并发操作时，需要向 Elasticsearch 说明文档在哪个分片上。</li></ul><p>比如我们在修改数据的时候，使用版本号来控制并发，如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http">PUT /my_index/_doc/1?if_seq_no=8&amp;if_primary_term=1<br>&#123;<br>  &quot;title&quot;: &quot;Elasticsearch文档ssss&quot;,<br>  &quot;content&quot;: &quot;Elasticsearch 是一个分布式的全文搜索和分析引擎，它能够帮助用户存储、搜索和分析海量的数据。&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>命令执行后，返回数据如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_index&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;updated&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_seq_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_primary_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>当再次执行命令时，返回结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;root_cause&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;version_conflict_engine_exception&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;[1]: version conflict, required seqNo [8], primary term [1]. current document has seqNo [9] and primary term [1]&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;index_uuid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;qNAAFgvPRpWhEjea30PAow&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;shard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_index&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;version_conflict_engine_exception&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;[1]: version conflict, required seqNo [8], primary term [1]. current document has seqNo [9] and primary term [1]&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index_uuid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;qNAAFgvPRpWhEjea30PAow&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;shard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_index&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">409</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这是会看到报错信息，其中有一段信息内容为<code>version conflict, required seqNo [8], primary term [1]. current document has seqNo [9] and primary term [1]</code>。这段话的大致意思是请求的序列号为 8，但当前文档的序列号是 9。这和我们在使用关系型数据库时，通过查询版本号控制幂等几乎是一样的。</p><h3 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h3><blockquote><p>注意：上面提到创建文档之后，再次使用命令进行操作会对文档进行修改。这里的修改实际上是覆盖数据。</p><p>比如我们执行</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http">PUT /my_index/_doc/1<br>&#123;<br>  &quot;title&quot;: &quot;Elasticsearch文档ssss&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么 ID 为 1 的文档将会被新文档覆盖，当再次查询时，会发现<code>content</code>字段没有了。因此我们在修改文档时，尽可能使用部分修改，即只修改列举出的字段。尽可能不要使用覆盖操作。</p></blockquote><p>Elasticsearch 支持两种文档的修改方式，并且更新只能使用 POST 方式，另外从示例中可以看出，局部修改时也可以使用序列号来进行并发控制。</p><ul><li><p>局部文档更新</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http">POST /my_index/_update/1?if_seq_no=15&amp;if_primary_term=1<br>&#123;<br>  &quot;doc&quot;: &#123;<br>    &quot;title&quot;: &quot;Elasticsearch文档局部更新2&quot;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用脚本更新文档</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http">POST /my_index/_update/1?if_seq_no=16&amp;if_primary_term=1<br>&#123;<br>  &quot;script&quot;: &#123;<br>    &quot;source&quot;: &quot;ctx._source.title = &#x27;Elasticsearch文档脚本更新&#x27;&quot;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Elasticsearch 脚本使用的是<code>Painless</code>语言，它的语法类似<code>Groovy</code>语言，是 Java 的扩展脚本。因此这里可以直接使用它的语法来做更深入的操作。</p><p>比如：我们在修改的时候，文档内所有的英文改成大写。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http">POST /my_index/_update/1?if_seq_no=17&amp;if_primary_term=1<br>&#123;<br>  &quot;script&quot;: &#123;<br>    &quot;source&quot;: &quot;ctx._source.title = &#x27;Elasticsearch文档脚本更新&#x27;.toUpperCase()&quot;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以看到，字符串后面调用了一个<code>toUpperCase()</code>方法。</p></li></ul><p><strong>按条件修改</strong></p><p>除了上面提到的根据 ID 修改文档外，也可以根据条件来修改。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs http">POST /my_index/_update_by_query<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;match&quot;: &#123;<br>      &quot;title.keyword&quot;: &quot;Elasticsearch文档2&quot;<br>    &#125;<br>  &#125;,<br>  &quot;script&quot;: &#123;<br>    &quot;source&quot;: &quot;ctx._source.title = ctx._source.title + &#x27;条件修改&#x27;&quot;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>条件修改是一个非常危险的操作，并且一旦修改文档就无法恢复。尤其是该条件字段在 Elasticsearch 中被分词了，这将会导致所有分词匹配的数据都会被修改。</p><p>因此，如果想要使用条件修改就一定要将条件进行精准匹配。如果字段被分词可以在查询字段的后面加上<code>.keyword</code>来精准查询，如果字段没有被分词，可以将<code>match</code>替换成<code>term</code>。</p><p>另外，按条件修改只能通过脚本方式修改，不支持局部更新的方式来修改。如果想要修改多个字段，可以使用 params。比如下面这个例子：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http">POST /my_index/_update_by_query<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;match&quot;: &#123;<br>      &quot;title.keyword&quot;: &quot;Elasticsearch文档2&quot;<br>    &#125;<br>  &#125;,<br>  &quot;script&quot;: &#123;<br>    &quot;source&quot;: &quot;ctx._source.title = params.title; ctx._source.content = params.content&quot;,<br>    &quot;params&quot;: &#123;<br>      &quot;title&quot;: &quot;Elasticsearch文档2条件修改&quot;,<br>      &quot;content&quot;: &quot;Elasticsearch 是一个分布式的全文搜索和分析引擎&quot;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>params 中定义了修改的参数，然后在 source 中使用语法拼接，或在 source 中使用数组来定义每一个需要更新的字段。</p><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><p>删除文档时，可以根据 ID 来删除，也可以根据条件来删除。</p><ul><li><p>根据 ID 删除</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">DELETE /my_index/_doc/1<br></code></pre></td></tr></table></figure></li><li><p>按条件删除</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs http">POST /my_index/_delete_by_query<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;match&quot;: &#123;<br>      &quot;title.keyword&quot;: &quot;Elasticsearch文档2&quot;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>条件删除是一个非常危险的操作，并且一旦删除文档就无法恢复。尤其是该条件字段在 Elasticsearch 中被分词了，这将会导致所有分词匹配的数据都会被删除。</p><p>因此，如果想要使用条件删除就一定要将条件进行精准匹配。如果字段被分词可以在查询字段的后面加上<code>.keyword</code>来精准查询，如果字段没有被分词，可以将<code>match</code>替换成<code>term</code>。</p></li></ul><h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><p>以下是 Elasticsearch 常用的一些查询类型：</p><ul><li>match 查询：该查询将在指定的字段中搜索包含给定单词或短语的文档。它支持模糊匹配和距离计算，并且可以与不同的运算符（如 AND 和 OR）结合使用。</li><li>term 查询：该查询将在指定字段中查找包含指定术语的文档。它是精确匹配，不会分词查询字符串，而是在原始文本上执行匹配。</li><li>range 查询：该查询将返回指定范围内的文档。可以指定数字、日期和其他类型的范围。</li><li>bool 查询：该查询将允许你组合多个查询条件，使用布尔运算符进行联合，例如 AND、OR 和 NOT。</li><li>prefix 查询：该查询将在指定字段中搜索以给定前缀开头的文档。</li><li>wildcard 查询：该查询将在指定字段中搜索匹配给定通配符模式的文档。</li><li>fuzzy 查询：该查询将在指定字段中搜索与给定单词类似的文档，支持模糊匹配。</li><li>match_phrase 查询：该查询将在指定字段中搜索包含给定短语的文档，但短语必须以相同的顺序和连续出现。</li><li>match_all 查询：该查询将返回所有文档，可以用于不带任何搜索条件的查询，但是需要指定索引名称。</li><li>multi_match 查询：该查询将在多个字段中搜索包含指定单词或短语的文档。</li></ul><p>下面开始说明一些常用的查询案例</p><h4 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http">GET /my_index/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;match_all&quot;: &#123;&#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以直接使用</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">GET /my_index/_search<br></code></pre></td></tr></table></figure><h4 id="查询时返回指定字段"><a href="#查询时返回指定字段" class="headerlink" title="查询时返回指定字段"></a>查询时返回指定字段</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http">GET /my_index/_search<br>&#123;<br>  &quot;_source&quot;: [&quot;title&quot;, &quot;content&quot;]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="单条件查询"><a href="#单条件查询" class="headerlink" title="单条件查询"></a>单条件查询</h4><p>比如查询<code>title</code>字段：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs http">GET /my_index/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;match&quot;: &#123;<br>      &quot;title&quot;: &quot;Elasticsearch&quot;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="多条件-AND-查询"><a href="#多条件-AND-查询" class="headerlink" title="多条件 AND 查询"></a>多条件 AND 查询</h4><p>比如查询<code>title</code>和<code>content</code>都包含某个值：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs http">GET /my_index/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;bool&quot;: &#123;<br>      &quot;must&quot;: [<br>        &#123;<br>          &quot;match&quot;: &#123;<br>            &quot;title&quot;: &quot;Elasticsearch&quot;<br>          &#125;<br>        &#125;,<br>        &#123;<br>          &quot;match&quot;: &#123;<br>            &quot;content&quot;: &quot;Elasticsearch&quot;<br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="多条件-OR-查询"><a href="#多条件-OR-查询" class="headerlink" title="多条件 OR 查询"></a>多条件 OR 查询</h4><p><code>multi_match</code>：多匹配方式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">GET /my_index/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;multi_match&quot;: &#123;<br>      &quot;query&quot;: &quot;1&quot;,<br>      &quot;fields&quot;: [&quot;title&quot;, &quot;content&quot;]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>should</code>：布尔方式。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs http">GET /my_index/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;bool&quot;: &#123;<br>      &quot;should&quot;: [<br>        &#123;<br>          &quot;match&quot;: &#123;<br>            &quot;title&quot;: &quot;1&quot;<br>          &#125;<br>        &#125;,<br>        &#123;<br>          &quot;match&quot;: &#123;<br>            &quot;content&quot;: &quot;1&quot;<br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h4><p>比如文档中有一个<code>price</code>字段，查询价格在<code>25.00</code>到<code>50.00</code>的数据。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs http">GET /my_index/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;range&quot;: &#123;<br>      &quot;price&quot;: &#123;<br>        &quot;gte&quot;: 25,<br>        &quot;lte&quot;: 50<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http">GET /my_index/_search<br>&#123;<br>  &quot;from&quot;: 0,<br>  &quot;size&quot;: 10<br>&#125;<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li>from：页索引，即：(页码 - 1) * 页大小。</li><li>size：页大小。</li></ul><h4 id="查询排序"><a href="#查询排序" class="headerlink" title="查询排序"></a>查询排序</h4><p>比如按照价格降序</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http">GET /my_index/_search<br>&#123;<br>  &quot;sort&quot;: [<br>    &#123;<br>      &quot;price&quot;: &#123;<br>        &quot;order&quot;: &quot;desc&quot;<br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="查询总记录数"><a href="#查询总记录数" class="headerlink" title="查询总记录数"></a>查询总记录数</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">GET /my_index/_count<br></code></pre></td></tr></table></figure><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><p>模糊查询有很多种方式，这里介绍两个常用的。但由于模糊查询对性能的损耗较高，通常情况下不建议模糊查询，而尽可能给予分词搜索。</p><ul><li><p>使用通配符进行模糊查询</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http">GET /my_index/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;wildcard&quot;: &#123;<br>      &quot;content.keyword&quot;: &#123;<br>        &quot;value&quot;: &quot;*se?rch*&quot;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>匹配说明：</p><p>*：表示忽略匹配的内容，也可以理解为模糊位置。</p><p>?：是占位符，比如<code>*se?rch*</code>中，<code>se</code>和<code>rch</code>中间有一个字符可以任意。有几个?表示有几个任意字符。</p></li><li><p>使用相似度进行模糊查询</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs http">GET /my_index/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;fuzzy&quot;: &#123;<br>      &quot;content&quot;: &#123;<br>        &quot;value&quot;: &quot;海量&quot;,<br>        &quot;fuzziness&quot;: 1<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重要参数说明：</p><ul><li>fuzziness：fuzziness 参数用于控制模糊查询的容错率。它指定了查询时能够容忍的最大编辑距离，即允许查询中的单词和目标词之间的最大差异量。其中 1 表示容忍一个字符的差异，值越大匹配度越高，但相对的查询出的数据越不精准。</li></ul></li></ul><h2 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h2><blockquote><p>Elasticsearch 安装完成后，默认只有一个分词器<code>standard</code>。这是一个标准分词器，它可以对英文进行很好的分词处理。但是如果使用中文查询，他会将每一个字分成一个词，这对 Elasticsearch 的损耗相当大，因此需要安装一个中文分词器来处理。</p><p>常用的分词是 ik 中文分词器。</p></blockquote><p>ik 分词器有以下几种常用的分词方式：</p><ul><li>ik_smart：智能分词，可以将一些较复杂的词汇进行正确地拆分。</li><li>ik_max_word：细粒度分词，会将所有可能的词语都进行切分，速度较慢，但精度较高。</li><li>ik_word：粗粒度分词，会将一些常见的词语组合在一起，速度较快，但精度较低。</li><li>ik_pinyin：拼音分词，将汉字转换成拼音，并进行切分。</li><li>ik_synonym：同义词分词，根据自定义的同义词词典进行分词。</li><li>ik_english：英文分词，对英文文本进行分词。</li></ul><h3 id="安装-IK-分词器"><a href="#安装-IK-分词器" class="headerlink" title="安装 IK 分词器"></a>安装 IK 分词器</h3><blockquote><p>分词器的版本要和 Elasticsearch 的版本一致，否则无法启动。</p></blockquote><h4 id="下载插件包"><a href="#下载插件包" class="headerlink" title="下载插件包"></a>下载插件包</h4><ul><li><p>下载分词器包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.17.7/elasticsearch-analysis-ik-7.17.7.zip<br></code></pre></td></tr></table></figure><p>如果使用<code>wget</code>下载比较慢，也可以下载到本地电脑，然后上传到服务器。</p></li></ul><h4 id="安装分词器"><a href="#安装分词器" class="headerlink" title="安装分词器"></a>安装分词器</h4><ul><li><p>解压分词器包到插件目录</p><p>这里将插件包解压到了插件目录下的<code>ik</code>目录，<code>ik</code>目录无需提前创建，解压时会自动创建。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">unzip ~/elasticsearch-analysis-ik-7.17.7.zip -d ~/elasticsearch/plugins/ik/<br></code></pre></td></tr></table></figure></li><li><p>给 ik 目录授权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod o+xrw -R ~/elasticsearch/plugins/ik/<br></code></pre></td></tr></table></figure></li><li><p>指定 ik 目录的所属用户</p><p>前面我们已经给插件目录设置所属用户了，由于 ik 目录是后创建的，所以需要重新设置一次。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chown 1000 -R ~/elasticsearch/plugins/ik/<br></code></pre></td></tr></table></figure></li><li><p>重新启动 Elasticsearch 集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose -f ~/elasticsearch/elasticsearch-compose.yml restart<br></code></pre></td></tr></table></figure><p>重启后，可以使用<code>watch docker ps</code>监控一段时间，如果一切正常说明重启成功。</p></li><li><p>检查分词器是否生效</p><p>选择任意一个 Elasticsearch 节点容器进入。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it &lt;容器ID&gt; /bin/bash<br></code></pre></td></tr></table></figure><p>成功进入容器后，使用<code>elasticsearch-plugin</code>命令查看当前的插件列表。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">elasticsearch-plugin list<br></code></pre></td></tr></table></figure><p>命令执行结果如下：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs console">-- console log --<br>ik<br></code></pre></td></tr></table></figure><p>到这里可以看到，已经安装了一个 ik 插件。</p></li></ul><h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4><p>我们可以使用 Elasticsearch de <code>_analyze</code>命令来分析一段话，来测试中文分词的具体效果。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http">GET _analyze<br>&#123;<br>  &quot;analyzer&quot;: &quot;ik_smart&quot;,<br>  &quot;text&quot;: &quot;高性能的全文搜索引擎。&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>命令执行结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;高性能&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;的&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_CHAR&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;全文&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;搜索引擎&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>从执行结果可以看到，关键词被分成了一个完整的词，而不是一个字一个词。</p><p>如果使用默认的<code>standard</code>分词器，会看到中文被分成了一个字一个词。</p>]]></content>
    
    
    <categories>
      
      <category>Elasticsearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Elasticsearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何搭建 Jenkins 环境</title>
    <link href="/2023/04/20/%E6%90%AD%E5%BB%BAJenkins%E7%8E%AF%E5%A2%83/"/>
    <url>/2023/04/20/%E6%90%AD%E5%BB%BAJenkins%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304201555417.jpeg" alt="Jenkins"></p><h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><blockquote><p>特别说明：在正式开始配置 Jenkins 之前，最好是将插件列表中的相关插件都安装上。这一步比较坑，我在配置的过程中因为缺少插件走了不少弯路。</p></blockquote><h3 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求"></a>硬件要求</h3><table><thead><tr><th>硬件</th><th>最低配置</th><th>推荐配置</th></tr></thead><tbody><tr><td>CPU</td><td>2 核</td><td>4 核</td></tr><tr><td>内存</td><td>4G</td><td>8G</td></tr><tr><td>硬盘</td><td>20G</td><td>50G</td></tr></tbody></table><h3 id="软件要求"><a href="#软件要求" class="headerlink" title="软件要求"></a>软件要求</h3><table><thead><tr><th>软件</th><th>版本</th></tr></thead><tbody><tr><td>JDK</td><td>Open JDK 1.8 最新版</td></tr><tr><td>Maven</td><td>3.8.1</td></tr><tr><td>Docker</td><td>23.0.1</td></tr><tr><td>Git</td><td>最新版</td></tr><tr><td>Jenkins</td><td>2.346.1（几乎是最后一个支持 Java8 的版本）</td></tr></tbody></table><h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><h3 id="修改-YUM-源"><a href="#修改-YUM-源" class="headerlink" title="修改 YUM 源"></a>修改 YUM 源</h3><ul><li><p>移除当前的 yum 源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -rfv /etc/yum.repos.d/*<br></code></pre></td></tr></table></figure></li><li><p>拉取阿里云的 yum 源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<br></code></pre></td></tr></table></figure></li><li><p>更新软件列表和系统内核</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y update<br></code></pre></td></tr></table></figure></li><li><p>安装 yum 工具包及其他必备工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y yum-utils wget net-tools git<br></code></pre></td></tr></table></figure></li><li><p>配置 Docker 的 yum 源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure></li></ul><h3 id="操作系统配置"><a href="#操作系统配置" class="headerlink" title="操作系统配置"></a>操作系统配置</h3><ul><li><p>关闭 SELinux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">临时禁用SELinux（不管是永久关闭还是临时关闭，此命令都最好执行一下）</span><br>setenforce 0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">永久关闭SELinux（重启后将不会再开启）</span><br>sed -i &quot;s/SELINUX=permissive/SELINUX=disabled/&quot; /etc/sysconfig/selinux<br>sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config<br></code></pre></td></tr></table></figure></li><li><p>关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">临时禁用防火墙</span><br>systemctl stop firewalld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">永久禁用防火墙</span><br>systemctl disable firewalld<br></code></pre></td></tr></table></figure></li></ul><h2 id="安装和配置-JDK"><a href="#安装和配置-JDK" class="headerlink" title="安装和配置 JDK"></a>安装和配置 JDK</h2><ul><li><p>安装 JDK</p><p><strong><em>注意：这里又个巨坑，安装 JDK，注意只有带 *-devel 的才是完整的 JDK。否则安装的只是 JRE</em></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y java-1.8.0-openjdk-devel<br></code></pre></td></tr></table></figure></li><li><p>配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/profile<br></code></pre></td></tr></table></figure><p>在配置文件的最下方添加如下配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># SET JDK ENVIRONMENT</span><br><span class="hljs-built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk<br><span class="hljs-built_in">export</span> JRE_HOME=<span class="hljs-variable">$JAVA_HOME</span>/jre<br><span class="hljs-built_in">export</span> CLASSPATH=<span class="hljs-variable">$JAVA_HOME</span>/lib:<span class="hljs-variable">$JRE_HOME</span>/lib:<span class="hljs-variable">$CLASSPATH</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$JRE_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure></li><li><p>重载配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile<br></code></pre></td></tr></table></figure></li><li><p>查看是否生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">javac<br></code></pre></td></tr></table></figure><p>这里使用 javac 的目的是只有安装 JDK 才能使用<code>javac</code>命令，只安装 JRE 是不能使用这个命令的。以此检验系统是否安装好了 JDK。</p></li></ul><h2 id="安装和配置-Docker"><a href="#安装和配置-Docker" class="headerlink" title="安装和配置 Docker"></a>安装和配置 Docker</h2><blockquote><p>使用 Docker 是因为，我们通常需要将项目打包成 Docker 镜像，所以需要先安装 Docker。本次安装的 Docker 是社区版。</p></blockquote><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><ul><li><p>安装 Docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y docker-ce-23.0.1-1.el7 docker-ce-cli-23.0.1-1.el7 containerd.io-6.18-3.1.el7<br></code></pre></td></tr></table></figure></li><li><p>修改 Docker 配置</p><p>Docker 默认是通过 cgroup 来管理容器的，默认驱动为 cgroupfs，而 Kubernetes 使用的是 systemd ，因此我们需要将驱动改为 systemd。并且使用国内加速源来下载镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/docker/daemon.json<br></code></pre></td></tr></table></figure><p>输入以下内容，其中包含驱动的修改及镜像源的配置</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>:[<span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>启动 Docker 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动 Docker</span><br>systemctl start docker<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置 Docker 开机自启动</span><br>systemctl enable docker<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果之前已经启动过 docker，那么修改配置之后，可以执行下面两个命令。</span><br>systemctl daemon-reload<br>systemctl restart docker<br></code></pre></td></tr></table></figure></li><li><p>查看 Docker 状态和版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">通过 systemctl status 命令查看是否运行成功</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果返回有：Active: active (running) since 五 2020-12-04 02:36:23 CST; 16s ago信息说明启动成功。</span><br>systemctl status docker<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">我们也可以通过 docker version 命令来查看版本信息，看看是否存在问题。</span><br>docker version<br></code></pre></td></tr></table></figure></li></ul><h3 id="开启-2376-端口"><a href="#开启-2376-端口" class="headerlink" title="开启 2376 端口"></a>开启 2376 端口</h3><blockquote><p>Docker 开启 2376 端口的目的是为了让 Jenkins 能使用 Docker 进行打包。</p><p><strong>注意：</strong>老版本使用的是 2375 端口，而新版本使用的是 2376。</p></blockquote><ul><li><p>编辑 docker.service 配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /usr/lib/systemd/system/docker.service<br></code></pre></td></tr></table></figure><p>找到<code>[Service]</code>节点下的<code>ExecStart</code>配置，修改成下面这个样子。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Service]</span><br><span class="hljs-attr">ExecStart</span>=/usr/bin/dockerd -H tcp://<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">2376</span> -H fd:// --containerd=/run/containerd/containerd.sock<br></code></pre></td></tr></table></figure><p>实际上我们只是在原有的配置上增加了<code>-H tcp://0.0.0.0:2376</code>。</p></li><li><p>重启 Docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">重新加载配置</span><br>systemctl daemon-reload<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重新启动</span><br>systemctl restart docker<br></code></pre></td></tr></table></figure></li><li><p>查看端口是否开放成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用此命令需要安装 net-tools，前面的章节我们已经安装过了。</span><br>netstat -tuln | grep 2375<br></code></pre></td></tr></table></figure><p>命令执行结果如下：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">-- console log --<br>tcp6       <span class="hljs-number">0</span>      <span class="hljs-number">0</span> ::<span class="hljs-symbol">:</span><span class="hljs-number">2375</span>                 ::<span class="hljs-symbol">:*</span>                    <span class="hljs-title class_">LISTEN</span><br></code></pre></td></tr></table></figure><p>如果打印了这条日志信息，说明开启成功。</p></li></ul><h2 id="安装-Jenkins"><a href="#安装-Jenkins" class="headerlink" title="安装 Jenkins"></a>安装 Jenkins</h2><h3 id="安装前准备-1"><a href="#安装前准备-1" class="headerlink" title="安装前准备"></a>安装前准备</h3><ul><li><p>导入 Jenkins 的 GPG 密钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key<br></code></pre></td></tr></table></figure></li><li><p>添加 Jenkins 的软件库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo<br></code></pre></td></tr></table></figure></li><li><p>更新 yum 缓存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum update<br></code></pre></td></tr></table></figure></li></ul><h3 id="开始安装-Jenkins"><a href="#开始安装-Jenkins" class="headerlink" title="开始安装 Jenkins"></a>开始安装 Jenkins</h3><ul><li><p>安装 Jenkins</p><p>这一步的下载过程有点慢，请耐心等待。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y jenkins-2.346.1<br></code></pre></td></tr></table></figure></li><li><p>修改 Jenkins 默认配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/sysconfig/jenkins<br></code></pre></td></tr></table></figure><p>主要修改下面两部分内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">JENKINS_USER=&quot;admin&quot;<br>JENKINS_PORT=&quot;8080&quot;<br></code></pre></td></tr></table></figure><ul><li><code>JENKINS_USER</code>：配置 Jenkins 的登录用户名。</li><li><code>JENKINS_PORT</code>：配置 Jenkins 的访问端口号。</li></ul></li><li><p>启动 Jenkins 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动 Jenkins</span><br>systemctl start jenkins<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置 Jenkins 开机自启动</span><br>systemctl enable jenkins<br></code></pre></td></tr></table></figure></li><li><p>获取 Jenkins 的初始化密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /var/lib/jenkins/secrets/initialAdminPassword<br></code></pre></td></tr></table></figure></li><li><p>访问测试</p><p>打开浏览器输入：http:&#x2F;&#x2F;<ip>:8080，会打开一个页面，页面中也会提示去哪里获取初始化密码，输入初始化密码之后点击解锁。解锁成功后，会提示一个插件安装的页面。这里选择<code>选择插件</code>，然后进入另一个页面选<code>无</code>，也就是不安装插件。后面我们配置好国内镜像源之后，再安装所需要的插件。后面的步骤根据提示一步步操作直到完成。</ip></p></li></ul><h2 id="Jenkins-基本配置"><a href="#Jenkins-基本配置" class="headerlink" title="Jenkins 基本配置"></a>Jenkins 基本配置</h2><h3 id="配置插件的更新站点"><a href="#配置插件的更新站点" class="headerlink" title="配置插件的更新站点"></a>配置插件的更新站点</h3><p>进入到<code>Dashboard/Manage Jenkins</code>，找到<code>Manage Plugin</code>点击进入。选择<code>Advanced</code>选项卡，滑动到最下面有一个<code>Update Site</code>。把它改成下面的这个地址：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//mi</span>rrors4.tuna.tsinghua.edu.cn<span class="hljs-regexp">/jenkins/u</span>pdates<span class="hljs-regexp">/dynamic-stable-2.346.1/u</span>pdate-center.json<br></code></pre></td></tr></table></figure><p>修改完成后，记得要点击<code>submit</code>按钮提交。提交后重启 jenkins。如果不想到服务器去重启，也可以通过浏览器的 URL 重启。比如：在浏览器 URL 地址的端口号后面改为&#x2F;restart（如：http:&#x2F;&#x2F;&lt;IP 地址&gt;:8080&#x2F;restart）</p><p><strong><em>注意：上面提供的地址中，细看会发现有一个版本号，这个版本号实际上是和 Jenkins 的版本号保持一致的。这样做的目的是防止某些插件更新后误装导致 Jenkins 无法工作。</em></strong></p><h2 id="安装和配置-Maven"><a href="#安装和配置-Maven" class="headerlink" title="安装和配置 Maven"></a>安装和配置 Maven</h2><blockquote><p>因为我们打包时需要使⽤ Maven 来构建和编译代码，因此我们需要安装 Maven。</p><p><strong>注意</strong>：Maven 版本的选择最好跟开发环境一致，也就是开发团队统一使用是哪个版本的 Maven，就最好安装哪个版本。否则可能会出现各种意想不到的问题。</p><p>本次我使用的是 Maven3.8.1，如果你安装的是最新版，则直接去官方网站下载即可。如果是历史版本，可以在这里去找。</p><p><a href="https://archive.apache.org/dist/maven/maven-3/">https://archive.apache.org/dist/maven/maven-3/</a></p></blockquote><h3 id="安装-Maven"><a href="#安装-Maven" class="headerlink" title="安装 Maven"></a>安装 Maven</h3><blockquote><p>本次我们将 Maven 安装在<code>/opt</code>目录下。</p></blockquote><ul><li><p>下载 Maven 二进制包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入 opt 目录</span><br>cd /opt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载软件包</span><br>wget https://archive.apache.org/dist/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>解压包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar zxvf apache-maven-3.8.1-bin.tar.gz<br></code></pre></td></tr></table></figure><p>解压后会在目录下多一个<code>apache-maven-3.8.1</code>目录。这里就是我们解压好的 Maven 软件。</p></li><li><p>配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/profile<br></code></pre></td></tr></table></figure><p>前面我们已经配置过 JDK 的环境变量了，在它的下方我们继续添加 Maven 的环境变量。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># SET MAVEN ENVIRONMENT</span><br>MAVEN_HOME=/opt/apache-maven-3.8.1<br><span class="hljs-built_in">export</span> MAVEN_HOME<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$MAVEN_HOME</span>/bin<br></code></pre></td></tr></table></figure><p>配置完成后，重载配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile<br></code></pre></td></tr></table></figure></li><li><p>检查 Maven 是否配置成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn --version<br></code></pre></td></tr></table></figure><p>命令执行结果如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle">-- console log --<br>Apache Maven <span class="hljs-number">3.8</span>.<span class="hljs-number">1</span> (<span class="hljs-number">9</span>b58d2bad23a66be161c4664ef21ce219c2c8584)<br>Maven home: <span class="hljs-regexp">/opt/</span>apache-maven-<span class="hljs-number">3.8</span>.<span class="hljs-number">1</span><br>Java version: <span class="hljs-number">1.8</span>.<span class="hljs-number">0</span>_362, vendor: Red Hat, Inc., <span class="hljs-keyword">runtime</span>: <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/jvm/</span>java-<span class="hljs-number">1.8</span>.<span class="hljs-number">0</span>-openjdk-<span class="hljs-number">1.8</span>.<span class="hljs-number">0.362</span>.b08-<span class="hljs-number">1</span>.el7_9.x86_64/jre<br><span class="hljs-keyword">Default</span> locale: en_US, platform encoding: UTF-<span class="hljs-number">8</span><br>OS name: <span class="hljs-string">&quot;linux&quot;</span>, version: <span class="hljs-string">&quot;3.10.0-862.el7.x86_64&quot;</span>, arch: <span class="hljs-string">&quot;amd64&quot;</span>, family: <span class="hljs-string">&quot;unix&quot;</span><br></code></pre></td></tr></table></figure><p>至此 Maven 环境就安装成功了，下一章节开始配置 Maven 的 <code>settings.xml</code>。</p></li></ul><h3 id="配置-Maven"><a href="#配置-Maven" class="headerlink" title="配置 Maven"></a>配置 Maven</h3><ul><li><p>新建一个目录作为 Maven 本地仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">新建目录</span><br>mkdir -p /opt/maven_repository &amp;&amp; cd /opt &amp;&amp; ls<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">给目录授权，这一步一定要做，否则无法下载依赖。</span><br>chmod -R o+r+w maven_repository<br>chmod o+x+w maven_repository<br></code></pre></td></tr></table></figure></li><li><p>修改<code>settings.xml</code>配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入配置目录</span><br>cd /opt/apache-maven-3.8.1/conf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">打开配置文件</span><br>vi settings.xml<br></code></pre></td></tr></table></figure><p>这里我们主要修改这几个配置</p><ul><li>localRepository：本地仓库路径（就是我们第一步创建的那个目录的全路径）</li><li>mirrors：在这里配置阿里云的 Maven 镜像仓库。因为官方仓库下载资源比较慢。需要注意的是阿里云的镜像仓库地址一定要用 http，不要使用 https 否则会有证书的问题，倒是无法访问。</li></ul><p>我这里去除掉一些无用的注释之后，完整的配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.2.0&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- localRepository --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>/opt/maven_repository<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- pluginGroups --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">pluginGroups</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">pluginGroups</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- proxies --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">proxies</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">proxies</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- servers --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servers</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servers</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- mirrors --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;mirror&gt;</span><br><span class="hljs-comment">      &lt;id&gt;maven-default-http-blocker&lt;/id&gt;</span><br><span class="hljs-comment">      &lt;mirrorOf&gt;external:http:*&lt;/mirrorOf&gt;</span><br><span class="hljs-comment">      &lt;name&gt;Pseudo repository to mirror external repositories initially using HTTP.&lt;/name&gt;</span><br><span class="hljs-comment">      &lt;url&gt;http://0.0.0.0/&lt;/url&gt;</span><br><span class="hljs-comment">      &lt;blocked&gt;true&lt;/blocked&gt;</span><br><span class="hljs-comment">    &lt;/mirror&gt; --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- profiles --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- activeProfiles --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：默认配置中包含了一个官方仓库的镜像，可以将其删除或注释掉。</p><p>如果直接在服务器上操作觉得麻烦，可以先将配置文件备份一份。然后将文件下载到自己的电脑上编辑完之后，再上传到服务器覆盖掉之前的文件。</p></li></ul><h2 id="Jenkins-全局配置"><a href="#Jenkins-全局配置" class="headerlink" title="Jenkins 全局配置"></a>Jenkins 全局配置</h2><h3 id="配置全局环境变量"><a href="#配置全局环境变量" class="headerlink" title="配置全局环境变量"></a>配置全局环境变量</h3><p>进入<code>Dashboard/系统管理/系统配置</code>。找到<code>全局属性</code>配置项，勾选环境变量，在这里添加三个环境变量。</p><table><thead><tr><th>键</th><th>值</th></tr></thead><tbody><tr><td>JAVA_HOME</td><td>&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-1.8.0-openjdk</td></tr><tr><td>MAVEN_HOME</td><td>&#x2F;opt&#x2F;apache-maven-3.8.1</td></tr><tr><td>PATH+EXTRA</td><td>$MAVEN_HOME&#x2F;bin</td></tr></tbody></table><p>配置这三个环境变量的⽤途，和在系统中配置环境变量的⽤途类似，系统中配置环境变量是为了让系统识别到相关软件， Jenkins 中配置这三个环境变量，是为了让 Jenkins 识别到 JDK 和 Maven。</p><h3 id="配置全局工具"><a href="#配置全局工具" class="headerlink" title="配置全局工具"></a>配置全局工具</h3><blockquote><p>这里主要配置的是 JDK、Git、Maven 三个工具。因为 Jenkins 打包需要用到这些软件中的某些工具。这有点儿类似我们在 IDEA 中配置这些工具一样。</p><p>其中 Git 再安装完插件之后，会自动产生一个面板，JDK、Maven 需要点一下新增按钮。</p></blockquote><ul><li><p>JDK 配置</p><table><thead><tr><th>配置项</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>JDK 别名</td><td>java-1.8.0-openjdk</td><td>只是一个配置的别名，可以随便定义。</td></tr><tr><td>JAVA_HOME</td><td>&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-1.8.0-openjdk</td><td>这里配置我们前面安装的 JDK 路径。</td></tr><tr><td>自动安装</td><td>取消勾选</td><td>这里提供了一个自动安装 JDK 的方法。建议自己装，不要使用自动。</td></tr></tbody></table></li><li><p>Git 配置</p><table><thead><tr><th>配置项</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>Name</td><td>Git</td><td>只是一个配置的别名，可以随便定义。</td></tr><tr><td>Path to Git executable</td><td>&#x2F;usr&#x2F;bin&#x2F;git</td><td>Git 应用程序路径，Linux 可以使用<code>whereis git</code>命令查看。</td></tr><tr><td>自动安装</td><td>取消勾选</td><td>建议自己装，不要使用自动。</td></tr></tbody></table></li><li><p>Maven 配置</p><table><thead><tr><th>配置项</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>Name</td><td>apache-maven-3.8.1</td><td>只是一个配置的别名，可以随便定义。</td></tr><tr><td>MAVEN_HOME</td><td>&#x2F;opt&#x2F;apache-maven-3.8.1</td><td>这里配置我们前面安装的 Maven 路径。</td></tr><tr><td>自动安装</td><td>取消勾选</td><td>建议自己装，不要使用自动。</td></tr></tbody></table></li></ul><h3 id="配置-Docker-宿主机"><a href="#配置-Docker-宿主机" class="headerlink" title="配置 Docker 宿主机"></a>配置 Docker 宿主机</h3><blockquote><p>这里需要先安装<code>docker 和 CloudBees Docker Build and Publish</code>插件。</p></blockquote><p>进入<code>Dashboard/系统管理/节点管理/Configure Clouds(有的显示配置集群)</code>。如果找不到可以使用 URL 进入，比如：<a href="http://127.0.0.1:8080/configureClouds/%E3%80%82">http://127.0.0.1:8080/configureClouds/。</a></p><p>界面中有一个<code>Add a new cloud</code>的下拉框，点开之后选择<code>Docker</code>。这时会出现一个配置面板，给配置起一个名字，然后点击<code>Docker Cloud Details...</code>按钮。此时会发现增加了很多配置项，我们主要配置的是下面几项。</p><table><thead><tr><th>配置项</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>Docker Host URI</td><td>tcp:&#x2F;&#x2F;&lt;Docker 宿主机 IP 地址&gt;:2376</td><td>配置用于打包的 Docker 服务器。</td></tr><tr><td>Enabled</td><td>勾选</td><td>开启云打包</td></tr><tr><td>Server credentials</td><td>无</td><td>Docker 服务器登录凭证，没有可以不填。</td></tr></tbody></table><p>另外，面板中还有一个<code>Test Connection</code>按钮，可以通过此按钮查看 Jenkins 是否可以连接到 Docker 宿主机。</p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><blockquote><p>这里给出一些我在实际使用过程中用到的一些插件。安装过程可能会因为网络的原因导致安装失败。</p><p><strong>建议：</strong>插件的安装最好是去官方仓库手动下载，然后上传到 Jenkins 中。</p><p>官方仓库地址：<a href="https://plugins.jenkins.io/">https://plugins.jenkins.io/</a></p></blockquote><p>安装方法也很简单，和上一步一样，找到 <code>Manage Plugin</code>，这次选择的是<code>Available</code>，然后在搜索框中搜索自己想要安装的插件，勾选中之后，点击<code>Install without restart</code>。如果安装过简体中文语言包就比较简单了。可以根据中文提示安装。</p><table><thead><tr><th>插件名称</th><th>版本号</th><th>说明</th></tr></thead><tbody><tr><td>Localization: Chinese (Simplified)</td><td>1.0.24</td><td>Jenkins 的简体中文语言包</td></tr><tr><td>Maven Integration</td><td>3.21</td><td>Maven 支持插件</td></tr><tr><td>Pipeline: SCM Step</td><td>400.xxxxx</td><td>流水线版本控制器</td></tr><tr><td>Git</td><td>4.12.1</td><td>Git 支持插件，安装前需要先安装 Pipeline: SCM Step</td></tr><tr><td>Git Parameter</td><td>0.9.18</td><td>Git 构建参数支持，此插件可以在构建过程动态选择分支。</td></tr><tr><td>Docker</td><td>1.3.0</td><td>Docker 支持插件</td></tr><tr><td>CloudBees Docker Build and Publish</td><td>1.4.0</td><td>自动化构建和推送 Docker 镜像，支持各种不同的 Dockerfile 定义方式，在 Jenkins 中直接预览构建日志，可以对镜像进行验证和扫描，并将镜像推送到 Docker Hub 或另一个私有 Registry 中。</td></tr><tr><td>Docker Pipeline</td><td>563.xxxxxxx</td><td>支持 Jenkins Pipeline 执行所有 Docker 操作</td></tr></tbody></table><h2 id="使用-Jenkins-打包"><a href="#使用-Jenkins-打包" class="headerlink" title="使用 Jenkins 打包"></a>使用 Jenkins 打包</h2><blockquote><p>我这里使用的是自建的 Harbor 仓库。如果你使用的是阿里云仓库，也和这类似。只是配置的账号不同而已。</p></blockquote><h3 id="创建凭证"><a href="#创建凭证" class="headerlink" title="创建凭证"></a>创建凭证</h3><blockquote><p>这里只需要创建一次，以后打包直接使用即可。</p></blockquote><p>进入<code>Dashboard/系统管理/Manage Credentials</code>，在<code>Stores scoped to Jenkins</code>面板中点击<code>域</code>列下的<code>全局</code>，此时会进入到一个凭据的配置页面。点击添加凭据，会显示一个新凭据的面板。</p><p>凭据支持的类型很多，最长用的是<code>Username with password</code>，即用户名和密码的凭据。</p><p>我们依次添加 Harbor 仓库账户和 Git 仓库账户。注意填写描述，否则将来无法区分是哪个账户。</p><h3 id="新建打包任务"><a href="#新建打包任务" class="headerlink" title="新建打包任务"></a>新建打包任务</h3><p>进入<code>Dashboard/新建任务</code>，输入任务名称，这个名称可以自定义只要便于区分即可。我的习惯是以工程名来命名后面跟着发布环境的后缀。比如：mall-manage-service-test，即商城系统的管理服务，环境是测试环境。输入完名称后，选择<code>构建一个maven项目</code>，点击确定按钮。</p><p>接下来会进入到具体的配置界面，这里我们分面板来介绍配置细节。</p><h4 id="基础配置（General）"><a href="#基础配置（General）" class="headerlink" title="基础配置（General）"></a>基础配置（General）</h4><ul><li><p>丢弃旧的构建：此处配置的是构建记录的保留策略。</p><table><thead><tr><th>参数项</th><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>保持构建的天数</td><td>3</td><td>无</td></tr><tr><td>保持构建的最大个数</td><td>3</td><td>无</td></tr></tbody></table></li><li><p>参数化构建过程：这里主要配置构建过程所需要的参数。本次我们添加一个 Git 参数。使用 Git 参数需要提前安装好插件。</p><table><thead><tr><th>参数项</th><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>名称</td><td>BRANCH</td><td>参数的名称</td></tr><tr><td>描述</td><td>Git 分支</td><td>参数的说明</td></tr><tr><td>参数类型</td><td>分支</td><td>参数的类型</td></tr><tr><td>默认值</td><td>origin&#x2F;master</td><td>Git 仓库的默认分支</td></tr></tbody></table></li></ul><p>除了上面几个需要配置的以外，其他的选项都取消勾选。</p><h4 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h4><ul><li><p>Git</p><p><code>Repositories</code>：仓库配置</p><table><thead><tr><th>参数项</th><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>Repository URL</td><td>http:&#x2F;&#x2F;[IP 或域名]&#x2F;项目组&#x2F;项目名.git</td><td>代码在 Git 仓库的地址。</td></tr><tr><td>Credentials</td><td>选择前面配置好的 Git 凭据。</td><td>Git 仓库的登录凭证。</td></tr></tbody></table><p><code>Branches to build</code>：分支构建参数</p><table><thead><tr><th>参数项</th><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>指定分支（为空时代表 any）</td><td>$BRANCH</td><td>分支参数，使用上一步配置的分支参数，格式：$参数名称。</td></tr></tbody></table></li></ul><h4 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a>构建触发器</h4><p>取消<code>Build whenever a SNAPSHOT dependency is built</code>勾选。</p><h4 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h4><p>无需配置</p><h4 id="Pre-Steps"><a href="#Pre-Steps" class="headerlink" title="Pre Steps"></a>Pre Steps</h4><p>无需配置（这里主要配置 Maven 打包之前的操作）</p><h4 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h4><p>此处配置的是 Maven 构建配置</p><table><thead><tr><th>参数项</th><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>Root POM</td><td>pom.xml</td><td>指定 POM 文件所在的路径。</td></tr><tr><td>Goals and options</td><td>clean package</td><td>全局操作，这里配置的是 Maven 的打包命令。无需使用 mvn。</td></tr></tbody></table><h4 id="Post-Steps"><a href="#Post-Steps" class="headerlink" title="Post Steps"></a>Post Steps</h4><p>这里主要配置 Maven 打包之后的操作。</p><p>选择<code>Run only if build succeeds</code>，即：只有在构建成功后才执行此步骤。点击下方的<code>Add post-build step</code>下拉框，</p><p>选择<code>Build / Publish Docker Image</code>，添加一个构建 Docker 镜像的面板。</p><table><thead><tr><th>参数项</th><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>Directory for Dockerfile</td><td>无</td><td>Dockerfile 文件路径，不写则从根目录找。</td></tr><tr><td>Cloud</td><td>选择前面配置好的 Docker 宿主机</td><td>用于云打包的 Docker 宿主机。</td></tr><tr><td>image</td><td>镜像仓库地址&#x2F;镜像名:${POM_VERSION}</td><td>镜像全名，${POM_VERSION}是读取 POM 的版本号。</td></tr><tr><td>Build Args</td><td>无</td><td>构建参数</td></tr><tr><td>Push image</td><td>勾选</td><td>启用推送镜像配置</td></tr><tr><td>Registry Credentials</td><td>选择前面配置好的镜像仓库凭证</td><td>Docker 镜像仓库的登录凭证。</td></tr><tr><td>Clean local images</td><td>勾选</td><td>打包完成后清除本地镜像。</td></tr><tr><td>Attempt to remove images when jenkins deletes the run</td><td>勾选</td><td>打包完成后尽可能清除已运行的 Docker 镜像。</td></tr></tbody></table><p>其他选项无需勾选。至此，所有配置结束。点击<code>保存</code>按钮完成打包配置。</p><h3 id="开始打包"><a href="#开始打包" class="headerlink" title="开始打包"></a>开始打包</h3><ul><li>找到我们配置好的打包配置，点击进入。</li><li>点击<code>Build with Parameters</code>，进入参数化构建面板。</li><li>选择分支，即我们基于哪一个分支进行打包。</li><li>点击<code>开始构建</code>，等待 1 ～ 2 秒会在左侧的构建历史中看到正在打包的进度，点击进度条可以进入到打包日志页面。注意观察每一步输出的打包日志，没有报错，直到最后镜像成功推送到镜像仓库。这样就完成了整个的打包过程。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>整个 Jenkins 安装配置过程，有这么几个地方是容易出问题的。</p><ul><li>各个必须的组件，如 Maven、JDK 的版本兼容问题。</li><li>插件的安装和插件支持的版本问题。</li><li>Maven 的 settings.xml 配置问题。</li><li>宿主机端口开启，及宿主机配置问题。</li><li>Jenkins 集成打包环境问题，如：Maven、JDK、Git。</li></ul><p><strong>注意：</strong>上面提到的这些，任何一个环节配置不好都有可能导致最后无法成功打包。因此整个 Jenkins 的安装、配置过程最好是仔细阅读文档。避免细节问题没注意，导致无法成功打包。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>DevOps</tag>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Hexo + Fluid 搭建个人博客</title>
    <link href="/2023/04/20/%E4%BD%BF%E7%94%A8Hexo-Fluid%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/04/20/%E4%BD%BF%E7%94%A8Hexo-Fluid%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建篇"><a href="#搭建篇" class="headerlink" title="搭建篇"></a>搭建篇</h1><h2 id="瞎白话"><a href="#瞎白话" class="headerlink" title="瞎白话"></a>瞎白话</h2><blockquote><p>每个程序员都应该有一个属于自己的博客，一方面可以提升自己的知名度，另一方面可以锻炼自己的写作能力。对于程序员来说，能做、能写、能讲是非常重要的。我在搭建自己的个人博客时，遇到了很多的坑，写这篇文章是为了记录下我搭建博客的过程。一方面是记录一下防止以后遗忘，另一方面也希望通过这篇文章帮助更多想要搭建博客的同学少走弯路。</p><p>废话不多说，下面开始上才艺。</p></blockquote><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>这里需要说明 Hexo 的几点好处：</p><ol><li>搭建简单而且免费。</li><li>Hexo 可以将 Markdown 生成纯静态网页，我们只需要按照规则写 Markdown 文档，它能帮助我们生成网站的页面。纯静态网站的好处是可以零成本（付费方面）部署。</li><li>配置简单且配置文件有中文注释，官方还提供中文文档。有些复杂的配置是因为要对 Hexo 二次开发或使用某些主题比较复杂，如果没有这些诉求，整个搭建过程是非常简单的。</li></ol><p>最后提供一个官方文档的地址</p><p>官方中文文档：<a href="https://hexo.io/zh-cn/docs/index.html">https://hexo.io/zh-cn/docs/index.html</a></p></blockquote><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>Hexo 安装之前需要一些环境的支持。下面我用列表给大家整理出来了。</p><table><thead><tr><th>软件名</th><th>用途</th></tr></thead><tbody><tr><td>Node.js</td><td>Hexo 是基于 Node.js 开发的，因此需要安装 Node.js 环境。官方说 Node.js 版本需不低于 10.13，我建议使用 Node.js 12.0 及以上版本或安装最新的。</td></tr><tr><td>Git</td><td>Git 是一个分布式的版本控制软件，Hexo 会使用 Git 从 GitHub 上下载一些资源。</td></tr><tr><td>Yarn</td><td>（可选）Yarn 是一个 Node.js 的包管理器，我本人比较习惯使用 Yarn。</td></tr></tbody></table><p>这里就不介绍 Node.js 和 Git 的安装了，如果这两个都不会使用，建议还是先学习一下再来阅读本文。另外，后面的安装过程我会提供 npm 和 yarn 两种命令的安装方式，自己按需选择就好。</p><h3 id="安装-Hexo-客户端"><a href="#安装-Hexo-客户端" class="headerlink" title="安装 Hexo 客户端"></a>安装 Hexo 客户端</h3><p>基本环境安装完成后，就可以使用 npm 安装 Hexo 了。</p><p>NPM 安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>Yarn 安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yarn install -g hexo-cli<br></code></pre></td></tr></table></figure><p><strong><em>注意：由于网络环境的问题，中国大陆访问官方仓库比较慢，想要提速就需要科学上网。因此，我们需要将 npm 或 yarn 的镜像源改成国内镜像源。修改方法可以自己去查询相关资料。</em></strong></p><p>Hexo 客户端的安装非常简单，一行命令就搞定了。</p><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><blockquote><p>注意：如果你给全局的<code>node_modules</code>目录设置过环境变量，那么可以直接使用<code>hexo</code>命令，否则可以在命令前面加上<code>npx</code>。最好的办法就是在命令终端输入<code>hexo</code>，看看能不能找到命令，如果不行就使用<code>npx hexo</code>。</p></blockquote><ol><li><p>新建博客项目的目录</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p &lt;目录名&gt;<br></code></pre></td></tr></table></figure><p> <code>-p</code> 的作用是如果没有则新建一个目录，比如我们创建目录的命令是<code>mkdir -p ~/blog/github</code>，如果<code>blog</code>目录不存在，则会新建。</p><p> 如果你使用的是 Windows 系统，可以手动创建目录，也可以使用 <code>Git Bash</code> 命令窗口。<code>Git Bash</code>命令窗口中可以使用 Linux 命令。</p></li><li><p>使用 hexo 初始化项目</p><p> 我这里创建了一个<code>hexo-demo</code>作为项目目录。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入目录</span><br>cd hexo-demo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化项目</span><br>hexo init<br></code></pre></td></tr></table></figure><p> 初始化时会提示以下信息</p> <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- console log --</span><br><span class="hljs-keyword">INFO</span>  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git<br><span class="hljs-keyword">INFO</span>  Install dependencies<br><span class="hljs-built_in">warning</span> hexo &gt; warehouse &gt; cuid@<span class="hljs-number">2.1</span><span class="hljs-number">.8</span>: Cuid <span class="hljs-keyword">and</span> other k-sortable <span class="hljs-keyword">and</span> non-cryptographic ids (Ulid, ObjectId, KSUID, <span class="hljs-keyword">all</span> UUIDs) are <span class="hljs-keyword">all</span> insecure. Use @paralleldrive/cuid2 <span class="hljs-keyword">instead</span>.<br><span class="hljs-built_in">warning</span> hexo-renderer-stylus &gt; stylus &gt; css &gt; source-map-resolve@<span class="hljs-number">0.6</span><span class="hljs-number">.0</span>: See https://github.com/lydell/source-map-resolve#deprecated<br><span class="hljs-keyword">INFO</span>  <span class="hljs-keyword">Start</span> blogging <span class="hljs-keyword">with</span> Hexo!<br></code></pre></td></tr></table></figure><p> 信息中出现了两个警告，可以不用管他，不影响使用。</p><p> 初始化完成后，我们使用 <code>ls</code> 命令或打开目录查看，会看到下面这些文件：</p><table><thead><tr><th>文件名</th><th>说明</th></tr></thead><tbody><tr><td>_config.landscape.yml</td><td>Hexo 主题配置文件，landscape 是 Hexo 默认主题。</td></tr><tr><td>_config.yml</td><td>Hexo 的主配置文件。</td></tr><tr><td>node_modules</td><td>Hexo 项目的包。</td></tr><tr><td>package.json</td><td>包配置，所有基于 Node.js 的项目都会有这个文件。</td></tr><tr><td>scaffolds</td><td>Hexo 的模版目录，它用于定义创建文件时的模版。</td></tr><tr><td>source</td><td>Hexo 资源目录，资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</td></tr><tr><td>themes</td><td>Hexo 主题目录，我们使用到的一些第三方主题会放到这里。Hexo 会根据主题配置来生成静态页面。</td></tr></tbody></table></li><li><p>启动项目</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo server --debug<br></code></pre></td></tr></table></figure><p> 启动成功后，会在下方看到这样一条日志</p> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">03</span>:<span class="hljs-number">43</span>:<span class="hljs-number">26</span>.<span class="hljs-number">937</span> INFO  Hexo is running at http://localhost:<span class="hljs-number">4000</span>/ . Press Ctrl+C to stop.<br></code></pre></td></tr></table></figure><p> 我们可以使用浏览器访问<code>http://localhost:4000/</code>来查看我们的博客。如图：</p><p> <img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304201146594.png" alt="image-20230420114650486"></p></li></ol><p>至此，我们的博客就搭建成功了。</p><h2 id="Hexo-个性化定制"><a href="#Hexo-个性化定制" class="headerlink" title="Hexo 个性化定制"></a>Hexo 个性化定制</h2><blockquote><p>前面我们成功搭建了一个博客，但这个博客是官方默认的例子。我们想要打造自己的博客，还需要进行一些定制。</p></blockquote><h3 id="基本定制"><a href="#基本定制" class="headerlink" title="基本定制"></a>基本定制</h3><p>我们需要修改博客目录下的<code>_config.yml</code>文件，如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 网站标题</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">技术社区</span><br><span class="hljs-comment"># 副标题</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">好记性不如烂键盘</span><br><span class="hljs-comment"># 网站简介</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">随便写写</span><br><span class="hljs-comment"># SEO 关键词（可选）</span><br><span class="hljs-attr">keywords:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">技术</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Java</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Spring</span><br><span class="hljs-comment"># 网站作者</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">Kiti</span><br><span class="hljs-comment"># 网站语言，zh-CN: 简体中文</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br><span class="hljs-comment"># 时区（可选）</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>以上是部分需要修改的配置。</p><p>配置修改完成后，重启项目刷新页面会看到如下界面：</p><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304201201212.png" alt="image-20230420120103168"></p><p>这个界面中我们可以看到我们刚才修改的配置生效了。这里需要说明，官方默认模版的导航没有被国际化。其实也无所谓，因为官方主题是在太难看了，我们后面会使用一个第三方的主题。</p><h3 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h3><blockquote><p>本次我使用的主题是 Fluid。这纯属我的个人喜好，如果想要使用其他主题，可以去官方文档找。</p><p>官方主题地址：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p>Fluid 官方文档地址：<a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a></p></blockquote><h4 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h4><p>Fluid 安装有两种方式：</p><p><strong>方式一：使用包管理器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">npm</span><br>npm install --save hexo-theme-fluid<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">yarn</span><br>yarn add hexo-theme-fluid<br></code></pre></td></tr></table></figure><p><strong>方式二：下载最新 release</strong></p><p>下载地址：<a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">https://github.com/fluid-dev/hexo-theme-fluid/releases</a></p><p>下载完资源文件后，将资源文件解压到博客目录下的<code>themes</code>目录中，并将解压出的目录重命名为<code>fluid</code>。</p><p>这两种方式更推荐使用<code>方式一</code>，但如果想要对模版进行二次修改和定制，就最好选择方式二。否则将来重新迁出项目代码时，之前的修改就不存在了。如果没有定制化需求，就无所谓了。</p><h4 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h4><p>主题安装完成后，开始进行配置。</p><ol><li><p>复制主题目录下的<code>_config.yml</code>到博客根目录并命令为<code>_config.fluid.yml</code>，注意不要将默认配置覆盖了。如果不放心可以先创建好文件，然后将主题的配置内容复制到新文件中。</p></li><li><p>修改<code>_config.yml</code>主配置文件，以下是要修改的内容：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 修改模版为 fluid</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span><br></code></pre></td></tr></table></figure></li><li><p>创建<code>关于页面</code></p><p> Fluid 需要一个关于页面，这个页面在 Hexo 初始化的时候是没有的，需要手动创建。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用创建命令</span><br>hexo new page about<br></code></pre></td></tr></table></figure><p> 此时，Hexo 会在 source 目录下创建一个 about 目录，其中包含一个 index.md 的 Markdown 文件，这个文件就是我们的关于页面。</p><p> 创建后，修改内容如下：</p> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 标题<br><span class="hljs-section">layout: about</span><br><span class="hljs-section">---</span><br><br>这里写关于页的正文，支持 Markdown, HTML<br></code></pre></td></tr></table></figure></li><li><p>修改主题配置文件<code>_config.fluid.yml</code>，如下：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 页头</span><br><span class="hljs-comment"># Header</span><br><span class="hljs-comment">#---------------------------</span><br><br><span class="hljs-comment"># 导航栏的相关配置</span><br><span class="hljs-comment"># Navigation bar</span><br><span class="hljs-attr">navbar:</span><br>    <span class="hljs-comment"># 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示</span><br>    <span class="hljs-comment"># The title on the left side of the navigation bar. If empty, it is based on `title` in hexo config</span><br>    <span class="hljs-attr">blog_title:</span> <span class="hljs-string">技术社区</span><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 首页</span><br><span class="hljs-comment"># Home Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">index:</span><br>    <span class="hljs-comment"># 首页副标题的独立设置</span><br>    <span class="hljs-comment"># Independent config of home page subtitle</span><br>    <span class="hljs-attr">slogan:</span><br>        <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>        <span class="hljs-comment"># 网站副标题</span><br>        <span class="hljs-attr">text:</span> <span class="hljs-string">好记性不如烂键盘</span><br></code></pre></td></tr></table></figure></li></ol><p>配置完成后重启服务，此时的界面如下：</p><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304201242826.png" alt="image-20230420124242767"></p><p>这样，我们就更换好了主题，是不是漂亮多了。</p><h2 id="开始你的创作"><a href="#开始你的创作" class="headerlink" title="开始你的创作"></a>开始你的创作</h2><blockquote><p>搭建好博客之后，我们就可以愉快的写文章了。</p><p><strong>特别说明</strong></p><p>_Markdown 无需插入图片的请跳过_。</p><p>使用 Markdown 编写文档时，难免会用到一些图片。这些图片本地查看倒是没什么问题，如果放到公网环境就访问不到了。因此最好是将图片上传到某个地方，然后再链接进来。也可以直接使用图床。</p><p>我平时使用的是 Typora 写文档，图床我用的是 PicGo + Git（Gitee 或 GitHub）。这里提一句，Gitee 有防盗链，本地文件可以显示，但博客中无法显示。</p></blockquote><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new 这是我的第一篇文章<br></code></pre></td></tr></table></figure><p>此时会在<code>source/_posts</code>目录下自动创建一个<code>这是我的第一篇文章.md</code>的文档。</p><h3 id="编写内容"><a href="#编写内容" class="headerlink" title="编写内容"></a>编写内容</h3><p>你可以选择任意一款自己喜欢 Markdown 编辑器，编写的内容如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 这是我的第一篇文章 哈哈哈哈<br>date: 2023-04-20 12:46:25<br>tags: 番外篇<br>categories: 番外篇<br><span class="hljs-section">index<span class="hljs-emphasis">_img: https://d33wubrfki0l68.cloudfront.net/5997a40576f3beca7bbbd86fe79a795e9d520d8e/87f88/themes/screenshots/landscape.png</span></span><br><span class="hljs-emphasis"><span class="hljs-section">---</span></span><br><span class="hljs-emphasis"><span class="hljs-section"></span></span><br><span class="hljs-emphasis"><span class="hljs-section">这里是正文，请开始你的表演。</span></span><br></code></pre></td></tr></table></figure><p>文档头部参数说明：</p><ul><li>title：文档标题，会显示在列表中和文档详情页中。</li><li>date：文档创建日期，页面会根据时间降序。</li><li>tags：文档标签，访客可以通过标签来查找同标签文档。</li><li>categories：文档分类，访客可以通过分类来查找同类型文档。</li><li>index_img：首页图片，也就是封面图，它会显示在首页的文档列表中。图片最好是远程图片，否则可能无法加载。</li></ul><p>修改文档是不需要重启服务的，此时我们刷新一下页面就可以看到新内容了。如图：</p><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304201303250.png" alt="image-20230420130318186"></p><h1 id="部署篇"><a href="#部署篇" class="headerlink" title="部署篇"></a>部署篇</h1><h2 id="发布到-GitHub"><a href="#发布到-GitHub" class="headerlink" title="发布到 GitHub"></a>发布到 GitHub</h2><blockquote><p>我们将使用 GitHub Pages 来部署我们的个人博客。至于为什么是 GitHub，我的回答是：“不知道”。如果你非要问，我只能说：“因为大家都这样干”。你品，你细品！</p><p><strong>说明</strong></p><p>如果你无法使用 GitHub，请自行查阅其他部署方法。比如 Gitee。Gitee 的部署方法与此类似。另外，推送站点到 GitHub 需要科学上网。如果没有可以找一找其他的梯子，国内有人专门提供了上传 GitHub 的镜像网站。</p></blockquote><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>没有账户的自己去注册一个，其他就不多说了。登录到 GitHub 找到头像左边的加号图标，点击会弹出一个下拉菜单，选择<code>New repository</code>新建一个仓库。仓库名格式为：<code>&lt;GitHub用户名&gt;.github.io</code>，必须是这个名字，否则无法访问。仓库的访问策略设置成<code>Public</code>。</p><h3 id="创建-SSH-密钥"><a href="#创建-SSH-密钥" class="headerlink" title="创建 SSH 密钥"></a>创建 SSH 密钥</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;&lt;GitHub注册时的邮箱&gt;&quot;<br></code></pre></td></tr></table></figure><p>Windows 可以使用<code>Git Bash</code>工具。生成密钥时会有一些要填写的信息，一路回车就可以了。</p><p>生成好之后，可以使用<code>cat ~/.ssh/id_rsa.pub</code>查看并复制公钥。</p><h3 id="配置密钥到-GitHub"><a href="#配置密钥到-GitHub" class="headerlink" title="配置密钥到 GitHub"></a>配置密钥到 GitHub</h3><p>在 GitHub 页面点击头像，在下拉菜单中选择<code>Settings</code>。然后在左侧的列表中找到<code>SSH and GPG keys</code>，如果换名字了，可以找一下 SSH 相关的选项。进入页面后点击<code>New SSH key</code>按钮来新建一个密钥。如图：</p><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304201403519.png" alt="image-20230420133400602"></p><ul><li>Title：这里填写的是密钥的标题，便于我们区分各种密钥。标题最好用英文。</li><li>Key type：密钥类型，默认就好。</li><li>Key：密钥，此处填写的就是我们在本地生成好的密钥内容（上一步复制的）。</li></ul><p>点击<code>Add SSH key</code>按钮，保存新密钥。</p><h3 id="Hexo-部署配置"><a href="#Hexo-部署配置" class="headerlink" title="Hexo 部署配置"></a>Hexo 部署配置</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><blockquote><p>如果想要使用 Hexo + Git 自动部署，则需要安装<code>hexo-deployer-git</code>插件。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">NPM</span><br>npm install --save hexo-deployer-git<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">yarn</span><br>yarn add hexo-deployer-git<br></code></pre></td></tr></table></figure><h4 id="修改部署配置"><a href="#修改部署配置" class="headerlink" title="修改部署配置"></a>修改部署配置</h4><p>编辑<code>_config.yml</code>主配置文件，主要修改内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br><span class="hljs-comment"># 修改为 Git</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-comment"># 新增，配置内容为 GitHub 的仓库地址</span><br>    <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:&lt;GitHub用户名&gt;/&lt;GitHub用户名&gt;.github.io.git</span><br>    <span class="hljs-comment"># 新增，配置内容为 main，就是 GitHub 的 master 分支</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><h4 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">清除旧的打包</span><br>hexo clean<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">生成新的包</span><br>hexo generate<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">发布到 GitHub</span><br>hexo deploy<br></code></pre></td></tr></table></figure><p>也可以将命令简化写到一行来执行，比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><p>这条命令会先清理，然后打包，最后推送到 GitHub。部署完成后，进入到 GitHub 仓库，会看到推送上去的站点文件。</p><h4 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h4><p>我们在浏览器输入：<code>https://&lt;GitHub用户名&gt;.github.io.git</code>，就会看到我们的博客了。如果访问出现 404，那可能是因为 GitHub 在进行认证和检查。等待一段时间刷新页面就可以了。如果长时间 404，那就需要检查一下，是不是哪里配置不对。或者去网上找一找有没有类似的解决办法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>总体来说，搭建个人博客没有什么技术难度。无非是网络环境的各种不支持导致无法正确搭建。</p><p>本文主要是讲解了博客的搭建和部署过程，至于一些私人定制的东西还是尽可能的去参考官方文档或一些网络资料。根据自己的需求逐步去完善。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>番外篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>个人博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Harbor搭建Docker私有仓库</title>
    <link href="/2023/04/19/%E4%BD%BF%E7%94%A8Harbor%E6%90%AD%E5%BB%BADocker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/"/>
    <url>/2023/04/19/%E4%BD%BF%E7%94%A8Harbor%E6%90%AD%E5%BB%BADocker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Harbor-企业级私有仓库搭建"><a href="#Harbor-企业级私有仓库搭建" class="headerlink" title="Harbor 企业级私有仓库搭建"></a>Harbor 企业级私有仓库搭建</h1><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304210955349.png" alt="Harbor"></p><h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><blockquote><p>Harbor 被部署为多个 Docker 容器。目标主机需要安装 Docker 和 Docker Compose。</p></blockquote><h3 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求"></a>硬件要求</h3><table><thead><tr><th>硬件</th><th>最低配置</th><th>推荐配置</th></tr></thead><tbody><tr><td>CPU</td><td>2 核</td><td>4 核或更高</td></tr><tr><td>内存</td><td>4G</td><td>8G 或更高</td></tr><tr><td>硬盘</td><td>40G</td><td>160G 或更高</td></tr></tbody></table><h3 id="软件要求"><a href="#软件要求" class="headerlink" title="软件要求"></a>软件要求</h3><table><thead><tr><th>软件</th><th>版本</th><th>描述</th></tr></thead><tbody><tr><td>Docker</td><td>23.0.1</td><td>容器</td></tr><tr><td>Docker Compose</td><td>v2.16.0</td><td>编排</td></tr><tr><td>OpenSSL</td><td>优先选择最新</td><td>用于为 Harbor 生成证书和密钥</td></tr><tr><td>Harbor</td><td>2.6.4</td><td>仓库系统</td></tr></tbody></table><h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><blockquote><p>开始安装 Harbor 之前，需要对操作系统环境进行一些配置和安装相关组件。</p></blockquote><h3 id="修改-YUM-源"><a href="#修改-YUM-源" class="headerlink" title="修改 YUM 源"></a>修改 YUM 源</h3><ul><li><p>移除当前的 yum 源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -rfv /etc/yum.repos.d/*<br></code></pre></td></tr></table></figure></li><li><p>拉取阿里云的 yum 源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<br></code></pre></td></tr></table></figure></li><li><p>更新软件列表和系统内核</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y update<br></code></pre></td></tr></table></figure></li><li><p>安装 yum 工具包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y yum-utils wget<br></code></pre></td></tr></table></figure></li><li><p>配置 Docker 的 yum 源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure></li></ul><h3 id="安装或更新-OpenSSL"><a href="#安装或更新-OpenSSL" class="headerlink" title="安装或更新 OpenSSL"></a>安装或更新 OpenSSL</h3><ul><li><p>查看当前的 OpenSSL 版本</p><p>如果 OpenSSL 没有安装过，则安装，否则更新。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl version<br></code></pre></td></tr></table></figure></li><li><p>安装 OpenSSL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y openssl<br></code></pre></td></tr></table></figure></li><li><p>更新 OpenSSL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum update openssl<br></code></pre></td></tr></table></figure></li></ul><h3 id="操作系统配置"><a href="#操作系统配置" class="headerlink" title="操作系统配置"></a>操作系统配置</h3><ul><li><p>关闭 SELinux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">临时禁用SELinux（不管是永久关闭还是临时关闭，此命令都最好执行一下）</span><br>setenforce 0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">永久关闭SELinux（重启后将不会再开启）</span><br>sed -i &quot;s/SELINUX=permissive/SELINUX=disabled/&quot; /etc/sysconfig/selinux<br>sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config<br></code></pre></td></tr></table></figure></li><li><p>关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">临时禁用防火墙</span><br>systemctl stop firewalld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">永久禁用防火墙</span><br>systemctl disable firewalld<br></code></pre></td></tr></table></figure></li></ul><h2 id="安装和配置-Docker"><a href="#安装和配置-Docker" class="headerlink" title="安装和配置 Docker"></a>安装和配置 Docker</h2><blockquote><p>本次安装的 Docker 是社区版。</p></blockquote><ul><li><p>安装 Docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y docker-ce-23.0.1-1.el7 docker-ce-cli-23.0.1-1.el7 containerd.io-6.18-3.1.el7<br></code></pre></td></tr></table></figure></li><li><p>修改 Docker 配置</p><p>Docker 默认是通过 cgroup 来管理容器的，默认驱动为 cgroupfs，而 Kubernetes 使用的是 systemd ，因此我们需要将驱动改为 systemd。并且使用国内加速源来下载镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/docker/daemon.json<br></code></pre></td></tr></table></figure><p>输入以下内容，其中包含驱动的修改及镜像源的配置</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>:[<span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>启动 Docker 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动 Docker</span><br>systemctl start docker<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置 Docker 开机自启动</span><br>systemctl enable docker<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果之前已经启动过 docker，那么修改配置之后，可以执行下面两个命令。</span><br>systemctl daemon-reload<br>systemctl restart docker<br></code></pre></td></tr></table></figure></li><li><p>查看 Docker 状态和版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">通过 systemctl status 命令查看是否运行成功</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果返回有：Active: active (running) since 五 2020-12-04 02:36:23 CST; 16s ago信息说明启动成功。</span><br>systemctl status docker<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">我们也可以通过 docker version 命令来查看版本信息，看看是否存在问题。</span><br>docker version<br></code></pre></td></tr></table></figure></li></ul><h2 id="安装-Docker-Compose"><a href="#安装-Docker-Compose" class="headerlink" title="安装 Docker Compose"></a>安装 Docker Compose</h2><h3 id="检查操作系统"><a href="#检查操作系统" class="headerlink" title="检查操作系统"></a>检查操作系统</h3><blockquote><p>Docker Compose 的版本很多，需要根据系统的类型及指令集架构来下载相应的版本。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">uname -s -m<br></code></pre></td></tr></table></figure><p>命令执行结果如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">-- <span class="hljs-built_in">console</span> <span class="hljs-built_in">log</span> --<br>Linux x86_64<br></code></pre></td></tr></table></figure><p>我这里使用是 x86_64 的 Linux 系统。</p><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><ul><li><p>下载对应的软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">自动匹配操作系统的下载方法</span><br>curl -L &quot;https://github.com/docker/compose/releases/download/v2.16.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o docker-compose<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">明确操作系统的下载方法</span><br>curl -L &quot;https://github.com/docker/compose/releases/download/v2.16.0/docker-compose-linux-x86_64&quot; -o docker-compose<br></code></pre></td></tr></table></figure></li><li><p>将软件包移动到<code>/usr/local/bin</code>目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv docker-compose /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure></li><li><p>对 docker-compse 目录授权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure></li><li><p>查看版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose -v<br></code></pre></td></tr></table></figure><p>命令执行结果如下：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment">-- console log --</span><br>Docker Compose <span class="hljs-built_in">version</span> v2<span class="hljs-number">.16</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="安装和配置-Harbor"><a href="#安装和配置-Harbor" class="headerlink" title="安装和配置 Harbor"></a>安装和配置 Harbor</h2><h3 id="下载离线安装软件包"><a href="#下载离线安装软件包" class="headerlink" title="下载离线安装软件包"></a>下载离线安装软件包</h3><ul><li><p>下载离线软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://github.com/goharbor/harbor/releases/download/v2.6.4/harbor-offline-installer-v2.6.4.tgz<br></code></pre></td></tr></table></figure><p>Harbor 的软件包比较大，下载需要比较长的时间。建议用自己的电脑下载下来之后再上传到服务器。这样可以节省一点时间。</p><p>如果是下载到本地再上传服务器，可以用下面的命令上传。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">scp harbor-offline-installer-v2.6.4.tgz root@&lt;IP地址&gt;:/root/<br></code></pre></td></tr></table></figure></li><li><p>解压软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar xvf harbor-offline-installer-v2.6.4.tgz<br></code></pre></td></tr></table></figure></li></ul><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入解压的目录</span><br>cd harbor/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">复制临时配置，作为正式部署配置</span><br>cp harbor.yml.tmpl harbor.yml<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">编辑配置文件</span><br>vi harbor.yml<br></code></pre></td></tr></table></figure><p>配置文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Configuration file of Harbor</span><br><br><span class="hljs-comment"># The IP address or hostname to access admin UI and registry service.</span><br><span class="hljs-comment"># DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.</span><br><span class="hljs-attr">hostname:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.3</span><span class="hljs-number">.91</span><br><br><span class="hljs-comment"># http related config</span><br><span class="hljs-attr">http:</span><br>    <span class="hljs-comment"># port for http, default is 80. If https enabled, this port will redirect to https port</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><br><span class="hljs-comment"># https related config</span><br><span class="hljs-comment"># https:</span><br><span class="hljs-comment">#   # https port for harbor, default is 443</span><br><span class="hljs-comment">#   port: 443</span><br><span class="hljs-comment">#   # The path of cert and key files for nginx</span><br><span class="hljs-comment">#   certificate: /your/certificate/path</span><br><span class="hljs-comment">#   private_key: /your/private/key/path</span><br><br><span class="hljs-comment"># # Uncomment following will enable tls communication between all harbor components</span><br><span class="hljs-comment"># internal_tls:</span><br><span class="hljs-comment">#   # set enabled to true means internal tls is enabled</span><br><span class="hljs-comment">#   enabled: true</span><br><span class="hljs-comment">#   # put your cert and key files on dir</span><br><span class="hljs-comment">#   dir: /etc/harbor/tls/internal</span><br><br><span class="hljs-comment"># Uncomment external_url if you want to enable external proxy</span><br><span class="hljs-comment"># And when it enabled the hostname will no longer used</span><br><span class="hljs-comment"># external_url: https://reg.mydomain.com:8433</span><br><br><span class="hljs-comment"># The initial password of Harbor admin</span><br><span class="hljs-comment"># It only works in first time to install harbor</span><br><span class="hljs-comment"># Remember Change the admin password from UI after launching Harbor.</span><br><span class="hljs-attr">harbor_admin_password:</span> <span class="hljs-string">admin123</span><br><br><span class="hljs-comment"># Harbor DB configuration</span><br><span class="hljs-attr">database:</span><br>    <span class="hljs-comment"># The password for the root user of Harbor DB. Change this before any production use.</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root123</span><br>    <span class="hljs-comment"># The maximum number of connections in the idle connection pool. If it &lt;=0, no idle connections are retained.</span><br>    <span class="hljs-attr">max_idle_conns:</span> <span class="hljs-number">100</span><br>    <span class="hljs-comment"># The maximum number of open connections to the database. If it &lt;= 0, then there is no limit on the number of open connections.</span><br>    <span class="hljs-comment"># <span class="hljs-doctag">Note:</span> the default number of connections is 1024 for postgres of harbor.</span><br>    <span class="hljs-attr">max_open_conns:</span> <span class="hljs-number">900</span><br><br><span class="hljs-comment"># The default data volume</span><br><span class="hljs-attr">data_volume:</span> <span class="hljs-string">/data</span><br><br><span class="hljs-comment"># Harbor Storage settings by default is using /data dir on local filesystem</span><br><span class="hljs-comment"># Uncomment storage_service setting If you want to using external storage</span><br><span class="hljs-comment"># storage_service:</span><br><span class="hljs-comment">#   # ca_bundle is the path to the custom root ca certificate, which will be injected into the truststore</span><br><span class="hljs-comment">#   # of registry&#x27;s and chart repository&#x27;s containers.  This is usually needed when the user hosts a internal storage with self signed certificate.</span><br><span class="hljs-comment">#   ca_bundle:</span><br><br><span class="hljs-comment">#   # storage backend, default is filesystem, options include filesystem, azure, gcs, s3, swift and oss</span><br><span class="hljs-comment">#   # for more info about this configuration please refer https://docs.docker.com/registry/configuration/</span><br><span class="hljs-comment">#   filesystem:</span><br><span class="hljs-comment">#     maxthreads: 100</span><br><span class="hljs-comment">#   # set disable to true when you want to disable registry redirect</span><br><span class="hljs-comment">#   redirect:</span><br><span class="hljs-comment">#     disabled: false</span><br><br><span class="hljs-comment"># Trivy configuration</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Trivy DB contains vulnerability information from NVD, Red Hat, and many other upstream vulnerability databases.</span><br><span class="hljs-comment"># It is downloaded by Trivy from the GitHub release page https://github.com/aquasecurity/trivy-db/releases and cached</span><br><span class="hljs-comment"># in the local file system. In addition, the database contains the update timestamp so Trivy can detect whether it</span><br><span class="hljs-comment"># should download a newer version from the Internet or use the cached one. Currently, the database is updated every</span><br><span class="hljs-comment"># 12 hours and published as a new release to GitHub.</span><br><span class="hljs-attr">trivy:</span><br>    <span class="hljs-comment"># ignoreUnfixed The flag to display only fixed vulnerabilities</span><br>    <span class="hljs-attr">ignore_unfixed:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># skipUpdate The flag to enable or disable Trivy DB downloads from GitHub</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># You might want to enable this flag in test or CI/CD environments to avoid GitHub rate limiting issues.</span><br>    <span class="hljs-comment"># If the flag is enabled you have to download the `trivy-offline.tar.gz` archive manually, extract `trivy.db` and</span><br>    <span class="hljs-comment"># `metadata.json` files and mount them in the `/home/scanner/.cache/trivy/db` path.</span><br>    <span class="hljs-attr">skip_update:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># The offline_scan option prevents Trivy from sending API requests to identify dependencies.</span><br>    <span class="hljs-comment"># Scanning JAR files and pom.xml may require Internet access for better detection, but this option tries to avoid it.</span><br>    <span class="hljs-comment"># For example, the offline mode will not try to resolve transitive dependencies in pom.xml when the dependency doesn&#x27;t</span><br>    <span class="hljs-comment"># exist in the local repositories. It means a number of detected vulnerabilities might be fewer in offline mode.</span><br>    <span class="hljs-comment"># It would work if all the dependencies are in local.</span><br>    <span class="hljs-comment"># This option doesn’t affect DB download. You need to specify &quot;skip-update&quot; as well as &quot;offline-scan&quot; in an air-gapped environment.</span><br>    <span class="hljs-attr">offline_scan:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># Comma-separated list of what security issues to detect. Possible values are `vuln`, `config` and `secret`. Defaults to `vuln`.</span><br>    <span class="hljs-attr">security_check:</span> <span class="hljs-string">vuln</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># insecure The flag to skip verifying registry certificate</span><br>    <span class="hljs-attr">insecure:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># github_token The GitHub access token to download Trivy DB</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># Anonymous downloads from GitHub are subject to the limit of 60 requests per hour. Normally such rate limit is enough</span><br>    <span class="hljs-comment"># for production operations. If, for any reason, it&#x27;s not enough, you could increase the rate limit to 5000</span><br>    <span class="hljs-comment"># requests per hour by specifying the GitHub access token. For more details on GitHub rate limiting please consult</span><br>    <span class="hljs-comment"># https://developer.github.com/v3/#rate-limiting</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># You can create a GitHub token by following the instructions in</span><br>    <span class="hljs-comment"># https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># github_token: xxx</span><br><br><span class="hljs-attr">jobservice:</span><br>    <span class="hljs-comment"># Maximum number of job workers in job service</span><br>    <span class="hljs-attr">max_job_workers:</span> <span class="hljs-number">10</span><br><br><span class="hljs-attr">notification:</span><br>    <span class="hljs-comment"># Maximum retry count for webhook job</span><br>    <span class="hljs-attr">webhook_job_max_retry:</span> <span class="hljs-number">10</span><br><br><span class="hljs-attr">chart:</span><br>    <span class="hljs-comment"># Change the value of absolute_url to enabled can enable absolute url in chart</span><br>    <span class="hljs-attr">absolute_url:</span> <span class="hljs-string">disabled</span><br><br><span class="hljs-comment"># Log configurations</span><br><span class="hljs-attr">log:</span><br>    <span class="hljs-comment"># options are debug, info, warning, error, fatal</span><br>    <span class="hljs-attr">level:</span> <span class="hljs-string">info</span><br>    <span class="hljs-comment"># configs for logs in local storage</span><br>    <span class="hljs-attr">local:</span><br>        <span class="hljs-comment"># Log files are rotated log_rotate_count times before being removed. If count is 0, old versions are removed rather than rotated.</span><br>        <span class="hljs-attr">rotate_count:</span> <span class="hljs-number">50</span><br>        <span class="hljs-comment"># Log files are rotated only if they grow bigger than log_rotate_size bytes. If size is followed by k, the size is assumed to be in kilobytes.</span><br>        <span class="hljs-comment"># If the M is used, the size is in megabytes, and if G is used, the size is in gigabytes. So size 100, size 100k, size 100M and size 100G</span><br>        <span class="hljs-comment"># are all valid.</span><br>        <span class="hljs-attr">rotate_size:</span> <span class="hljs-string">200M</span><br>        <span class="hljs-comment"># The directory on your host that store log</span><br>        <span class="hljs-attr">location:</span> <span class="hljs-string">/var/log/harbor</span><br><br>    <span class="hljs-comment"># Uncomment following lines to enable external syslog endpoint.</span><br>    <span class="hljs-comment"># external_endpoint:</span><br>    <span class="hljs-comment">#   # protocol used to transmit log to external endpoint, options is tcp or udp</span><br>    <span class="hljs-comment">#   protocol: tcp</span><br>    <span class="hljs-comment">#   # The host of external endpoint</span><br>    <span class="hljs-comment">#   host: localhost</span><br>    <span class="hljs-comment">#   # Port of external endpoint</span><br>    <span class="hljs-comment">#   port: 5140</span><br><br><span class="hljs-comment">#This attribute is for migrator to detect the version of the .cfg file, DO NOT MODIFY!</span><br><span class="hljs-attr">_version:</span> <span class="hljs-number">2.6</span><span class="hljs-number">.0</span><br><br><span class="hljs-comment"># Uncomment external_database if using external database.</span><br><span class="hljs-comment"># external_database:</span><br><span class="hljs-comment">#   harbor:</span><br><span class="hljs-comment">#     host: harbor_db_host</span><br><span class="hljs-comment">#     port: harbor_db_port</span><br><span class="hljs-comment">#     db_name: harbor_db_name</span><br><span class="hljs-comment">#     username: harbor_db_username</span><br><span class="hljs-comment">#     password: harbor_db_password</span><br><span class="hljs-comment">#     ssl_mode: disable</span><br><span class="hljs-comment">#     max_idle_conns: 2</span><br><span class="hljs-comment">#     max_open_conns: 0</span><br><span class="hljs-comment">#   notary_signer:</span><br><span class="hljs-comment">#     host: notary_signer_db_host</span><br><span class="hljs-comment">#     port: notary_signer_db_port</span><br><span class="hljs-comment">#     db_name: notary_signer_db_name</span><br><span class="hljs-comment">#     username: notary_signer_db_username</span><br><span class="hljs-comment">#     password: notary_signer_db_password</span><br><span class="hljs-comment">#     ssl_mode: disable</span><br><span class="hljs-comment">#   notary_server:</span><br><span class="hljs-comment">#     host: notary_server_db_host</span><br><span class="hljs-comment">#     port: notary_server_db_port</span><br><span class="hljs-comment">#     db_name: notary_server_db_name</span><br><span class="hljs-comment">#     username: notary_server_db_username</span><br><span class="hljs-comment">#     password: notary_server_db_password</span><br><span class="hljs-comment">#     ssl_mode: disable</span><br><br><span class="hljs-comment"># Uncomment external_redis if using external Redis server</span><br><span class="hljs-comment"># external_redis:</span><br><span class="hljs-comment">#   # support redis, redis+sentinel</span><br><span class="hljs-comment">#   # host for redis: &lt;host_redis&gt;:&lt;port_redis&gt;</span><br><span class="hljs-comment">#   # host for redis+sentinel:</span><br><span class="hljs-comment">#   #  &lt;host_sentinel1&gt;:&lt;port_sentinel1&gt;,&lt;host_sentinel2&gt;:&lt;port_sentinel2&gt;,&lt;host_sentinel3&gt;:&lt;port_sentinel3&gt;</span><br><span class="hljs-comment">#   host: redis:6379</span><br><span class="hljs-comment">#   password:</span><br><span class="hljs-comment">#   # sentinel_master_set must be set to support redis+sentinel</span><br><span class="hljs-comment">#   #sentinel_master_set:</span><br><span class="hljs-comment">#   # db_index 0 is for core, it&#x27;s unchangeable</span><br><span class="hljs-comment">#   registry_db_index: 1</span><br><span class="hljs-comment">#   jobservice_db_index: 2</span><br><span class="hljs-comment">#   chartmuseum_db_index: 3</span><br><span class="hljs-comment">#   trivy_db_index: 5</span><br><span class="hljs-comment">#   idle_timeout_seconds: 30</span><br><br><span class="hljs-comment"># Uncomment uaa for trusting the certificate of uaa instance that is hosted via self-signed cert.</span><br><span class="hljs-comment"># uaa:</span><br><span class="hljs-comment">#   ca_file: /path/to/ca</span><br><br><span class="hljs-comment"># Global proxy</span><br><span class="hljs-comment"># Config http proxy for components, e.g. http://my.proxy.com:3128</span><br><span class="hljs-comment"># Components doesn&#x27;t need to connect to each others via http proxy.</span><br><span class="hljs-comment"># Remove component from `components` array if want disable proxy</span><br><span class="hljs-comment"># for it. If you want use proxy for replication, MUST enable proxy</span><br><span class="hljs-comment"># for core and jobservice, and set `http_proxy` and `https_proxy`.</span><br><span class="hljs-comment"># Add domain to the `no_proxy` field, when you want disable proxy</span><br><span class="hljs-comment"># for some special registry.</span><br><span class="hljs-attr">proxy:</span><br>    <span class="hljs-attr">http_proxy:</span><br>    <span class="hljs-attr">https_proxy:</span><br>    <span class="hljs-attr">no_proxy:</span><br>    <span class="hljs-attr">components:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">core</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">jobservice</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">trivy</span><br><br><span class="hljs-comment"># metric:</span><br><span class="hljs-comment">#   enabled: false</span><br><span class="hljs-comment">#   port: 9090</span><br><span class="hljs-comment">#   path: /metrics</span><br><br><span class="hljs-comment"># Trace related config</span><br><span class="hljs-comment"># only can enable one trace provider(jaeger or otel) at the same time,</span><br><span class="hljs-comment"># and when using jaeger as provider, can only enable it with agent mode or collector mode.</span><br><span class="hljs-comment"># if using jaeger collector mode, uncomment endpoint and uncomment username, password if needed</span><br><span class="hljs-comment"># if using jaeger agetn mode uncomment agent_host and agent_port</span><br><span class="hljs-comment"># trace:</span><br><span class="hljs-comment">#   enabled: true</span><br><span class="hljs-comment">#   # set sample_rate to 1 if you wanna sampling 100% of trace data; set 0.5 if you wanna sampling 50% of trace data, and so forth</span><br><span class="hljs-comment">#   sample_rate: 1</span><br><span class="hljs-comment">#   # # namespace used to differenciate different harbor services</span><br><span class="hljs-comment">#   # namespace:</span><br><span class="hljs-comment">#   # # attributes is a key value dict contains user defined attributes used to initialize trace provider</span><br><span class="hljs-comment">#   # attributes:</span><br><span class="hljs-comment">#   #   application: harbor</span><br><span class="hljs-comment">#   # # jaeger should be 1.26 or newer.</span><br><span class="hljs-comment">#   # jaeger:</span><br><span class="hljs-comment">#   #   endpoint: http://hostname:14268/api/traces</span><br><span class="hljs-comment">#   #   username:</span><br><span class="hljs-comment">#   #   password:</span><br><span class="hljs-comment">#   #   agent_host: hostname</span><br><span class="hljs-comment">#   #   # export trace data by jaeger.thrift in compact mode</span><br><span class="hljs-comment">#   #   agent_port: 6831</span><br><span class="hljs-comment">#   # otel:</span><br><span class="hljs-comment">#   #   endpoint: hostname:4318</span><br><span class="hljs-comment">#   #   url_path: /v1/traces</span><br><span class="hljs-comment">#   #   compression: false</span><br><span class="hljs-comment">#   #   insecure: true</span><br><span class="hljs-comment">#   #   timeout: 10s</span><br><br><span class="hljs-comment"># enable purge _upload directories</span><br><span class="hljs-attr">upload_purging:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># remove files in _upload directories which exist for a period of time, default is one week.</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-string">168h</span><br>    <span class="hljs-comment"># the interval of the purge operations</span><br>    <span class="hljs-attr">interval:</span> <span class="hljs-string">24h</span><br>    <span class="hljs-attr">dryrun:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># cache layer configurations</span><br><span class="hljs-comment"># If this feature enabled, harbor will cache the resource</span><br><span class="hljs-comment"># `project/project_metadata/repository/artifact/manifest` in the redis</span><br><span class="hljs-comment"># which can especially help to improve the performance of high concurrent</span><br><span class="hljs-comment"># manifest pulling.</span><br><span class="hljs-comment"># NOTICE</span><br><span class="hljs-comment"># If you are deploying Harbor in HA mode, make sure that all the harbor</span><br><span class="hljs-comment"># instances have the same behaviour, all with caching enabled or disabled,</span><br><span class="hljs-comment"># otherwise it can lead to potential data inconsistency.</span><br><span class="hljs-attr">cache:</span><br>    <span class="hljs-comment"># not enabled by default</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># keep cache for one day by default</span><br>    <span class="hljs-attr">expire_hours:</span> <span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p>上面给出的是示例配置文件，主要修改下面几个参数：</p><ul><li><code>hostname</code>：访问地址，配置成当前主机的 IP 地址即可。如果有云服务器且购买过域名，也可以配置成域名。</li><li><code>harbor_admin_password</code>：管理员账户的密码</li><li><code>https</code>：使用 https 访问时可以保留，如果不使用 https，则需要将 https 及其子项注释掉。</li></ul><h3 id="安装-Harbor"><a href="#安装-Harbor" class="headerlink" title="安装 Harbor"></a>安装 Harbor</h3><blockquote><p>这一步的所有操作都需要在已经解压的 harbor 目录下完成。</p></blockquote><ul><li><p>检查和更新配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./prepare<br></code></pre></td></tr></table></figure><p>执行这个命令会有如下提示</p><p><code>WARNING:root:WARNING: HTTP protocol is insecure. Harbor will deprecate http protocol in the future. Please make sure to upgrade to https</code>。</p><p>这是因为我们没有配置 https 访问导致的。可以忽略。</p></li><li><p>安装 harbor</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./install.sh<br></code></pre></td></tr></table></figure><p>这个命令执行会自动进行 5 步操作，知道提示下面的信息就说明安装已完成。</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">-- console log --<br>[Step 0]: checking if docker is installed ...<br><br>Note: docker version: 23.0.1<br><br>[Step 1]: checking docker-compose is installed ...<br><br>Note: Docker Compose version v2.16.0<br><br>[Step 2]: loading Harbor images ...<br><span class="hljs-meta prompt_">...</span><br>Loaded image: goharbor/harbor-log:v2.6.4<br><span class="hljs-meta prompt_">...</span><br>Loaded image: goharbor/harbor-jobservice:v2.6.4<br><span class="hljs-meta prompt_">...</span><br>Loaded image: goharbor/redis-photon:v2.6.4<br><span class="hljs-meta prompt_">...</span><br>Loaded image: goharbor/notary-signer-photon:v2.6.4<br>Loaded image: goharbor/prepare:v2.6.4<br><span class="hljs-meta prompt_">...</span><br>Loaded image: goharbor/harbor-core:v2.6.4<br><span class="hljs-meta prompt_">...</span><br>Loaded image: goharbor/harbor-db:v2.6.4<br><span class="hljs-meta prompt_">...</span><br>Loaded image: goharbor/harbor-exporter:v2.6.4<br><span class="hljs-meta prompt_">...</span><br>Loaded image: goharbor/nginx-photon:v2.6.4<br><span class="hljs-meta prompt_">...</span><br>Loaded image: goharbor/notary-server-photon:v2.6.4<br><span class="hljs-meta prompt_">...</span><br>Loaded image: goharbor/chartmuseum-photon:v2.6.4<br><span class="hljs-meta prompt_">...</span><br>Loaded image: goharbor/harbor-portal:v2.6.4<br><span class="hljs-meta prompt_">...</span><br>Loaded image: goharbor/harbor-registryctl:v2.6.4<br><span class="hljs-meta prompt_">...</span><br>Loaded image: goharbor/registry-photon:v2.6.4<br><span class="hljs-meta prompt_">...</span><br>Loaded image: goharbor/trivy-adapter-photon:v2.6.4<br><br>[Step 3]: preparing environment ...<br><br>[Step 4]: preparing harbor configs ...<br><span class="hljs-meta prompt_">...</span><br><br>Note: stopping existing Harbor instance ...<br><br>[Step 5]: starting Harbor ...<br>[+] Running 10/10<br> ⠿ Network harbor_harbor        Created                                                                                                    0.6s<br> ⠿ Container harbor-log         Started                                                                                                   25.7s<br> ⠿ Container harbor-portal      Started                                                                                                   23.4s<br> ⠿ Container registry           Started                                                                                                   23.4s<br> ⠿ Container harbor-db          Started                                                                                                   17.7s<br> ⠿ Container redis              Started                                                                                                   17.9s<br> ⠿ Container registryctl        Started                                                                                                   23.3s<br> ⠿ Container harbor-core        Started                                                                                                   23.2s<br> ⠿ Container nginx              Started                                                                                                   25.6s<br> ⠿ Container harbor-jobservice  Started                                                                                                   25.6s<br>✔ ----Harbor has been installed and started successfully.----<br></code></pre></td></tr></table></figure></li></ul><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><blockquote><p>在浏览器输入<code>http://&lt;ip&gt;</code>，就可以打开 Harbor 的页面了。</p><p>管理员用户名：admin</p><p>管理员密码：配置文件<code>harbor_admin_password</code>配置的密码。</p></blockquote><h2 id="客户端使用配置"><a href="#客户端使用配置" class="headerlink" title="客户端使用配置"></a>客户端使用配置</h2><blockquote><p>一般情况下客户端的 Docker 会安装在 Linux 系统或 Mac 系统下。Windows 环境也基本上使用的是 VisualBox 上的 Linux 系统。不管是哪种操作系统，配置几乎都是一样的。主要是配置<code>daemon.json</code>来实现。</p></blockquote><h3 id="Linux-系统客户端配置"><a href="#Linux-系统客户端配置" class="headerlink" title="Linux 系统客户端配置"></a>Linux 系统客户端配置</h3><p>修改<code>/etc/docker/daemon.json</code>文件，如果没有可以新增一个。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;insecure-registries&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;http://&lt;Harbor服务器IP地址或域名&gt;&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这里主要是增加了一个<code>insecure-registries</code>的配置。值指向我们安装好的 Harbor 访问地址。</p><p>配置完成后，重启 Docker。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">重载配置</span><br>systemctl daemon-reload<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启 Docker</span><br>systemctl restart docker<br></code></pre></td></tr></table></figure><h3 id="Mac-系统客户端配置"><a href="#Mac-系统客户端配置" class="headerlink" title="Mac 系统客户端配置"></a>Mac 系统客户端配置</h3><p>如果你使用的是命令行安装的 Docker，可以参考 Linux 的配置方法。如果是二进制安装，即是一个可视化的软件。只需要找到这个软件的设置界面，进入 Docker Engine，在原来的配置基础上增加即可。</p><p>同样的，修改完毕后，要重新启动 Docker。</p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>运维</tag>
      
      <tag>DevOps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker Compse 部署 Seata</title>
    <link href="/2023/04/19/Docker%20Compse%20%E9%83%A8%E7%BD%B2%20Seata/"/>
    <url>/2023/04/19/Docker%20Compse%20%E9%83%A8%E7%BD%B2%20Seata/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-Compse-部署-Seata"><a href="#Docker-Compse-部署-Seata" class="headerlink" title="Docker Compse 部署 Seata"></a>Docker Compse 部署 Seata</h1><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304210947138.png" alt="Seata"></p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><blockquote><p>本次部署是基于 Nacos 搭建 Seata 服务，因此在安装 Seata 之前，需要先准备好 Nacos 服务器。</p></blockquote><ol><li><p>拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull seataio/seata-server:1.3.0<br></code></pre></td></tr></table></figure></li><li><p>启动临时容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name temp-seata-server -p 8091:8091 seataio/seata-server:1.3.0<br></code></pre></td></tr></table></figure></li><li><p>查看容器ID</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker ps -a<br></code></pre></td></tr></table></figure><p>找到刚才启动的容器，复制容器ID。</p></li><li><p>导出Seata配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建配置文件保存目录</span><br>mkdir -p /home/seata-config<br><span class="hljs-meta prompt_"># </span><span class="language-bash">复制配置文件到目标目录</span><br>docker cp &lt;容器ID&gt;:/seata-server/resources/* /home/seata-config<br></code></pre></td></tr></table></figure><p>复制完成后，就可以删除掉临时容器了。</p></li><li><p>准备数据库</p><p>下载Seata源代码，地址：<a href="https://github.com/seata/seata/archive/refs/tags/v1.3.0.zip">https://github.com/seata/seata/archive/refs/tags/v1.3.0.zip</a></p><p>找到源码目录的<code>script/server/db/mysql</code>脚本文件，使用脚本创建数据库。创建表之前先创建一个<code>seata-db</code>的数据库。</p><p>脚本文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- -------------------------------- The script used when storeMode is &#x27;db&#x27; --------------------------------</span><br><span class="hljs-comment">-- the table to store GlobalSession data</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `global_table`<br>(<br>    `xid`                       <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `transaction_id`            <span class="hljs-type">BIGINT</span>,<br>    `status`                    TINYINT      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `application_id`            <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>    `transaction_service_group` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>    `transaction_name`          <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>),<br>    `timeout`                   <span class="hljs-type">INT</span>,<br>    `begin_time`                <span class="hljs-type">BIGINT</span>,<br>    `application_data`          <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">2000</span>),<br>    `gmt_create`                DATETIME,<br>    `gmt_modified`              DATETIME,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`xid`),<br>    KEY `idx_gmt_modified_status` (`gmt_modified`, `status`),<br>    KEY `idx_transaction_id` (`transaction_id`)<br>) ENGINE <span class="hljs-operator">=</span> InnoDB<br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br><br><span class="hljs-comment">-- the table to store BranchSession data</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `branch_table`<br>(<br>    `branch_id`         <span class="hljs-type">BIGINT</span>       <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `xid`               <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `transaction_id`    <span class="hljs-type">BIGINT</span>,<br>    `resource_group_id` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>    `resource_id`       <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">256</span>),<br>    `branch_type`       <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">8</span>),<br>    `status`            TINYINT,<br>    `client_id`         <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">64</span>),<br>    `application_data`  <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">2000</span>),<br>    `gmt_create`        DATETIME(<span class="hljs-number">6</span>),<br>    `gmt_modified`      DATETIME(<span class="hljs-number">6</span>),<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`branch_id`),<br>    KEY `idx_xid` (`xid`)<br>) ENGINE <span class="hljs-operator">=</span> InnoDB<br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br><br><span class="hljs-comment">-- the table to store lock data</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `lock_table`<br>(<br>    `row_key`        <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `xid`            <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">96</span>),<br>    `transaction_id` <span class="hljs-type">BIGINT</span>,<br>    `branch_id`      <span class="hljs-type">BIGINT</span>       <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `resource_id`    <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">256</span>),<br>    `table_name`     <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>    `pk`             <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">36</span>),<br>    `gmt_create`     DATETIME,<br>    `gmt_modified`   DATETIME,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`row_key`),<br>    KEY `idx_branch_id` (`branch_id`)<br>) ENGINE <span class="hljs-operator">=</span> InnoDB<br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br></code></pre></td></tr></table></figure><p>上面的脚本会创建出三个表，这三个表是Seata控制事务时必须的三张表。</p></li></ol><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><blockquote><p>从Docker容器导出的配置文件很多，我们主要修改两个配置<code>file.conf</code>和<code>registry.conf</code>。</p></blockquote><p><code>file.conf</code>：事务日志存储配置</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs text"><br>## transaction log store, only used in seata-server<br>store &#123;<br>  ## store mode: file、db、redis<br>  mode = &quot;db&quot;<br><br>  ## file store property<br>  file &#123;<br>    ## store location dir<br>    dir = &quot;sessionStore&quot;<br>    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions<br>    maxBranchSessionSize = 16384<br>    # globe session size , if exceeded throws exceptions<br>    maxGlobalSessionSize = 512<br>    # file buffer size , if exceeded allocate new buffer<br>    fileWriteBufferCacheSize = 16384<br>    # when recover batch read size<br>    sessionReloadReadSize = 100<br>    # async, sync<br>    flushDiskMode = async<br>  &#125;<br><br>  ## database store property<br>  db &#123;<br>    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.<br>    datasource = &quot;druid&quot;<br>    ## mysql/oracle/postgresql/h2/oceanbase etc.<br>    dbType = &quot;mysql&quot;<br>    driverClassName = &quot;com.mysql.cj.jdbc.Driver&quot;<br>    url = &quot;jdbc:mysql://172.16.3.36:3306/seata-db?useUnicode=true&amp;characterEncoding=UTF-8&amp;useCompression=true&amp;rewriteBatchedStatements=true&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&quot;<br>    user = &quot;root&quot;<br>    password = &quot;admin123&quot;<br>    minConn = 5<br>    maxConn = 30<br>    globalTable = &quot;global_table&quot;<br>    branchTable = &quot;branch_table&quot;<br>    lockTable = &quot;lock_table&quot;<br>    queryLimit = 100<br>    maxWait = 5000<br>  &#125;<br><br>  ## redis store property<br>  redis &#123;<br>    host = &quot;127.0.0.1&quot;<br>    port = &quot;6379&quot;<br>    password = &quot;&quot;<br>    database = &quot;0&quot;<br>    minConn = 1<br>    maxConn = 10<br>    queryLimit = 100<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>重点是 store.mode和store.db。</p><p><code>registry.conf</code>：服务注册发现配置</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs text">registry &#123;<br>  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa<br>  type = &quot;nacos&quot;<br><br>  nacos &#123;<br>    application = &quot;seata-server&quot;<br>    serverAddr = &quot;172.16.3.2&quot;<br>    group = &quot;SEATA_GROUP&quot;<br>    namespace = &quot;b1d472f3-5672-4af3-a222-c312f157858a&quot;<br>    cluster = &quot;default&quot;<br>    username = &quot;nacos&quot;<br>    password = &quot;nacos&quot;<br>  &#125;<br>  eureka &#123;<br>    serviceUrl = &quot;http://localhost:8761/eureka&quot;<br>    application = &quot;default&quot;<br>    weight = &quot;1&quot;<br>  &#125;<br>  redis &#123;<br>    serverAddr = &quot;localhost:6379&quot;<br>    db = 0<br>    password = &quot;&quot;<br>    cluster = &quot;default&quot;<br>    timeout = 0<br>  &#125;<br>  zk &#123;<br>    cluster = &quot;default&quot;<br>    serverAddr = &quot;127.0.0.1:2181&quot;<br>    sessionTimeout = 6000<br>    connectTimeout = 2000<br>    username = &quot;&quot;<br>    password = &quot;&quot;<br>  &#125;<br>  consul &#123;<br>    cluster = &quot;default&quot;<br>    serverAddr = &quot;127.0.0.1:8500&quot;<br>  &#125;<br>  etcd3 &#123;<br>    cluster = &quot;default&quot;<br>    serverAddr = &quot;http://localhost:2379&quot;<br>  &#125;<br>  sofa &#123;<br>    serverAddr = &quot;127.0.0.1:9603&quot;<br>    application = &quot;default&quot;<br>    region = &quot;DEFAULT_ZONE&quot;<br>    datacenter = &quot;DefaultDataCenter&quot;<br>    cluster = &quot;default&quot;<br>    group = &quot;SEATA_GROUP&quot;<br>    addressWaitTime = &quot;3000&quot;<br>  &#125;<br>  file &#123;<br>    name = &quot;file.conf&quot;<br>  &#125;<br>&#125;<br><br>config &#123;<br>  # file、nacos 、apollo、zk、consul、etcd3<br>  type = &quot;nacos&quot;<br><br>  nacos &#123;<br>    serverAddr = &quot;172.16.3.2&quot;<br>    namespace = &quot;b1d472f3-5672-4af3-a222-c312f157858a&quot;<br>    group = &quot;SEATA_GROUP&quot;<br>    username = &quot;nacos&quot;<br>    password = &quot;nacos&quot;<br>  &#125;<br>  consul &#123;<br>    serverAddr = &quot;127.0.0.1:8500&quot;<br>  &#125;<br>  apollo &#123;<br>    appId = &quot;seata-server&quot;<br>    apolloMeta = &quot;http://192.168.1.204:8801&quot;<br>    namespace = &quot;application&quot;<br>  &#125;<br>  zk &#123;<br>    serverAddr = &quot;127.0.0.1:2181&quot;<br>    sessionTimeout = 6000<br>    connectTimeout = 2000<br>    username = &quot;&quot;<br>    password = &quot;&quot;<br>  &#125;<br>  etcd3 &#123;<br>    serverAddr = &quot;http://localhost:2379&quot;<br>  &#125;<br>  file &#123;<br>    name = &quot;file.conf&quot;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重点是registry.type、registry.nacos、config.type、config.nacos。</p><h2 id="初始化配置中心"><a href="#初始化配置中心" class="headerlink" title="初始化配置中心"></a>初始化配置中心</h2><blockquote><p>这一步的目的是将客户端与服务端共享的配置使用 Nacos 来管理。</p></blockquote><h3 id="修改配置-1"><a href="#修改配置-1" class="headerlink" title="修改配置"></a>修改配置</h3><p><code>源码目录/script/config-center/config.txt</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">transport.type</span>=TCP<br><span class="hljs-attr">transport.server</span>=NIO<br><span class="hljs-attr">transport.heartbeat</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">transport.enableClientBatchSendRequest</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">transport.threadFactory.bossThreadPrefix</span>=NettyBoss<br><span class="hljs-attr">transport.threadFactory.workerThreadPrefix</span>=NettyServerNIOWorker<br><span class="hljs-attr">transport.threadFactory.serverExecutorThreadPrefix</span>=NettyServerBizHandler<br><span class="hljs-attr">transport.threadFactory.shareBossWorker</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">transport.threadFactory.clientSelectorThreadPrefix</span>=NettyClientSelector<br><span class="hljs-attr">transport.threadFactory.clientSelectorThreadSize</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">transport.threadFactory.clientWorkerThreadPrefix</span>=NettyClientWorkerThread<br><span class="hljs-attr">transport.threadFactory.bossThreadSize</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">transport.threadFactory.workerThreadSize</span>=default<br><span class="hljs-attr">transport.shutdown.wait</span>=<span class="hljs-number">3</span><br><span class="hljs-attr">service.vgroupMapping.youzi_maill_group</span>=default<br><span class="hljs-attr">service.default.grouplist</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8091</span><br><span class="hljs-attr">service.enableDegrade</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">service.disableGlobalTransaction</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">client.rm.asyncCommitBufferLimit</span>=<span class="hljs-number">10000</span><br><span class="hljs-attr">client.rm.lock.retryInterval</span>=<span class="hljs-number">10</span><br><span class="hljs-attr">client.rm.lock.retryTimes</span>=<span class="hljs-number">30</span><br><span class="hljs-attr">client.rm.lock.retryPolicyBranchRollbackOnConflict</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">client.rm.reportRetryCount</span>=<span class="hljs-number">5</span><br><span class="hljs-attr">client.rm.tableMetaCheckEnable</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">client.rm.sqlParserType</span>=druid<br><span class="hljs-attr">client.rm.reportSuccessEnable</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">client.rm.sagaBranchRegisterEnable</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">client.tm.commitRetryCount</span>=<span class="hljs-number">5</span><br><span class="hljs-attr">client.tm.rollbackRetryCount</span>=<span class="hljs-number">5</span><br><span class="hljs-attr">client.tm.degradeCheck</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">client.tm.degradeCheckAllowTimes</span>=<span class="hljs-number">10</span><br><span class="hljs-attr">client.tm.degradeCheckPeriod</span>=<span class="hljs-number">2000</span><br><span class="hljs-attr">store.mode</span>=db<br><span class="hljs-attr">store.file.dir</span>=file_store/data<br><span class="hljs-attr">store.file.maxBranchSessionSize</span>=<span class="hljs-number">16384</span><br><span class="hljs-attr">store.file.maxGlobalSessionSize</span>=<span class="hljs-number">512</span><br><span class="hljs-attr">store.file.fileWriteBufferCacheSize</span>=<span class="hljs-number">16384</span><br><span class="hljs-attr">store.file.flushDiskMode</span>=async<br><span class="hljs-attr">store.file.sessionReloadReadSize</span>=<span class="hljs-number">100</span><br><span class="hljs-attr">store.db.datasource</span>=druid<br><span class="hljs-attr">store.db.dbType</span>=mysql<br><span class="hljs-attr">store.db.driverClassName</span>=com.mysql.cj.jdbc.Driver<br><span class="hljs-attr">store.db.url</span>=jdbc:mysql://<span class="hljs-number">172.16</span>.<span class="hljs-number">3.36</span>:<span class="hljs-number">3306</span>/seata-db?useUnicode=<span class="hljs-literal">true</span>&amp;characterEncoding=UTF-<span class="hljs-number">8</span>&amp;useCompression=<span class="hljs-literal">true</span>&amp;rewriteBatchedStatements=<span class="hljs-literal">true</span>&amp;useSSL=<span class="hljs-literal">false</span>&amp;serverTimezone=Asia/Shanghai<br><span class="hljs-attr">store.db.user</span>=root<br><span class="hljs-attr">store.db.password</span>=admin123<br><span class="hljs-attr">store.db.minConn</span>=<span class="hljs-number">5</span><br><span class="hljs-attr">store.db.maxConn</span>=<span class="hljs-number">30</span><br><span class="hljs-attr">store.db.globalTable</span>=global_table<br><span class="hljs-attr">store.db.branchTable</span>=branch_table<br><span class="hljs-attr">store.db.queryLimit</span>=<span class="hljs-number">100</span><br><span class="hljs-attr">store.db.lockTable</span>=lock_table<br><span class="hljs-attr">store.db.maxWait</span>=<span class="hljs-number">5000</span><br><span class="hljs-attr">store.redis.host</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">store.redis.port</span>=<span class="hljs-number">6379</span><br><span class="hljs-attr">store.redis.maxConn</span>=<span class="hljs-number">10</span><br><span class="hljs-attr">store.redis.minConn</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">store.redis.database</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">store.redis.password</span>=null<br><span class="hljs-attr">store.redis.queryLimit</span>=<span class="hljs-number">100</span><br><span class="hljs-attr">server.recovery.committingRetryPeriod</span>=<span class="hljs-number">1000</span><br><span class="hljs-attr">server.recovery.asynCommittingRetryPeriod</span>=<span class="hljs-number">1000</span><br><span class="hljs-attr">server.recovery.rollbackingRetryPeriod</span>=<span class="hljs-number">1000</span><br><span class="hljs-attr">server.recovery.timeoutRetryPeriod</span>=<span class="hljs-number">1000</span><br><span class="hljs-attr">server.maxCommitRetryTimeout</span>=-<span class="hljs-number">1</span><br><span class="hljs-attr">server.maxRollbackRetryTimeout</span>=-<span class="hljs-number">1</span><br><span class="hljs-attr">server.rollbackRetryTimeoutUnlockEnable</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">client.undo.dataValidation</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">client.undo.logSerialization</span>=jackson<br><span class="hljs-attr">client.undo.onlyCareUpdateColumns</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">server.undo.logSaveDays</span>=<span class="hljs-number">7</span><br><span class="hljs-attr">server.undo.logDeletePeriod</span>=<span class="hljs-number">86400000</span><br><span class="hljs-attr">client.undo.logTable</span>=undo_log<br><span class="hljs-attr">client.log.exceptionRate</span>=<span class="hljs-number">100</span><br><span class="hljs-attr">transport.serialization</span>=seata<br><span class="hljs-attr">transport.compressor</span>=none<br><span class="hljs-attr">metrics.enabled</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">metrics.registryType</span>=compact<br><span class="hljs-attr">metrics.exporterList</span>=prometheus<br><span class="hljs-attr">metrics.exporterPrometheusPort</span>=<span class="hljs-number">9898</span><br></code></pre></td></tr></table></figure><p>重点关注的配置：</p><ul><li>service.vgroupMapping.&lt;分组名称&gt;&#x3D;default：配置事务分组，重点是分组名称，Seta通过此名称进行事务编组。如果有多个组，则多复制几行，改一下组名即可。这个组名会在微服务配置中体现。default是集群名称，对应的是Seata Server 的<code>registry.conf</code>配置文件中的<code>registry.nacos.cluster</code>配置的值。</li><li>service.default.grouplist&#x3D;<IP>:&lt;端口号&gt;：Seata Server集群地址和端口列表。</IP></li><li>store.db.datasource：使用哪个连接池组件。</li><li>store.db.dbType：使用哪种数据库</li><li>store.db.driverClassName&#x3D;com.mysql.cj.jdbc.Driver：数据库驱动</li><li>store.db.url：数据库连接地址</li><li>store.db.user：数据库账号</li><li>store.db.password：数据库密码</li><li>store.db.globalTable：全局表，对应前面创建的表名。</li><li>store.db.branchTable：事务分支表，对应前面创建的表名。</li><li>store.db.lockTable：事务锁表，对应前面创建的表名。</li></ul><p>其他配置默认即可，如果有场景需要，也可以自行配置。配置方法可以参阅官方文档说明。</p><h3 id="初始化配置到-Nacos"><a href="#初始化配置到-Nacos" class="headerlink" title="初始化配置到 Nacos"></a>初始化配置到 Nacos</h3><blockquote><p>编写完配置之后，可以使用源码中的脚本将配置写入到 Nacos 中，这样 Seata 的服务端和客户端就可以共享配置了。</p></blockquote><p>脚本位置：<code>源码目录/script/config-center/nacos/nacos-config.sh</code></p><p>执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入目录后执行</span><br>sh nacos-config.sh -h 172.16.3.2 -p 80 -g SEATA_GROUP -t b1d472f3-5672-4af3-a222-c312f157858a -u nacos -w nacos<br></code></pre></td></tr></table></figure><ul><li>-h：Nacos服务器地址。</li><li>-p：Nacos服务器端口。</li><li>-g：Nacos配置文件组名。</li><li>-t：Nacos配置中心命名空间。</li><li>-u：Nacos账号。</li><li>-w：Nacos密码。</li></ul><p>执行完命令，会在控制台看到一堆的写入日志。此时打开Nacos控制台，找到配置中心，刷新就可以看到刚才写入的配置了。</p><h2 id="Seata服务的编排与部署"><a href="#Seata服务的编排与部署" class="headerlink" title="Seata服务的编排与部署"></a>Seata服务的编排与部署</h2><p>编排文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.1&quot;</span><br><br><span class="hljs-attr">services:</span><br><br>  <span class="hljs-attr">seata-server:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">seataio/seata-server:1.3.0</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">seata-server</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">seata-server</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8091</span><span class="hljs-string">:8091</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">SEATA_IP=172.16.3.3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">SEATA_PORT=8091</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/home/seata-config/resources:/seata-server/resources</span><br>    <span class="hljs-attr">expose:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8091</span><br></code></pre></td></tr></table></figure><p>其中 <code>环境变量 SEATA_IP</code>和<code>volumes</code>要注意，按照自己的实际情况去填写。</p><p>编写完服务编排之后，就可以启动服务了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose -f &lt;编排文件路径&gt; up -d<br></code></pre></td></tr></table></figure><p>启动完成后，查看容器日志，没有报错信息即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker logs -f &lt;容器ID&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker Compose 部署 Nacos 集群</title>
    <link href="/2023/04/19/DockerCompose%E9%83%A8%E7%BD%B2Nacos%E9%9B%86%E7%BE%A4/"/>
    <url>/2023/04/19/DockerCompose%E9%83%A8%E7%BD%B2Nacos%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-Compose-部署-Nacos-集群"><a href="#Docker-Compose-部署-Nacos-集群" class="headerlink" title="Docker Compose 部署 Nacos 集群"></a>Docker Compose 部署 Nacos 集群</h1><h2 id="节点规划"><a href="#节点规划" class="headerlink" title="节点规划"></a>节点规划</h2><table><thead><tr><th>主机名</th><th>IP 地址</th><th>端口号</th></tr></thead><tbody><tr><td>nacos-nginx</td><td>172.16.1.180</td><td>8045</td></tr><tr><td>nacos-server01</td><td>172.16.1.180</td><td>8846</td></tr><tr><td>nacos-server02</td><td>172.16.1.180</td><td>8847</td></tr><tr><td>nacos-server03</td><td>172.16.1.180</td><td>8848</td></tr><tr><td>nacos-mysql</td><td>172.16.1.180</td><td>3306</td></tr></tbody></table><h2 id="拉取-docker-镜像"><a href="#拉取-docker-镜像" class="headerlink" title="拉取 docker 镜像"></a>拉取 docker 镜像</h2><h3 id="镜像列表"><a href="#镜像列表" class="headerlink" title="镜像列表"></a>镜像列表</h3><table><thead><tr><th>镜像名</th><th>版本号</th></tr></thead><tbody><tr><td>nginx</td><td>1.21.1</td></tr><tr><td>nacos&#x2F;nacos-server</td><td>2.2.0</td></tr><tr><td>mysql</td><td>5.7.33</td></tr></tbody></table><h3 id="拉取命令"><a href="#拉取命令" class="headerlink" title="拉取命令"></a>拉取命令</h3><p>拉取 Nginx 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull nginx:1.21.1<br></code></pre></td></tr></table></figure><p>拉取 Nacos 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull nacos/nacos-server:2.2.0<br></code></pre></td></tr></table></figure><p>拉取 MySQL 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull mysql:5.7.33<br></code></pre></td></tr></table></figure><h2 id="部署容器"><a href="#部署容器" class="headerlink" title="部署容器"></a>部署容器</h2><h3 id="部署-MySQL"><a href="#部署-MySQL" class="headerlink" title="部署 MySQL"></a>部署 MySQL</h3><blockquote><p>如果已经安装过 MySQL 或拥有其他可用的 MySQL，则跳过此步骤。</p></blockquote><h4 id="编排-MySQL"><a href="#编排-MySQL" class="headerlink" title="编排 MySQL"></a>编排 MySQL</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><br><span class="hljs-attr">services:</span><br>    <span class="hljs-attr">mysql:</span><br>        <span class="hljs-attr">container_name:</span> <span class="hljs-string">MySQL5.7.33</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:5.7.33</span><br>        <span class="hljs-attr">environment:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_ROOT_PASSWORD=ok</span><br>        <span class="hljs-attr">volumes:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/mysql/conf:/etc/mysql</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/mysql/logs:/var/log/mysql</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/mysql/data:/var/lib/mysql</span><br>        <span class="hljs-attr">restart:</span> <span class="hljs-string">on-failure</span><br>        <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">3306</span><span class="hljs-string">:3306</span><br>        <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">stdin_open:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">tty:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><blockquote><p>重点说明：</p><p>环境变量 - 编排中的<code>MYSQL_ROOT_PASSWORD</code>环境变量指定了 MySQL 的 root 账户密码。</p><p>数据卷挂载 - 编排中需要挂载三部分内容，分别为：MySQL 配置、MySQL 日志、MySQL 数据文件。</p><p>重启策略 - 编排中设置的策略为<code>报错后重启</code>。</p><p>暴露端口 - ports 中的参数，左边为容器外部端口，即宿主机端口，右边为容器内部端口。</p><p>privileged - 为 true，则让容器内的 root 账户拥有真正的 root 权限。</p><p>stdin_open 和 tty - 为 true，则允许交互输入输出。</p></blockquote><h4 id="使用编排部署-MySQL"><a href="#使用编排部署-MySQL" class="headerlink" title="使用编排部署 MySQL"></a>使用编排部署 MySQL</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose -f &lt;编排文件路径&gt; up -d<br></code></pre></td></tr></table></figure><h4 id="初始化-Nacos-数据库"><a href="#初始化-Nacos-数据库" class="headerlink" title="初始化 Nacos 数据库"></a>初始化 Nacos 数据库</h4><h5 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database nacos-db;<br></code></pre></td></tr></table></figure><p>如果有 Navicat 、SQLYog 等图形化管理器，也可以使用其进行手工创建。</p><h5 id="nacos-db-表初始化"><a href="#nacos-db-表初始化" class="headerlink" title="nacos-db 表初始化"></a>nacos-db 表初始化</h5><p>初始化 sql 语句可以从 GitHub 上下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl https://raw.githubusercontent.com/alibaba/nacos/2.2.0/distribution/conf/mysql-schema.sql<br></code></pre></td></tr></table></figure><p>也可以复制以下脚本执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br> * Copyright 1999-2018 Alibaba Group Holding Ltd.<br> *<br> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br> * you may not use this file except in compliance with the License.<br> * You may obtain a copy of the License at<br> *<br> *      http://www.apache.org/licenses/LICENSE-2.0<br> *<br> * Unless required by applicable law or agreed to in writing, software<br> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br> * See the License for the specific language governing permissions and<br> * limitations under the License.<br> */<br><br>/******************************************/<br>/*   数据库全名 = nacos_config   */<br>/*   表名称 = config_info   */<br>/******************************************/<br>CREATE TABLE `config_info` (<br>  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,<br>  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,<br>  `group_id` varchar(128) DEFAULT NULL,<br>  `content` longtext NOT NULL COMMENT &#x27;content&#x27;,<br>  `md5` varchar(32) DEFAULT NULL COMMENT &#x27;md5&#x27;,<br>  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,<br>  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;修改时间&#x27;,<br>  `src_user` text COMMENT &#x27;source user&#x27;,<br>  `src_ip` varchar(50) DEFAULT NULL COMMENT &#x27;source ip&#x27;,<br>  `app_name` varchar(128) DEFAULT NULL,<br>  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;,<br>  `c_desc` varchar(256) DEFAULT NULL,<br>  `c_use` varchar(64) DEFAULT NULL,<br>  `effect` varchar(64) DEFAULT NULL,<br>  `type` varchar(64) DEFAULT NULL,<br>  `c_schema` text,<br>  `encrypted_data_key` text NOT NULL COMMENT &#x27;秘钥&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_info&#x27;;<br><br>/******************************************/<br>/*   数据库全名 = nacos_config   */<br>/*   表名称 = config_info_aggr   */<br>/******************************************/<br>CREATE TABLE `config_info_aggr` (<br>  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,<br>  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,<br>  `group_id` varchar(128) NOT NULL COMMENT &#x27;group_id&#x27;,<br>  `datum_id` varchar(255) NOT NULL COMMENT &#x27;datum_id&#x27;,<br>  `content` longtext NOT NULL COMMENT &#x27;内容&#x27;,<br>  `gmt_modified` datetime NOT NULL COMMENT &#x27;修改时间&#x27;,<br>  `app_name` varchar(128) DEFAULT NULL,<br>  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;增加租户字段&#x27;;<br><br><br>/******************************************/<br>/*   数据库全名 = nacos_config   */<br>/*   表名称 = config_info_beta   */<br>/******************************************/<br>CREATE TABLE `config_info_beta` (<br>  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,<br>  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,<br>  `group_id` varchar(128) NOT NULL COMMENT &#x27;group_id&#x27;,<br>  `app_name` varchar(128) DEFAULT NULL COMMENT &#x27;app_name&#x27;,<br>  `content` longtext NOT NULL COMMENT &#x27;content&#x27;,<br>  `beta_ips` varchar(1024) DEFAULT NULL COMMENT &#x27;betaIps&#x27;,<br>  `md5` varchar(32) DEFAULT NULL COMMENT &#x27;md5&#x27;,<br>  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,<br>  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;修改时间&#x27;,<br>  `src_user` text COMMENT &#x27;source user&#x27;,<br>  `src_ip` varchar(50) DEFAULT NULL COMMENT &#x27;source ip&#x27;,<br>  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;,<br>  `encrypted_data_key` text NOT NULL COMMENT &#x27;秘钥&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_info_beta&#x27;;<br><br>/******************************************/<br>/*   数据库全名 = nacos_config   */<br>/*   表名称 = config_info_tag   */<br>/******************************************/<br>CREATE TABLE `config_info_tag` (<br>  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,<br>  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,<br>  `group_id` varchar(128) NOT NULL COMMENT &#x27;group_id&#x27;,<br>  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;tenant_id&#x27;,<br>  `tag_id` varchar(128) NOT NULL COMMENT &#x27;tag_id&#x27;,<br>  `app_name` varchar(128) DEFAULT NULL COMMENT &#x27;app_name&#x27;,<br>  `content` longtext NOT NULL COMMENT &#x27;content&#x27;,<br>  `md5` varchar(32) DEFAULT NULL COMMENT &#x27;md5&#x27;,<br>  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,<br>  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;修改时间&#x27;,<br>  `src_user` text COMMENT &#x27;source user&#x27;,<br>  `src_ip` varchar(50) DEFAULT NULL COMMENT &#x27;source ip&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_info_tag&#x27;;<br><br>/******************************************/<br>/*   数据库全名 = nacos_config   */<br>/*   表名称 = config_tags_relation   */<br>/******************************************/<br>CREATE TABLE `config_tags_relation` (<br>  `id` bigint(20) NOT NULL COMMENT &#x27;id&#x27;,<br>  `tag_name` varchar(128) NOT NULL COMMENT &#x27;tag_name&#x27;,<br>  `tag_type` varchar(64) DEFAULT NULL COMMENT &#x27;tag_type&#x27;,<br>  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,<br>  `group_id` varchar(128) NOT NULL COMMENT &#x27;group_id&#x27;,<br>  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;tenant_id&#x27;,<br>  `nid` bigint(20) NOT NULL AUTO_INCREMENT,<br>  PRIMARY KEY (`nid`),<br>  UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),<br>  KEY `idx_tenant_id` (`tenant_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_tag_relation&#x27;;<br><br>/******************************************/<br>/*   数据库全名 = nacos_config   */<br>/*   表名称 = group_capacity   */<br>/******************************************/<br>CREATE TABLE `group_capacity` (<br>  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT &#x27;主键ID&#x27;,<br>  `group_id` varchar(128) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;Group ID，空字符表示整个集群&#x27;,<br>  `quota` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;配额，0表示使用默认值&#x27;,<br>  `usage` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;使用量&#x27;,<br>  `max_size` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;,<br>  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;聚合子配置最大个数，，0表示使用默认值&#x27;,<br>  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;,<br>  `max_history_count` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;最大变更历史数量&#x27;,<br>  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,<br>  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;修改时间&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `uk_group_id` (`group_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;集群、各Group容量信息表&#x27;;<br><br>/******************************************/<br>/*   数据库全名 = nacos_config   */<br>/*   表名称 = his_config_info   */<br>/******************************************/<br>CREATE TABLE `his_config_info` (<br>  `id` bigint(20) unsigned NOT NULL,<br>  `nid` bigint(20) unsigned NOT NULL AUTO_INCREMENT,<br>  `data_id` varchar(255) NOT NULL,<br>  `group_id` varchar(128) NOT NULL,<br>  `app_name` varchar(128) DEFAULT NULL COMMENT &#x27;app_name&#x27;,<br>  `content` longtext NOT NULL,<br>  `md5` varchar(32) DEFAULT NULL,<br>  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,<br>  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,<br>  `src_user` text,<br>  `src_ip` varchar(50) DEFAULT NULL,<br>  `op_type` char(10) DEFAULT NULL,<br>  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;,<br>  `encrypted_data_key` text NOT NULL COMMENT &#x27;秘钥&#x27;,<br>  PRIMARY KEY (`nid`),<br>  KEY `idx_gmt_create` (`gmt_create`),<br>  KEY `idx_gmt_modified` (`gmt_modified`),<br>  KEY `idx_did` (`data_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;多租户改造&#x27;;<br><br><br>/******************************************/<br>/*   数据库全名 = nacos_config   */<br>/*   表名称 = tenant_capacity   */<br>/******************************************/<br>CREATE TABLE `tenant_capacity` (<br>  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT &#x27;主键ID&#x27;,<br>  `tenant_id` varchar(128) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;Tenant ID&#x27;,<br>  `quota` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;配额，0表示使用默认值&#x27;,<br>  `usage` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;使用量&#x27;,<br>  `max_size` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;,<br>  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;聚合子配置最大个数&#x27;,<br>  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;,<br>  `max_history_count` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;最大变更历史数量&#x27;,<br>  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,<br>  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;修改时间&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `uk_tenant_id` (`tenant_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;租户容量信息表&#x27;;<br><br><br>CREATE TABLE `tenant_info` (<br>  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,<br>  `kp` varchar(128) NOT NULL COMMENT &#x27;kp&#x27;,<br>  `tenant_id` varchar(128) default &#x27;&#x27; COMMENT &#x27;tenant_id&#x27;,<br>  `tenant_name` varchar(128) default &#x27;&#x27; COMMENT &#x27;tenant_name&#x27;,<br>  `tenant_desc` varchar(256) DEFAULT NULL COMMENT &#x27;tenant_desc&#x27;,<br>  `create_source` varchar(32) DEFAULT NULL COMMENT &#x27;create_source&#x27;,<br>  `gmt_create` bigint(20) NOT NULL COMMENT &#x27;创建时间&#x27;,<br>  `gmt_modified` bigint(20) NOT NULL COMMENT &#x27;修改时间&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),<br>  KEY `idx_tenant_id` (`tenant_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;tenant_info&#x27;;<br><br>CREATE TABLE `users` (<br>`username` varchar(50) NOT NULL PRIMARY KEY,<br>`password` varchar(500) NOT NULL,<br>`enabled` boolean NOT NULL<br>);<br><br>CREATE TABLE `roles` (<br>`username` varchar(50) NOT NULL,<br>`role` varchar(50) NOT NULL,<br>UNIQUE INDEX `idx_user_role` (`username` ASC, `role` ASC) USING BTREE<br>);<br><br>CREATE TABLE `permissions` (<br>    `role` varchar(50) NOT NULL,<br>    `resource` varchar(255) NOT NULL,<br>    `action` varchar(8) NOT NULL,<br>    UNIQUE INDEX `uk_role_permission` (`role`,`resource`,`action`) USING BTREE<br>);<br><br>INSERT INTO users (username, password, enabled) VALUES (&#x27;nacos&#x27;, &#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;, TRUE);<br><br>INSERT INTO roles (username, role) VALUES (&#x27;nacos&#x27;, &#x27;ROLE_ADMIN&#x27;);<br></code></pre></td></tr></table></figure><h3 id="部署-Nacos-集群"><a href="#部署-Nacos-集群" class="headerlink" title="部署 Nacos 集群"></a>部署 Nacos 集群</h3><h4 id="编排-Nacos-集群"><a href="#编排-Nacos-集群" class="headerlink" title="编排 Nacos 集群"></a>编排 Nacos 集群</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><br><span class="hljs-attr">services:</span><br>    <span class="hljs-attr">nacos1:</span><br>        <span class="hljs-attr">container_name:</span> <span class="hljs-string">nacos-server01</span><br>        <span class="hljs-attr">hostname:</span> <span class="hljs-string">nacos-server01</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nacos/nacos-server:2.2.0</span><br>        <span class="hljs-attr">environment:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MODE=cluster</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">PREFER_HOST_MODE=hostname</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">NACOS_SERVERS=nacos-server01:8848</span> <span class="hljs-string">nacos-server02:8848</span> <span class="hljs-string">nacos-server03:8848</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">SPRING_DATASOURCE_PLATFORM=mysql</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_HOST=172.16.1.180</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_PORT=3306</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_USER=root</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_PASSWORD=ok</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_DB_NAME=nacos-db</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">JVM_XMS=128m</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">JVM_XMX=128m</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">JVM_XMN=128m</span><br>        <span class="hljs-attr">volumes:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/nacos/cluster-logs/nacos-server01:/home/nacos/logs</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/nacos/init.d:/home/nacos/init.d</span><br>        <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">8846</span><span class="hljs-string">:8848</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">9555</span><span class="hljs-string">:9555</span><br>        <span class="hljs-attr">restart:</span> <span class="hljs-string">on-failure</span><br><br>    <span class="hljs-attr">nacos2:</span><br>        <span class="hljs-attr">container_name:</span> <span class="hljs-string">nacos-server02</span><br>        <span class="hljs-attr">hostname:</span> <span class="hljs-string">nacos-server02</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nacos/nacos-server:2.2.0</span><br>        <span class="hljs-attr">environment:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MODE=cluster</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">PREFER_HOST_MODE=hostname</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">NACOS_SERVERS=nacos-server01:8848</span> <span class="hljs-string">nacos-server02:8848</span> <span class="hljs-string">nacos-server03:8848</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">SPRING_DATASOURCE_PLATFORM=mysql</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_HOST=172.16.1.180</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_PORT=3306</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_USER=root</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_PASSWORD=ok</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_DB_NAME=nacos-db</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">JVM_XMS=128m</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">JVM_XMX=128m</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">JVM_XMN=128m</span><br>        <span class="hljs-attr">volumes:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/nacos/cluster-logs/nacos-server02:/home/nacos/logs</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/nacos/init.d:/home/nacos/init.d</span><br>        <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">8847</span><span class="hljs-string">:8848</span><br>        <span class="hljs-attr">restart:</span> <span class="hljs-string">on-failure</span><br><br>    <span class="hljs-attr">nacos3:</span><br>        <span class="hljs-attr">container_name:</span> <span class="hljs-string">nacos-server03</span><br>        <span class="hljs-attr">hostname:</span> <span class="hljs-string">nacos-server03</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nacos/nacos-server:2.2.0</span><br>        <span class="hljs-attr">environment:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MODE=cluster</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">PREFER_HOST_MODE=hostname</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">NACOS_SERVERS=nacos-server01:8848</span> <span class="hljs-string">nacos-server02:8848</span> <span class="hljs-string">nacos-server03:8848</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">SPRING_DATASOURCE_PLATFORM=mysql</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_HOST=172.16.1.180</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_PORT=3306</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_USER=root</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_PASSWORD=ok</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_DB_NAME=nacos-db</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">JVM_XMS=128m</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">JVM_XMX=128m</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">JVM_XMN=128m</span><br>        <span class="hljs-attr">volumes:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/nacos/cluster-logs/nacos-server03:/home/nacos/logs</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/nacos/init.d:/home/nacos/init.d</span><br>        <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">8848</span><span class="hljs-string">:8848</span><br>        <span class="hljs-attr">restart:</span> <span class="hljs-string">on-failure</span><br></code></pre></td></tr></table></figure><blockquote><p>重要说明：</p><blockquote><p>环境变量说明</p><ul><li><p>MODE&#x3D;cluster</p><p>运行模式，默认为单机模式，cluster 为集群模式。</p></li><li><p>PREFER_HOST_MODE&#x3D;hostname</p><p>节点主机访问模式，hostname 为使用主机名访问。</p></li><li><p>NACOS_SERVERS&#x3D;nacos-server01:8848 nacos-server02:8848 nacos-server03:8848</p><p>Nacos 服务节点列表，本次搭建的是三节点集群。格式：主机名:端口号 或 IP:端口号。</p></li><li><p>SPRING_DATASOURCE_PLATFORM&#x3D;mysql</p><p>数据源平台，默认为空。mysql 为使用 MySQL 作为数据源。</p></li><li><p>MYSQL_SERVICE_HOST&#x3D;172.16.1.180</p><p>MySQL 的主机地址，注意不能使用 127.0.0.1，127.0.0.1 在部署 Docker 时指的是容器内的本地地址，而不是宿主机的本地地址。如果部署 MySQL 时，配置了 hostname ，也可以使用 hostname 作为地址。</p></li><li><p>MYSQL_SERVICE_PORT&#x3D;3306</p><p>MySQL 的端口号。</p></li><li><p>MYSQL_SERVICE_USER&#x3D;root</p><p>MySQL 的用户名。</p></li><li><p>MYSQL_SERVICE_PASSWORD&#x3D;ok</p><p>MySQL 的账户密码。</p></li><li><p>MYSQL_SERVICE_DB_NAME&#x3D;nacos-db</p><p>要连接的数据库名称。</p></li></ul><hr><ul><li><p>JVM_XMS&#x3D;128m</p></li><li><p>JVM_XMX&#x3D;128m</p></li><li><p>JVM_XMN&#x3D;128m</p><p>以上三个环境变量配置的是 Nacos 的 JVM，默认情况下 Nacos 分配的内存为 2G，如果是单机多容器部署，注意要加上此环境变量的配置，否则会一直重启。如果是多机单容器部署则不需要。</p></li></ul></blockquote><hr><blockquote><p>数据卷挂载说明</p><p>此次编排配置了两个挂载，分别为 Nacos 节点日志、Nacos 节点配置。其中节点日志为每个节点单独挂载了一个目录，节点配置则是三个节点共用一个配置，以保证三个节点的配置统一。</p><p>如果是多机环境，则每个节点的挂载各自独立，但如果修改其中一个主机的 nacos 节点配置，则最好将其他剩余节点的配置也统一修改。</p></blockquote></blockquote><h4 id="使用编排部署-Nacos-集群"><a href="#使用编排部署-Nacos-集群" class="headerlink" title="使用编排部署 Nacos 集群"></a>使用编排部署 Nacos 集群</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose -f &lt;编排文件路径&gt; up -d<br></code></pre></td></tr></table></figure><p>部署结束后，使用 docker logs 分别查看容器运行日志。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker logs -f &lt;容器ID&gt;<br></code></pre></td></tr></table></figure><p>如果返回如下内容，则说明此节点启动成功。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs text">         ,--.<br>       ,--.&#x27;|<br>   ,--,:  : |                                           Nacos 2.0.2<br>,`--.&#x27;`|  &#x27; :                       ,---.               Running in cluster mode, All function modules<br>|   :  :  | |                      &#x27;   ,&#x27;\   .--.--.    Port: 8848<br>:   |   \ | :  ,--.--.     ,---.  /   /   | /  /    &#x27;   Pid: 1<br>|   : &#x27;  &#x27;; | /       \   /     \.   ; ,. :|  :  /`./   Console: http://nacos-server01:8848/nacos/index.html<br>&#x27;   &#x27; ;.    ;.--.  .-. | /    / &#x27;&#x27;   | |: :|  :  ;_<br>|   | | \   | \__\/: . ..    &#x27; / &#x27;   | .; : \  \    `.      https://nacos.io<br>&#x27;   : |  ; .&#x27; ,&quot; .--.; |&#x27;   ; :__|   :    |  `----.   \<br>|   | &#x27;`--&#x27;  /  /  ,.  |&#x27;   | &#x27;.&#x27;|\   \  /  /  /`--&#x27;  /<br>&#x27;   : |     ;  :   .&#x27;   \   :    : `----&#x27;  &#x27;--&#x27;.     /<br>;   |.&#x27;     |  ,     .-./\   \  /            `--&#x27;---&#x27;<br>&#x27;---&#x27;        `--`---&#x27;     `----&#x27;<br><br>2021-07-27 11:21:15,725 INFO The server IP list of Nacos is [nacos-server01:8848, nacos-server02:8848, nacos-server03:8848]<br><br>2021-07-27 11:21:16,738 INFO Nacos is starting...<br><br>2021-07-27 11:21:16,738 INFO Nacos is starting...<br><br>2021-07-27 11:22:06,052 INFO Nacos started successfully in cluster mode. use external storage<br></code></pre></td></tr></table></figure><p>打开浏览器，分别输入：<code>http://&lt;ip&gt;:8846/nacos</code>、<code>http://&lt;ip&gt;:8847/nacos</code>、<code>http://&lt;ip&gt;:8848/nacos</code>，如果显示如下页面，则说明集群部署并启动成功。</p><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304191636701.png" alt="登录页"></p><p>输入默认账户和密码，即：<code>nacos</code>，用户名和密码一样。进入到管理后台。进入到<code>集群管理 -&gt; 节点列表</code>，页面显示如下：</p><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304191636356.png" alt="集群节点列表"></p><p>从页面中我们可以看到，三个节点的状态均为 UP（在线）。至此 Nacos 集群就搭建完毕了，接下来我们通过 Nginx 来为 Nacos 增加一个统一的访问入口，以便于后续的管理和维护。</p><p>我们可以在其中一个 Nacos 节点上创建一个配置文件，然后通过其他节点访问，如果都可以看到相同的配置文件，则说明集群可用。另外，创建完配置文件后，查看 MySQL 的 nacos-db 数据中的<code>config_info</code>表，如果可以看到我们新建的配置，则说明 nacos 可以使用 MySQL 进行持久化。</p><h3 id="部署-Nginx"><a href="#部署-Nginx" class="headerlink" title="部署 Nginx"></a>部署 Nginx</h3><h4 id="拷贝-Nginx-配置"><a href="#拷贝-Nginx-配置" class="headerlink" title="拷贝 Nginx 配置"></a>拷贝 Nginx 配置</h4><p>Nginx 的部署与其他服务部署略有不同，我们需要先启动一个 Nginx 容器实例，然后从容器事例中拷贝出 Nginx 的配置文件到指定目录，之后我们将复制出的配置文件与 Nginx 容器的数据卷进行挂载，从而达到可以在容器外部修改配置文件的目的。这么做是因为，如果直接挂载，那么容器实例中的的目录将会被外部的挂载所覆盖。这是官方 Nginx 镜像的一个小缺陷，注意一下就行了。</p><ul><li><p>运行 Nginx 容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name temp-nginx -p 8080:8080 -d nginx:1.21.1<br></code></pre></td></tr></table></figure></li><li><p>在宿主机创建 Nginx 的挂载目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">实际创建时以自己的机器环境为准</span><br>mkdir -p &lt;宿主机挂载目录&gt;<br></code></pre></td></tr></table></figure></li><li><p>拷贝容器中的配置到宿主机的挂载目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker cp &lt;Nginx容器ID&gt;:/etc/nginx/ &lt;宿主机挂载目录&gt;<br></code></pre></td></tr></table></figure></li><li><p>停止并删除容器实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker stop &lt;Nginx容器ID&gt;<br>docker rm &lt;Nginx容器ID&gt;<br></code></pre></td></tr></table></figure></li></ul><h4 id="修改-Nginx-配置文件"><a href="#修改-Nginx-配置文件" class="headerlink" title="修改 Nginx 配置文件"></a>修改 Nginx 配置文件</h4><p>位置：&lt;宿主机挂载目录&gt;&#x2F;conf.d&#x2F;default.conf</p><p>配置文件主要修改两个部分，一个是新增 upstream，通过负载均衡来配置 Nacos 服务的节点；第二个是修改 server 下的 location，在其中添加反向代理配置。另外，如果你的 Nginx 没有配置过 server_name，那么还需要修改 server 下的 server_name 配置。</p><p>完整配置文件如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs text"># 添加负载均衡配置<br>upstream nacos &#123;<br>    server nacos-server01:8846 weight=1 max_fails=2 fail_timeout=10s;<br>    server nacos-server01:8847 weight=1 max_fails=2 fail_timeout=10s;<br>    server nacos-server01:8848 weight=1 max_fails=2 fail_timeout=10s;<br>&#125;<br><br>server &#123;<br>    listen       80;<br>    listen  [::]:80;<br>    # 修改为宿主机的 IP地址<br>    server_name  172.16.1.180;<br><br>    #access_log  /var/log/nginx/host.access.log  main;<br><br>    location / &#123;<br>    # 添加代理配置<br>        proxy_pass http://nacos;<br>        proxy_set_header Host $host;<br>        proxy_set_header X-Real-IP $remote_addr;<br>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>        proxy_set_header REMOTE-HOST $remote_addr;<br>        add_header X-Cache $upstream_cache_status;<br>        add_header Cache-Control no-cache;<br><br>        #root   /usr/share/nginx/html;<br>        #index  index.html index.htm;<br>    &#125;<br><br>    #error_page  404              /404.html;<br><br>    # redirect server error pages to the static page /50x.html<br>    #<br>    error_page   500 502 503 504  /50x.html;<br>    location = /50x.html &#123;<br>        root   /usr/share/nginx/html;<br>    &#125;<br><br>    # proxy the PHP scripts to Apache listening on 127.0.0.1:80<br>    #<br>    #location ~ \.php$ &#123;<br>    #    proxy_pass   http://127.0.0.1;<br>    #&#125;<br><br>    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000<br>    #<br>    #location ~ \.php$ &#123;<br>    #    root           html;<br>    #    fastcgi_pass   127.0.0.1:9000;<br>    #    fastcgi_index  index.php;<br>    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;<br>    #    include        fastcgi_params;<br>    #&#125;<br><br>    # deny access to .htaccess files, if Apache&#x27;s document root<br>    # concurs with nginx&#x27;s one<br>    #<br>    #location ~ /\.ht &#123;<br>    #    deny  all;<br>    #&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="编排-Nginx"><a href="#编排-Nginx" class="headerlink" title="编排 Nginx"></a>编排 Nginx</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><br><span class="hljs-attr">services:</span><br>    <span class="hljs-attr">nacos-nginx:</span><br>        <span class="hljs-attr">container_name:</span> <span class="hljs-string">nacos-nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.21.1</span><br>        <span class="hljs-attr">volumes:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/nacos-nginx/conf:/etc/nginx</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/nacos-nginx/www:/usr/share/nginx</span><br>        <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">8845</span><span class="hljs-string">:80</span><br>        <span class="hljs-attr">restart:</span> <span class="hljs-string">on-failure</span><br></code></pre></td></tr></table></figure><blockquote><p>重要说明：</p><p>数据卷挂载 - 本例中分别将 Nginx 的配置文件目录和静态文件资源目录挂载到了宿主机，如果不需要提供静态资源访问，可以不用挂载此目录。</p><p>端口 - 本例中，为了避免与其他 Nginx 端口冲突，我们暴露的端口为 8845，其中 80 端口为容器内部端口。</p></blockquote><h4 id="使用编排部署-Nginx"><a href="#使用编排部署-Nginx" class="headerlink" title="使用编排部署 Nginx"></a>使用编排部署 Nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose -f &lt;编排文件路径&gt; up -d<br></code></pre></td></tr></table></figure><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><p>打来浏览器输入：<code>http://&lt;IP&gt;:8845/nacos</code>，如果显示如下界面，则说明部署成功。</p><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304191636357.png" alt="Nginx负载Nacos"></p><p>部署成功后，多刷新几次页面，如果每次显示的都是同一个页面则说明 Nginx 可以正常提供负载。因为我们在配置 Nginx 时，使用的是轮询负载策略。</p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
