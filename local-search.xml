<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>如何搭建 Jenkins 环境</title>
    <link href="/2023/04/20/%E6%90%AD%E5%BB%BAJenkins%E7%8E%AF%E5%A2%83/"/>
    <url>/2023/04/20/%E6%90%AD%E5%BB%BAJenkins%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304201555417.jpeg" alt="Jenkins"></p><h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><blockquote><p>特别说明：在正式开始配置 Jenkins 之前，最好是将插件列表中的相关插件都安装上。这一步比较坑，我在配置的过程中因为缺少插件走了不少弯路。</p></blockquote><h3 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求"></a>硬件要求</h3><table><thead><tr><th>硬件</th><th>最低配置</th><th>推荐配置</th></tr></thead><tbody><tr><td>CPU</td><td>2 核</td><td>4 核</td></tr><tr><td>内存</td><td>4G</td><td>8G</td></tr><tr><td>硬盘</td><td>20G</td><td>50G</td></tr></tbody></table><h3 id="软件要求"><a href="#软件要求" class="headerlink" title="软件要求"></a>软件要求</h3><table><thead><tr><th>软件</th><th>版本</th></tr></thead><tbody><tr><td>JDK</td><td>Open JDK 1.8 最新版</td></tr><tr><td>Maven</td><td>3.8.1</td></tr><tr><td>Docker</td><td>23.0.1</td></tr><tr><td>Git</td><td>最新版</td></tr><tr><td>Jenkins</td><td>2.346.1（几乎是最后一个支持 Java8 的版本）</td></tr></tbody></table><h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><h3 id="修改-YUM-源"><a href="#修改-YUM-源" class="headerlink" title="修改 YUM 源"></a>修改 YUM 源</h3><ul><li><p>移除当前的 yum 源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -rfv /etc/yum.repos.d/*<br></code></pre></td></tr></table></figure></li><li><p>拉取阿里云的 yum 源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<br></code></pre></td></tr></table></figure></li><li><p>更新软件列表和系统内核</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y update<br></code></pre></td></tr></table></figure></li><li><p>安装 yum 工具包及其他必备工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y yum-utils wget net-tools git<br></code></pre></td></tr></table></figure></li><li><p>配置 Docker 的 yum 源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure></li></ul><h3 id="操作系统配置"><a href="#操作系统配置" class="headerlink" title="操作系统配置"></a>操作系统配置</h3><ul><li><p>关闭 SELinux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">临时禁用SELinux（不管是永久关闭还是临时关闭，此命令都最好执行一下）</span><br>setenforce 0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">永久关闭SELinux（重启后将不会再开启）</span><br>sed -i &quot;s/SELINUX=permissive/SELINUX=disabled/&quot; /etc/sysconfig/selinux<br>sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config<br></code></pre></td></tr></table></figure></li><li><p>关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">临时禁用防火墙</span><br>systemctl stop firewalld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">永久禁用防火墙</span><br>systemctl disable firewalld<br></code></pre></td></tr></table></figure></li></ul><h2 id="安装和配置-JDK"><a href="#安装和配置-JDK" class="headerlink" title="安装和配置 JDK"></a>安装和配置 JDK</h2><ul><li><p>安装 JDK</p><p><strong><em>注意：这里又个巨坑，安装 JDK，注意只有带 *-devel 的才是完整的 JDK。否则安装的只是 JRE</em></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y java-1.8.0-openjdk-devel<br></code></pre></td></tr></table></figure></li><li><p>配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/profile<br></code></pre></td></tr></table></figure><p>在配置文件的最下方添加如下配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># SET JDK ENVIRONMENT</span><br><span class="hljs-built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk<br><span class="hljs-built_in">export</span> JRE_HOME=<span class="hljs-variable">$JAVA_HOME</span>/jre<br><span class="hljs-built_in">export</span> CLASSPATH=<span class="hljs-variable">$JAVA_HOME</span>/lib:<span class="hljs-variable">$JRE_HOME</span>/lib:<span class="hljs-variable">$CLASSPATH</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$JRE_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure></li><li><p>重载配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile<br></code></pre></td></tr></table></figure></li><li><p>查看是否生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">javac<br></code></pre></td></tr></table></figure><p>这里使用 javac 的目的是只有安装 JDK 才能使用<code>javac</code>命令，只安装 JRE 是不能使用这个命令的。以此检验系统是否安装好了 JDK。</p></li></ul><h2 id="安装和配置-Docker"><a href="#安装和配置-Docker" class="headerlink" title="安装和配置 Docker"></a>安装和配置 Docker</h2><blockquote><p>使用 Docker 是因为，我们通常需要将项目打包成 Docker 镜像，所以需要先安装 Docker。本次安装的 Docker 是社区版。</p></blockquote><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><ul><li><p>安装 Docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y docker-ce-23.0.1-1.el7 docker-ce-cli-23.0.1-1.el7 containerd.io-6.18-3.1.el7<br></code></pre></td></tr></table></figure></li><li><p>修改 Docker 配置</p><p>Docker 默认是通过 cgroup 来管理容器的，默认驱动为 cgroupfs，而 Kubernetes 使用的是 systemd ，因此我们需要将驱动改为 systemd。并且使用国内加速源来下载镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/docker/daemon.json<br></code></pre></td></tr></table></figure><p>输入以下内容，其中包含驱动的修改及镜像源的配置</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>:[<span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>启动 Docker 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动 Docker</span><br>systemctl start docker<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置 Docker 开机自启动</span><br>systemctl enable docker<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果之前已经启动过 docker，那么修改配置之后，可以执行下面两个命令。</span><br>systemctl daemon-reload<br>systemctl restart docker<br></code></pre></td></tr></table></figure></li><li><p>查看 Docker 状态和版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">通过 systemctl status 命令查看是否运行成功</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果返回有：Active: active (running) since 五 2020-12-04 02:36:23 CST; 16s ago信息说明启动成功。</span><br>systemctl status docker<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">我们也可以通过 docker version 命令来查看版本信息，看看是否存在问题。</span><br>docker version<br></code></pre></td></tr></table></figure></li></ul><h3 id="开启-2376-端口"><a href="#开启-2376-端口" class="headerlink" title="开启 2376 端口"></a>开启 2376 端口</h3><blockquote><p>Docker 开启 2376 端口的目的是为了让 Jenkins 能使用 Docker 进行打包。</p><p><strong>注意：</strong>老版本使用的是 2375 端口，而新版本使用的是 2376。</p></blockquote><ul><li><p>编辑 docker.service 配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /usr/lib/systemd/system/docker.service<br></code></pre></td></tr></table></figure><p>找到<code>[Service]</code>节点下的<code>ExecStart</code>配置，修改成下面这个样子。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Service]</span><br><span class="hljs-attr">ExecStart</span>=/usr/bin/dockerd -H tcp://<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">2376</span> -H fd:// --containerd=/run/containerd/containerd.sock<br></code></pre></td></tr></table></figure><p>实际上我们只是在原有的配置上增加了<code>-H tcp://0.0.0.0:2376</code>。</p></li><li><p>重启 Docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">重新加载配置</span><br>systemctl daemon-reload<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重新启动</span><br>systemctl restart docker<br></code></pre></td></tr></table></figure></li><li><p>查看端口是否开放成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用此命令需要安装 net-tools，前面的章节我们已经安装过了。</span><br>netstat -tuln | grep 2375<br></code></pre></td></tr></table></figure><p>命令执行结果如下：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">-- console log --<br>tcp6       <span class="hljs-number">0</span>      <span class="hljs-number">0</span> ::<span class="hljs-symbol">:</span><span class="hljs-number">2375</span>                 ::<span class="hljs-symbol">:*</span>                    <span class="hljs-title class_">LISTEN</span><br></code></pre></td></tr></table></figure><p>如果打印了这条日志信息，说明开启成功。</p></li></ul><h2 id="安装-Jenkins"><a href="#安装-Jenkins" class="headerlink" title="安装 Jenkins"></a>安装 Jenkins</h2><h3 id="安装前准备-1"><a href="#安装前准备-1" class="headerlink" title="安装前准备"></a>安装前准备</h3><ul><li><p>导入 Jenkins 的 GPG 密钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key<br></code></pre></td></tr></table></figure></li><li><p>添加 Jenkins 的软件库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo<br></code></pre></td></tr></table></figure></li><li><p>更新 yum 缓存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum update<br></code></pre></td></tr></table></figure></li></ul><h3 id="开始安装-Jenkins"><a href="#开始安装-Jenkins" class="headerlink" title="开始安装 Jenkins"></a>开始安装 Jenkins</h3><ul><li><p>安装 Jenkins</p><p>这一步的下载过程有点慢，请耐心等待。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y jenkins-2.346.1<br></code></pre></td></tr></table></figure></li><li><p>修改 Jenkins 默认配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/sysconfig/jenkins<br></code></pre></td></tr></table></figure><p>主要修改下面两部分内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">JENKINS_USER=&quot;admin&quot;<br>JENKINS_PORT=&quot;8080&quot;<br></code></pre></td></tr></table></figure><ul><li><code>JENKINS_USER</code>：配置 Jenkins 的登录用户名。</li><li><code>JENKINS_PORT</code>：配置 Jenkins 的访问端口号。</li></ul></li><li><p>启动 Jenkins 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动 Jenkins</span><br>systemctl start jenkins<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置 Jenkins 开机自启动</span><br>systemctl enable jenkins<br></code></pre></td></tr></table></figure></li><li><p>获取 Jenkins 的初始化密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /var/lib/jenkins/secrets/initialAdminPassword<br></code></pre></td></tr></table></figure></li><li><p>访问测试</p><p>打开浏览器输入：http:&#x2F;&#x2F;<ip>:8080，会打开一个页面，页面中也会提示去哪里获取初始化密码，输入初始化密码之后点击解锁。解锁成功后，会提示一个插件安装的页面。这里选择<code>选择插件</code>，然后进入另一个页面选<code>无</code>，也就是不安装插件。后面我们配置好国内镜像源之后，再安装所需要的插件。后面的步骤根据提示一步步操作直到完成。</ip></p></li></ul><h2 id="Jenkins-基本配置"><a href="#Jenkins-基本配置" class="headerlink" title="Jenkins 基本配置"></a>Jenkins 基本配置</h2><h3 id="配置插件的更新站点"><a href="#配置插件的更新站点" class="headerlink" title="配置插件的更新站点"></a>配置插件的更新站点</h3><p>进入到<code>Dashboard/Manage Jenkins</code>，找到<code>Manage Plugin</code>点击进入。选择<code>Advanced</code>选项卡，滑动到最下面有一个<code>Update Site</code>。把它改成下面的这个地址：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//mi</span>rrors4.tuna.tsinghua.edu.cn<span class="hljs-regexp">/jenkins/u</span>pdates<span class="hljs-regexp">/dynamic-stable-2.346.1/u</span>pdate-center.json<br></code></pre></td></tr></table></figure><p>修改完成后，记得要点击<code>submit</code>按钮提交。提交后重启 jenkins。如果不想到服务器去重启，也可以通过浏览器的 URL 重启。比如：在浏览器 URL 地址的端口号后面改为&#x2F;restart（如：http:&#x2F;&#x2F;&lt;IP 地址&gt;:8080&#x2F;restart）</p><p><strong><em>注意：上面提供的地址中，细看会发现有一个版本号，这个版本号实际上是和 Jenkins 的版本号保持一致的。这样做的目的是防止某些插件更新后误装导致 Jenkins 无法工作。</em></strong></p><h2 id="安装和配置-Maven"><a href="#安装和配置-Maven" class="headerlink" title="安装和配置 Maven"></a>安装和配置 Maven</h2><blockquote><p>因为我们打包时需要使⽤ Maven 来构建和编译代码，因此我们需要安装 Maven。</p><p><strong>注意</strong>：Maven 版本的选择最好跟开发环境一致，也就是开发团队统一使用是哪个版本的 Maven，就最好安装哪个版本。否则可能会出现各种意想不到的问题。</p><p>本次我使用的是 Maven3.8.1，如果你安装的是最新版，则直接去官方网站下载即可。如果是历史版本，可以在这里去找。</p><p><a href="https://archive.apache.org/dist/maven/maven-3/">https://archive.apache.org/dist/maven/maven-3/</a></p></blockquote><h3 id="安装-Maven"><a href="#安装-Maven" class="headerlink" title="安装 Maven"></a>安装 Maven</h3><blockquote><p>本次我们将 Maven 安装在<code>/opt</code>目录下。</p></blockquote><ul><li><p>下载 Maven 二进制包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入 opt 目录</span><br>cd /opt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载软件包</span><br>wget https://archive.apache.org/dist/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>解压包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar zxvf apache-maven-3.8.1-bin.tar.gz<br></code></pre></td></tr></table></figure><p>解压后会在目录下多一个<code>apache-maven-3.8.1</code>目录。这里就是我们解压好的 Maven 软件。</p></li><li><p>配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/profile<br></code></pre></td></tr></table></figure><p>前面我们已经配置过 JDK 的环境变量了，在它的下方我们继续添加 Maven 的环境变量。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># SET MAVEN ENVIRONMENT</span><br>MAVEN_HOME=/opt/apache-maven-3.8.1<br><span class="hljs-built_in">export</span> MAVEN_HOME<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$MAVEN_HOME</span>/bin<br></code></pre></td></tr></table></figure><p>配置完成后，重载配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile<br></code></pre></td></tr></table></figure></li><li><p>检查 Maven 是否配置成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn --version<br></code></pre></td></tr></table></figure><p>命令执行结果如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle">-- console log --<br>Apache Maven <span class="hljs-number">3.8</span>.<span class="hljs-number">1</span> (<span class="hljs-number">9</span>b58d2bad23a66be161c4664ef21ce219c2c8584)<br>Maven home: <span class="hljs-regexp">/opt/</span>apache-maven-<span class="hljs-number">3.8</span>.<span class="hljs-number">1</span><br>Java version: <span class="hljs-number">1.8</span>.<span class="hljs-number">0</span>_362, vendor: Red Hat, Inc., <span class="hljs-keyword">runtime</span>: <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/jvm/</span>java-<span class="hljs-number">1.8</span>.<span class="hljs-number">0</span>-openjdk-<span class="hljs-number">1.8</span>.<span class="hljs-number">0.362</span>.b08-<span class="hljs-number">1</span>.el7_9.x86_64/jre<br><span class="hljs-keyword">Default</span> locale: en_US, platform encoding: UTF-<span class="hljs-number">8</span><br>OS name: <span class="hljs-string">&quot;linux&quot;</span>, version: <span class="hljs-string">&quot;3.10.0-862.el7.x86_64&quot;</span>, arch: <span class="hljs-string">&quot;amd64&quot;</span>, family: <span class="hljs-string">&quot;unix&quot;</span><br></code></pre></td></tr></table></figure><p>至此 Maven 环境就安装成功了，下一章节开始配置 Maven 的 <code>settings.xml</code>。</p></li></ul><h3 id="配置-Maven"><a href="#配置-Maven" class="headerlink" title="配置 Maven"></a>配置 Maven</h3><ul><li><p>新建一个目录作为 Maven 本地仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">新建目录</span><br>mkdir -p /opt/maven_repository &amp;&amp; cd /opt &amp;&amp; ls<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">给目录授权，这一步一定要做，否则无法下载依赖。</span><br>chmod -R o+r+w maven_repository<br>chmod o+x+w maven_repository<br></code></pre></td></tr></table></figure></li><li><p>修改<code>settings.xml</code>配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入配置目录</span><br>cd /opt/apache-maven-3.8.1/conf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">打开配置文件</span><br>vi settings.xml<br></code></pre></td></tr></table></figure><p>这里我们主要修改这几个配置</p><ul><li>localRepository：本地仓库路径（就是我们第一步创建的那个目录的全路径）</li><li>mirrors：在这里配置阿里云的 Maven 镜像仓库。因为官方仓库下载资源比较慢。需要注意的是阿里云的镜像仓库地址一定要用 http，不要使用 https 否则会有证书的问题，倒是无法访问。</li></ul><p>我这里去除掉一些无用的注释之后，完整的配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.2.0&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- localRepository --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>/opt/maven_repository<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- pluginGroups --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">pluginGroups</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">pluginGroups</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- proxies --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">proxies</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">proxies</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- servers --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servers</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servers</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- mirrors --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;mirror&gt;</span><br><span class="hljs-comment">      &lt;id&gt;maven-default-http-blocker&lt;/id&gt;</span><br><span class="hljs-comment">      &lt;mirrorOf&gt;external:http:*&lt;/mirrorOf&gt;</span><br><span class="hljs-comment">      &lt;name&gt;Pseudo repository to mirror external repositories initially using HTTP.&lt;/name&gt;</span><br><span class="hljs-comment">      &lt;url&gt;http://0.0.0.0/&lt;/url&gt;</span><br><span class="hljs-comment">      &lt;blocked&gt;true&lt;/blocked&gt;</span><br><span class="hljs-comment">    &lt;/mirror&gt; --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- profiles --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- activeProfiles --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：默认配置中包含了一个官方仓库的镜像，可以将其删除或注释掉。</p><p>如果直接在服务器上操作觉得麻烦，可以先将配置文件备份一份。然后将文件下载到自己的电脑上编辑完之后，再上传到服务器覆盖掉之前的文件。</p></li></ul><h2 id="Jenkins-全局配置"><a href="#Jenkins-全局配置" class="headerlink" title="Jenkins 全局配置"></a>Jenkins 全局配置</h2><h3 id="配置全局环境变量"><a href="#配置全局环境变量" class="headerlink" title="配置全局环境变量"></a>配置全局环境变量</h3><p>进入<code>Dashboard/系统管理/系统配置</code>。找到<code>全局属性</code>配置项，勾选环境变量，在这里添加三个环境变量。</p><table><thead><tr><th>键</th><th>值</th></tr></thead><tbody><tr><td>JAVA_HOME</td><td>&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-1.8.0-openjdk</td></tr><tr><td>MAVEN_HOME</td><td>&#x2F;opt&#x2F;apache-maven-3.8.1</td></tr><tr><td>PATH+EXTRA</td><td>$MAVEN_HOME&#x2F;bin</td></tr></tbody></table><p>配置这三个环境变量的⽤途，和在系统中配置环境变量的⽤途类似，系统中配置环境变量是为了让系统识别到相关软件， Jenkins 中配置这三个环境变量，是为了让 Jenkins 识别到 JDK 和 Maven。</p><h3 id="配置全局工具"><a href="#配置全局工具" class="headerlink" title="配置全局工具"></a>配置全局工具</h3><blockquote><p>这里主要配置的是 JDK、Git、Maven 三个工具。因为 Jenkins 打包需要用到这些软件中的某些工具。这有点儿类似我们在 IDEA 中配置这些工具一样。</p><p>其中 Git 再安装完插件之后，会自动产生一个面板，JDK、Maven 需要点一下新增按钮。</p></blockquote><ul><li><p>JDK 配置</p><table><thead><tr><th>配置项</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>JDK 别名</td><td>java-1.8.0-openjdk</td><td>只是一个配置的别名，可以随便定义。</td></tr><tr><td>JAVA_HOME</td><td>&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-1.8.0-openjdk</td><td>这里配置我们前面安装的 JDK 路径。</td></tr><tr><td>自动安装</td><td>取消勾选</td><td>这里提供了一个自动安装 JDK 的方法。建议自己装，不要使用自动。</td></tr></tbody></table></li><li><p>Git 配置</p><table><thead><tr><th>配置项</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>Name</td><td>Git</td><td>只是一个配置的别名，可以随便定义。</td></tr><tr><td>Path to Git executable</td><td>&#x2F;usr&#x2F;bin&#x2F;git</td><td>Git 应用程序路径，Linux 可以使用<code>whereis git</code>命令查看。</td></tr><tr><td>自动安装</td><td>取消勾选</td><td>建议自己装，不要使用自动。</td></tr></tbody></table></li><li><p>Maven 配置</p><table><thead><tr><th>配置项</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>Name</td><td>apache-maven-3.8.1</td><td>只是一个配置的别名，可以随便定义。</td></tr><tr><td>MAVEN_HOME</td><td>&#x2F;opt&#x2F;apache-maven-3.8.1</td><td>这里配置我们前面安装的 Maven 路径。</td></tr><tr><td>自动安装</td><td>取消勾选</td><td>建议自己装，不要使用自动。</td></tr></tbody></table></li></ul><h3 id="配置-Docker-宿主机"><a href="#配置-Docker-宿主机" class="headerlink" title="配置 Docker 宿主机"></a>配置 Docker 宿主机</h3><blockquote><p>这里需要先安装<code>docker 和 CloudBees Docker Build and Publish</code>插件。</p></blockquote><p>进入<code>Dashboard/系统管理/节点管理/Configure Clouds(有的显示配置集群)</code>。如果找不到可以使用 URL 进入，比如：<a href="http://127.0.0.1:8080/configureClouds/%E3%80%82">http://127.0.0.1:8080/configureClouds/。</a></p><p>界面中有一个<code>Add a new cloud</code>的下拉框，点开之后选择<code>Docker</code>。这时会出现一个配置面板，给配置起一个名字，然后点击<code>Docker Cloud Details...</code>按钮。此时会发现增加了很多配置项，我们主要配置的是下面几项。</p><table><thead><tr><th>配置项</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>Docker Host URI</td><td>tcp:&#x2F;&#x2F;&lt;Docker 宿主机 IP 地址&gt;:2376</td><td>配置用于打包的 Docker 服务器。</td></tr><tr><td>Enabled</td><td>勾选</td><td>开启云打包</td></tr><tr><td>Server credentials</td><td>无</td><td>Docker 服务器登录凭证，没有可以不填。</td></tr></tbody></table><p>另外，面板中还有一个<code>Test Connection</code>按钮，可以通过此按钮查看 Jenkins 是否可以连接到 Docker 宿主机。</p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><blockquote><p>这里给出一些我在实际使用过程中用到的一些插件。安装过程可能会因为网络的原因导致安装失败。</p><p><strong>建议：</strong>插件的安装最好是去官方仓库手动下载，然后上传到 Jenkins 中。</p><p>官方仓库地址：<a href="https://plugins.jenkins.io/">https://plugins.jenkins.io/</a></p></blockquote><p>安装方法也很简单，和上一步一样，找到 <code>Manage Plugin</code>，这次选择的是<code>Available</code>，然后在搜索框中搜索自己想要安装的插件，勾选中之后，点击<code>Install without restart</code>。如果安装过简体中文语言包就比较简单了。可以根据中文提示安装。</p><table><thead><tr><th>插件名称</th><th>版本号</th><th>说明</th></tr></thead><tbody><tr><td>Localization: Chinese (Simplified)</td><td>1.0.24</td><td>Jenkins 的简体中文语言包</td></tr><tr><td>Maven Integration</td><td>3.21</td><td>Maven 支持插件</td></tr><tr><td>Pipeline: SCM Step</td><td>400.xxxxx</td><td>流水线版本控制器</td></tr><tr><td>Git</td><td>4.12.1</td><td>Git 支持插件，安装前需要先安装 Pipeline: SCM Step</td></tr><tr><td>Git Parameter</td><td>0.9.18</td><td>Git 构建参数支持，此插件可以在构建过程动态选择分支。</td></tr><tr><td>Docker</td><td>1.3.0</td><td>Docker 支持插件</td></tr><tr><td>CloudBees Docker Build and Publish</td><td>1.4.0</td><td>自动化构建和推送 Docker 镜像，支持各种不同的 Dockerfile 定义方式，在 Jenkins 中直接预览构建日志，可以对镜像进行验证和扫描，并将镜像推送到 Docker Hub 或另一个私有 Registry 中。</td></tr><tr><td>Docker Pipeline</td><td>563.xxxxxxx</td><td>支持 Jenkins Pipeline 执行所有 Docker 操作</td></tr></tbody></table><h2 id="使用-Jenkins-打包"><a href="#使用-Jenkins-打包" class="headerlink" title="使用 Jenkins 打包"></a>使用 Jenkins 打包</h2><blockquote><p>我这里使用的是自建的 Harbor 仓库。如果你使用的是阿里云仓库，也和这类似。只是配置的账号不同而已。</p></blockquote><h3 id="创建凭证"><a href="#创建凭证" class="headerlink" title="创建凭证"></a>创建凭证</h3><blockquote><p>这里只需要创建一次，以后打包直接使用即可。</p></blockquote><p>进入<code>Dashboard/系统管理/Manage Credentials</code>，在<code>Stores scoped to Jenkins</code>面板中点击<code>域</code>列下的<code>全局</code>，此时会进入到一个凭据的配置页面。点击添加凭据，会显示一个新凭据的面板。</p><p>凭据支持的类型很多，最长用的是<code>Username with password</code>，即用户名和密码的凭据。</p><p>我们依次添加 Harbor 仓库账户和 Git 仓库账户。注意填写描述，否则将来无法区分是哪个账户。</p><h3 id="新建打包任务"><a href="#新建打包任务" class="headerlink" title="新建打包任务"></a>新建打包任务</h3><p>进入<code>Dashboard/新建任务</code>，输入任务名称，这个名称可以自定义只要便于区分即可。我的习惯是以工程名来命名后面跟着发布环境的后缀。比如：mall-manage-service-test，即商城系统的管理服务，环境是测试环境。输入完名称后，选择<code>构建一个maven项目</code>，点击确定按钮。</p><p>接下来会进入到具体的配置界面，这里我们分面板来介绍配置细节。</p><h4 id="基础配置（General）"><a href="#基础配置（General）" class="headerlink" title="基础配置（General）"></a>基础配置（General）</h4><ul><li><p>丢弃旧的构建：此处配置的是构建记录的保留策略。</p><table><thead><tr><th>参数项</th><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>保持构建的天数</td><td>3</td><td>无</td></tr><tr><td>保持构建的最大个数</td><td>3</td><td>无</td></tr></tbody></table></li><li><p>参数化构建过程：这里主要配置构建过程所需要的参数。本次我们添加一个 Git 参数。使用 Git 参数需要提前安装好插件。</p><table><thead><tr><th>参数项</th><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>名称</td><td>BRANCH</td><td>参数的名称</td></tr><tr><td>描述</td><td>Git 分支</td><td>参数的说明</td></tr><tr><td>参数类型</td><td>分支</td><td>参数的类型</td></tr><tr><td>默认值</td><td>origin&#x2F;master</td><td>Git 仓库的默认分支</td></tr></tbody></table></li></ul><p>除了上面几个需要配置的以外，其他的选项都取消勾选。</p><h4 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h4><ul><li><p>Git</p><p><code>Repositories</code>：仓库配置</p><table><thead><tr><th>参数项</th><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>Repository URL</td><td>http:&#x2F;&#x2F;[IP 或域名]&#x2F;项目组&#x2F;项目名.git</td><td>代码在 Git 仓库的地址。</td></tr><tr><td>Credentials</td><td>选择前面配置好的 Git 凭据。</td><td>Git 仓库的登录凭证。</td></tr></tbody></table><p><code>Branches to build</code>：分支构建参数</p><table><thead><tr><th>参数项</th><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>指定分支（为空时代表 any）</td><td>$BRANCH</td><td>分支参数，使用上一步配置的分支参数，格式：$参数名称。</td></tr></tbody></table></li></ul><h4 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a>构建触发器</h4><p>取消<code>Build whenever a SNAPSHOT dependency is built</code>勾选。</p><h4 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h4><p>无需配置</p><h4 id="Pre-Steps"><a href="#Pre-Steps" class="headerlink" title="Pre Steps"></a>Pre Steps</h4><p>无需配置（这里主要配置 Maven 打包之前的操作）</p><h4 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h4><p>此处配置的是 Maven 构建配置</p><table><thead><tr><th>参数项</th><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>Root POM</td><td>pom.xml</td><td>指定 POM 文件所在的路径。</td></tr><tr><td>Goals and options</td><td>clean package</td><td>全局操作，这里配置的是 Maven 的打包命令。无需使用 mvn。</td></tr></tbody></table><h4 id="Post-Steps"><a href="#Post-Steps" class="headerlink" title="Post Steps"></a>Post Steps</h4><p>这里主要配置 Maven 打包之后的操作。</p><p>选择<code>Run only if build succeeds</code>，即：只有在构建成功后才执行此步骤。点击下方的<code>Add post-build step</code>下拉框，</p><p>选择<code>Build / Publish Docker Image</code>，添加一个构建 Docker 镜像的面板。</p><table><thead><tr><th>参数项</th><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>Directory for Dockerfile</td><td>无</td><td>Dockerfile 文件路径，不写则从根目录找。</td></tr><tr><td>Cloud</td><td>选择前面配置好的 Docker 宿主机</td><td>用于云打包的 Docker 宿主机。</td></tr><tr><td>image</td><td>镜像仓库地址&#x2F;镜像名:${POM_VERSION}</td><td>镜像全名，${POM_VERSION}是读取 POM 的版本号。</td></tr><tr><td>Build Args</td><td>无</td><td>构建参数</td></tr><tr><td>Push image</td><td>勾选</td><td>启用推送镜像配置</td></tr><tr><td>Registry Credentials</td><td>选择前面配置好的镜像仓库凭证</td><td>Docker 镜像仓库的登录凭证。</td></tr><tr><td>Clean local images</td><td>勾选</td><td>打包完成后清除本地镜像。</td></tr><tr><td>Attempt to remove images when jenkins deletes the run</td><td>勾选</td><td>打包完成后尽可能清除已运行的 Docker 镜像。</td></tr></tbody></table><p>其他选项无需勾选。至此，所有配置结束。点击<code>保存</code>按钮完成打包配置。</p><h3 id="开始打包"><a href="#开始打包" class="headerlink" title="开始打包"></a>开始打包</h3><ul><li>找到我们配置好的打包配置，点击进入。</li><li>点击<code>Build with Parameters</code>，进入参数化构建面板。</li><li>选择分支，即我们基于哪一个分支进行打包。</li><li>点击<code>开始构建</code>，等待 1 ～ 2 秒会在左侧的构建历史中看到正在打包的进度，点击进度条可以进入到打包日志页面。注意观察每一步输出的打包日志，没有报错，直到最后镜像成功推送到镜像仓库。这样就完成了整个的打包过程。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>整个 Jenkins 安装配置过程，有这么几个地方是容易出问题的。</p><ul><li>各个必须的组件，如 Maven、JDK 的版本兼容问题。</li><li>插件的安装和插件支持的版本问题。</li><li>Maven 的 settings.xml 配置问题。</li><li>宿主机端口开启，及宿主机配置问题。</li><li>Jenkins 集成打包环境问题，如：Maven、JDK、Git。</li></ul><p><strong>注意：</strong>上面提到的这些，任何一个环节配置不好都有可能导致最后无法成功打包。因此整个 Jenkins 的安装、配置过程最好是仔细阅读文档。避免细节问题没注意，导致无法成功打包。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>Jenkins</tag>
      
      <tag>DevOps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Hexo + Fluid 搭建个人博客</title>
    <link href="/2023/04/20/%E4%BD%BF%E7%94%A8Hexo-Fluid%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/04/20/%E4%BD%BF%E7%94%A8Hexo-Fluid%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建篇"><a href="#搭建篇" class="headerlink" title="搭建篇"></a>搭建篇</h1><h2 id="瞎白话"><a href="#瞎白话" class="headerlink" title="瞎白话"></a>瞎白话</h2><blockquote><p>每个程序员都应该有一个属于自己的博客，一方面可以提升自己的知名度，另一方面可以锻炼自己的写作能力。对于程序员来说，能做、能写、能讲是非常重要的。我在搭建自己的个人博客时，遇到了很多的坑，写这篇文章是为了记录下我搭建博客的过程。一方面是记录一下防止以后遗忘，另一方面也希望通过这篇文章帮助更多想要搭建博客的同学少走弯路。</p><p>废话不多说，下面开始上才艺。</p></blockquote><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>这里需要说明 Hexo 的几点好处：</p><ol><li>搭建简单而且免费。</li><li>Hexo 可以将 Markdown 生成纯静态网页，我们只需要按照规则写 Markdown 文档，它能帮助我们生成网站的页面。纯静态网站的好处是可以零成本（付费方面）部署。</li><li>配置简单且配置文件有中文注释，官方还提供中文文档。有些复杂的配置是因为要对 Hexo 二次开发或使用某些主题比较复杂，如果没有这些诉求，整个搭建过程是非常简单的。</li></ol><p>最后提供一个官方文档的地址</p><p>官方中文文档：<a href="https://hexo.io/zh-cn/docs/index.html">https://hexo.io/zh-cn/docs/index.html</a></p></blockquote><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>Hexo 安装之前需要一些环境的支持。下面我用列表给大家整理出来了。</p><table><thead><tr><th>软件名</th><th>用途</th></tr></thead><tbody><tr><td>Node.js</td><td>Hexo 是基于 Node.js 开发的，因此需要安装 Node.js 环境。官方说 Node.js 版本需不低于 10.13，我建议使用 Node.js 12.0 及以上版本或安装最新的。</td></tr><tr><td>Git</td><td>Git 是一个分布式的版本控制软件，Hexo 会使用 Git 从 GitHub 上下载一些资源。</td></tr><tr><td>Yarn</td><td>（可选）Yarn 是一个 Node.js 的包管理器，我本人比较习惯使用 Yarn。</td></tr></tbody></table><p>这里就不介绍 Node.js 和 Git 的安装了，如果这两个都不会使用，建议还是先学习一下再来阅读本文。另外，后面的安装过程我会提供 npm 和 yarn 两种命令的安装方式，自己按需选择就好。</p><h3 id="安装-Hexo-客户端"><a href="#安装-Hexo-客户端" class="headerlink" title="安装 Hexo 客户端"></a>安装 Hexo 客户端</h3><p>基本环境安装完成后，就可以使用 npm 安装 Hexo 了。</p><p>NPM 安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>Yarn 安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yarn install -g hexo-cli<br></code></pre></td></tr></table></figure><p><em><strong>注意：由于网络环境的问题，中国大陆访问官方仓库比较慢，想要提速就需要科学上网。因此，我们需要将 npm 或 yarn 的镜像源改成国内镜像源。修改方法可以自己去查询相关资料。</strong></em></p><p>Hexo 客户端的安装非常简单，一行命令就搞定了。</p><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><blockquote><p>注意：如果你给全局的<code>node_modules</code>目录设置过环境变量，那么可以直接使用<code>hexo</code>命令，否则可以在命令前面加上<code>npx</code>。最好的办法就是在命令终端输入<code>hexo</code>，看看能不能找到命令，如果不行就使用<code>npx hexo</code>。</p></blockquote><ol><li><p>新建博客项目的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p &lt;目录名&gt;<br></code></pre></td></tr></table></figure><p><code>-p</code> 的作用是如果没有则新建一个目录，比如我们创建目录的命令是<code>mkdir -p ~/blog/github</code>，如果<code>blog</code>目录不存在，则会新建。</p><p>如果你使用的是 Windows 系统，可以手动创建目录，也可以使用 <code>Git Bash</code> 命令窗口。<code>Git Bash</code>命令窗口中可以使用 Linux 命令。</p></li><li><p>使用 hexo 初始化项目</p><p>我这里创建了一个<code>hexo-demo</code>作为项目目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入目录</span><br>cd hexo-demo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化项目</span><br>hexo init<br></code></pre></td></tr></table></figure><p>初始化时会提示以下信息</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- console log --</span><br><span class="hljs-keyword">INFO</span>  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git<br><span class="hljs-keyword">INFO</span>  Install dependencies<br><span class="hljs-built_in">warning</span> hexo &gt; warehouse &gt; cuid@<span class="hljs-number">2.1</span><span class="hljs-number">.8</span>: Cuid <span class="hljs-keyword">and</span> other k-sortable <span class="hljs-keyword">and</span> non-cryptographic ids (Ulid, ObjectId, KSUID, <span class="hljs-keyword">all</span> UUIDs) are <span class="hljs-keyword">all</span> insecure. Use @paralleldrive/cuid2 <span class="hljs-keyword">instead</span>.<br><span class="hljs-built_in">warning</span> hexo-renderer-stylus &gt; stylus &gt; css &gt; source-map-resolve@<span class="hljs-number">0.6</span><span class="hljs-number">.0</span>: See https://github.com/lydell/source-map-resolve#deprecated<br><span class="hljs-keyword">INFO</span>  <span class="hljs-keyword">Start</span> blogging <span class="hljs-keyword">with</span> Hexo!<br></code></pre></td></tr></table></figure><p>信息中出现了两个警告，可以不用管他，不影响使用。</p><p>初始化完成后，我们使用 <code>ls</code> 命令或打开目录查看，会看到下面这些文件：</p><table><thead><tr><th>文件名</th><th>说明</th></tr></thead><tbody><tr><td>_config.landscape.yml</td><td>Hexo 主题配置文件，landscape 是 Hexo 默认主题。</td></tr><tr><td>_config.yml</td><td>Hexo 的主配置文件。</td></tr><tr><td>node_modules</td><td>Hexo 项目的包。</td></tr><tr><td>package.json</td><td>包配置，所有基于 Node.js 的项目都会有这个文件。</td></tr><tr><td>scaffolds</td><td>Hexo 的模版目录，它用于定义创建文件时的模版。</td></tr><tr><td>source</td><td>Hexo 资源目录，资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</td></tr><tr><td>themes</td><td>Hexo 主题目录，我们使用到的一些第三方主题会放到这里。Hexo 会根据主题配置来生成静态页面。</td></tr></tbody></table></li><li><p>启动项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo server --debug<br></code></pre></td></tr></table></figure><p>启动成功后，会在下方看到这样一条日志</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">03</span>:<span class="hljs-number">43</span>:<span class="hljs-number">26</span>.<span class="hljs-number">937</span> INFO  Hexo is running at http://localhost:<span class="hljs-number">4000</span>/ . Press Ctrl+C to stop.<br></code></pre></td></tr></table></figure><p>我们可以使用浏览器访问<code>http://localhost:4000/</code>来查看我们的博客。如图：</p><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304201146594.png" alt="image-20230420114650486"></p></li></ol><p>至此，我们的博客就搭建成功了。</p><h2 id="Hexo-个性化定制"><a href="#Hexo-个性化定制" class="headerlink" title="Hexo 个性化定制"></a>Hexo 个性化定制</h2><blockquote><p>前面我们成功搭建了一个博客，但这个博客是官方默认的例子。我们想要打造自己的博客，还需要进行一些定制。</p></blockquote><h3 id="基本定制"><a href="#基本定制" class="headerlink" title="基本定制"></a>基本定制</h3><p>我们需要修改博客目录下的<code>_config.yml</code>文件，如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 网站标题</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">技术社区</span><br><span class="hljs-comment"># 副标题</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">好记性不如烂键盘</span><br><span class="hljs-comment"># 网站简介</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">随便写写</span><br><span class="hljs-comment"># SEO 关键词（可选）</span><br><span class="hljs-attr">keywords:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">技术</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Java</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Spring</span><br><span class="hljs-comment"># 网站作者</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">Kiti</span><br><span class="hljs-comment"># 网站语言，zh-CN: 简体中文</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br><span class="hljs-comment"># 时区（可选）</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>以上是部分需要修改的配置。</p><p>配置修改完成后，重启项目刷新页面会看到如下界面：</p><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304201201212.png" alt="image-20230420120103168"></p><p>这个界面中我们可以看到我们刚才修改的配置生效了。这里需要说明，官方默认模版的导航没有被国际化。其实也无所谓，因为官方主题是在太难看了，我们后面会使用一个第三方的主题。</p><h3 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h3><blockquote><p>本次我使用的主题是 Fluid。这纯属我的个人喜好，如果想要使用其他主题，可以去官方文档找。</p><p>官方主题地址：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p>Fluid 官方文档地址：<a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a></p></blockquote><h4 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h4><p>Fluid 安装有两种方式：</p><p><strong>方式一：使用包管理器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">npm</span><br>npm install --save hexo-theme-fluid<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">yarn</span><br>yarn add hexo-theme-fluid<br></code></pre></td></tr></table></figure><p><strong>方式二：下载最新 release</strong></p><p>下载地址：<a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">https://github.com/fluid-dev/hexo-theme-fluid/releases</a></p><p>下载完资源文件后，将资源文件解压到博客目录下的<code>themes</code>目录中，并将解压出的目录重命名为<code>fluid</code>。</p><p>这两种方式更推荐使用<code>方式一</code>，但如果想要对模版进行二次修改和定制，就最好选择方式二。否则将来重新迁出项目代码时，之前的修改就不存在了。如果没有定制化需求，就无所谓了。</p><h4 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h4><p>主题安装完成后，开始进行配置。</p><ol><li><p>复制主题目录下的<code>_config.yml</code>到博客根目录并命令为<code>_config.fluid.yml</code>，注意不要将默认配置覆盖了。如果不放心可以先创建好文件，然后将主题的配置内容复制到新文件中。</p></li><li><p>修改<code>_config.yml</code>主配置文件，以下是要修改的内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 修改模版为 fluid</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span><br></code></pre></td></tr></table></figure></li><li><p>创建<code>关于页面</code></p><p>Fluid 需要一个关于页面，这个页面在 Hexo 初始化的时候是没有的，需要手动创建。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用创建命令</span><br>hexo new page about<br></code></pre></td></tr></table></figure><p>此时，Hexo 会在 source 目录下创建一个 about 目录，其中包含一个 index.md 的 Markdown 文件，这个文件就是我们的关于页面。</p><p>创建后，修改内容如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 标题<br><span class="hljs-section">layout: about</span><br><span class="hljs-section">---</span><br><br>这里写关于页的正文，支持 Markdown, HTML<br></code></pre></td></tr></table></figure></li><li><p>修改主题配置文件<code>_config.fluid.yml</code>，如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 页头</span><br><span class="hljs-comment"># Header</span><br><span class="hljs-comment">#---------------------------</span><br><br><span class="hljs-comment"># 导航栏的相关配置</span><br><span class="hljs-comment"># Navigation bar</span><br><span class="hljs-attr">navbar:</span><br>  <span class="hljs-comment"># 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示</span><br>  <span class="hljs-comment"># The title on the left side of the navigation bar. If empty, it is based on `title` in hexo config</span><br>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">技术社区</span><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 首页</span><br><span class="hljs-comment"># Home Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">index:</span><br>  <span class="hljs-comment"># 首页副标题的独立设置</span><br>  <span class="hljs-comment"># Independent config of home page subtitle</span><br>  <span class="hljs-attr">slogan:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 网站副标题</span><br>    <span class="hljs-attr">text:</span> <span class="hljs-string">好记性不如烂键盘</span><br></code></pre></td></tr></table></figure></li></ol><p>配置完成后重启服务，此时的界面如下：</p><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304201242826.png" alt="image-20230420124242767"></p><p>这样，我们就更换好了主题，是不是漂亮多了。</p><h2 id="开始你的创作"><a href="#开始你的创作" class="headerlink" title="开始你的创作"></a>开始你的创作</h2><blockquote><p>搭建好博客之后，我们就可以愉快的写文章了。</p><p><strong>特别说明</strong></p><p>_Markdown 无需插入图片的请跳过_。</p><p>使用 Markdown 编写文档时，难免会用到一些图片。这些图片本地查看倒是没什么问题，如果放到公网环境就访问不到了。因此最好是将图片上传到某个地方，然后再链接进来。也可以直接使用图床。</p><p>我平时使用的是 Typora 写文档，图床我用的是 PicGo + Git（Gitee 或 GitHub）。这里提一句，Gitee有防盗链，本地文件可以显示，但博客中无法显示。</p></blockquote><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new 这是我的第一篇文章<br></code></pre></td></tr></table></figure><p>此时会在<code>source/_posts</code>目录下自动创建一个<code>这是我的第一篇文章.md</code>的文档。</p><h3 id="编写内容"><a href="#编写内容" class="headerlink" title="编写内容"></a>编写内容</h3><p>你可以选择任意一款自己喜欢 Markdown 编辑器，编写的内容如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 这是我的第一篇文章 哈哈哈哈<br>date: 2023-04-20 12:46:25<br>tags: 番外篇<br>categories: 番外篇<br><span class="hljs-section">index<span class="hljs-emphasis">_img: https://d33wubrfki0l68.cloudfront.net/5997a40576f3beca7bbbd86fe79a795e9d520d8e/87f88/themes/screenshots/landscape.png</span></span><br><span class="hljs-emphasis"><span class="hljs-section">---</span></span><br><span class="hljs-emphasis"><span class="hljs-section"></span></span><br><span class="hljs-emphasis"><span class="hljs-section">这里是正文，请开始你的表演。</span></span><br></code></pre></td></tr></table></figure><p>文档头部参数说明：</p><ul><li>title：文档标题，会显示在列表中和文档详情页中。</li><li>date：文档创建日期，页面会根据时间降序。</li><li>tags：文档标签，访客可以通过标签来查找同标签文档。</li><li>categories：文档分类，访客可以通过分类来查找同类型文档。</li><li>index_img：首页图片，也就是封面图，它会显示在首页的文档列表中。图片最好是远程图片，否则可能无法加载。</li></ul><p>修改文档是不需要重启服务的，此时我们刷新一下页面就可以看到新内容了。如图：</p><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304201303250.png" alt="image-20230420130318186"></p><h1 id="部署篇"><a href="#部署篇" class="headerlink" title="部署篇"></a>部署篇</h1><h2 id="发布到-GitHub"><a href="#发布到-GitHub" class="headerlink" title="发布到 GitHub"></a>发布到 GitHub</h2><blockquote><p>我们将使用 GitHub Pages 来部署我们的个人博客。至于为什么是 GitHub，我的回答是：“不知道”。如果你非要问，我只能说：“因为大家都这样干”。你品，你细品！</p><p><strong>说明</strong></p><p>如果你无法使用 GitHub，请自行查阅其他部署方法。比如 Gitee。Gitee 的部署方法与此类似。另外，推送站点到 GitHub 需要科学上网。如果没有可以找一找其他的梯子，国内有人专门提供了上传 GitHub 的镜像网站。</p></blockquote><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>没有账户的自己去注册一个，其他就不多说了。登录到 GitHub 找到头像左边的加号图标，点击会弹出一个下拉菜单，选择<code>New repository</code>新建一个仓库。仓库名格式为：<code>&lt;GitHub用户名&gt;.github.io</code>，必须是这个名字，否则无法访问。仓库的访问策略设置成<code>Public</code>。</p><h3 id="创建-SSH-密钥"><a href="#创建-SSH-密钥" class="headerlink" title="创建 SSH 密钥"></a>创建 SSH 密钥</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;&lt;GitHub注册时的邮箱&gt;&quot;<br></code></pre></td></tr></table></figure><p>Windows 可以使用<code>Git Bash</code>工具。生成密钥时会有一些要填写的信息，一路回车就可以了。</p><p>生成号之后，可以使用<code>cat ~/.ssh/id_rsa.pub</code>查看并复制公钥。</p><h3 id="配置密钥到-GitHub"><a href="#配置密钥到-GitHub" class="headerlink" title="配置密钥到 GitHub"></a>配置密钥到 GitHub</h3><p>在 GitHub 页面点击头像，在下拉菜单中选择<code>Settings</code>。然后在左侧的列表中找到<code>SSH and GPG keys</code>，如果换名字了，可以找一下 SSH相关的选项。进入页面后点击<code>New SSH key</code>按钮来新建一个密钥。如图：</p><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304201403519.png" alt="image-20230420133400602"></p><ul><li>Title：这里填写的是密钥的标题，便于我们区分各种密钥。标题最好用英文。</li><li>Key type：密钥类型，默认就好。</li><li>Key：密钥，此处填写的就是我们在本地生成号的密钥内容（上一步复制的）。</li></ul><p>点击<code>Add SSH key</code>按钮，保存新密钥。</p><h3 id="Hexo-部署配置"><a href="#Hexo-部署配置" class="headerlink" title="Hexo 部署配置"></a>Hexo 部署配置</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><blockquote><p>如果想要使用 Hexo + Git 自动部署，则需要安装<code>hexo-deployer-git</code>插件。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">NPM</span><br>npm install --save hexo-deployer-git<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">yarn</span><br>yarn add hexo-deployer-git<br></code></pre></td></tr></table></figure><h4 id="修改部署配置"><a href="#修改部署配置" class="headerlink" title="修改部署配置"></a>修改部署配置</h4><p>编辑<code>_config.yml</code>主配置文件，主要修改内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br><span class="hljs-comment"># 修改为 Git</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-comment"># 新增，配置内容为 GitHub 的仓库地址</span><br>    <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:&lt;GitHub用户名&gt;/&lt;GitHub用户名&gt;.github.io.git</span><br>    <span class="hljs-comment"># 新增，配置内容为 main，就是 GitHub 的 master 分支</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><h4 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">清除旧的打包</span><br>hexo clean<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">生成新的包</span><br>hexo generate<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">发布到 GitHub</span><br>hexo deploy<br></code></pre></td></tr></table></figure><p>也可以将命令简化写到一行来执行，比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><p>这条命令会先清理，然后打包，最后推送到 GitHub。部署完成后，进入到 GitHub 仓库，会看到推送上去的站点文件。</p><h4 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h4><p>我们在浏览器输入：<code>https://&lt;GitHub用户名&gt;.github.io.git</code>，就会看到我们的博客了。如果访问出现 404，那可能是因为 GitHub 在进行认证和检查。等待一段时间刷新页面就可以了。如果长时间 404，那就需要检查一下，是不是哪里配置不对。或者去网上找一找有没有类似的解决办法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>总体来说，搭建个人博客没有什么技术难度。无非是网络环境的各种不支持导致无法正确搭建。</p><p>本文主要是讲解了博客的搭建和部署过程，至于一些私人定制的东西还是尽可能的去参考官方文档或一些网络资料。根据自己的需求逐步去完善。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>番外篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>个人博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker Compose 部署 Nacos 集群</title>
    <link href="/2023/04/19/DockerCompose%E9%83%A8%E7%BD%B2Nacos%E9%9B%86%E7%BE%A4/"/>
    <url>/2023/04/19/DockerCompose%E9%83%A8%E7%BD%B2Nacos%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-Compose-部署-Nacos-集群"><a href="#Docker-Compose-部署-Nacos-集群" class="headerlink" title="Docker Compose 部署 Nacos 集群"></a>Docker Compose 部署 Nacos 集群</h1><h2 id="节点规划"><a href="#节点规划" class="headerlink" title="节点规划"></a>节点规划</h2><table><thead><tr><th>主机名</th><th>IP 地址</th><th>端口号</th></tr></thead><tbody><tr><td>nacos-nginx</td><td>172.16.1.180</td><td>8045</td></tr><tr><td>nacos-server01</td><td>172.16.1.180</td><td>8846</td></tr><tr><td>nacos-server02</td><td>172.16.1.180</td><td>8847</td></tr><tr><td>nacos-server03</td><td>172.16.1.180</td><td>8848</td></tr><tr><td>nacos-mysql</td><td>172.16.1.180</td><td>3306</td></tr></tbody></table><h2 id="拉取-docker-镜像"><a href="#拉取-docker-镜像" class="headerlink" title="拉取 docker 镜像"></a>拉取 docker 镜像</h2><h3 id="镜像列表"><a href="#镜像列表" class="headerlink" title="镜像列表"></a>镜像列表</h3><table><thead><tr><th>镜像名</th><th>版本号</th></tr></thead><tbody><tr><td>nginx</td><td>1.21.1</td></tr><tr><td>nacos&#x2F;nacos-server</td><td>2.2.0</td></tr><tr><td>mysql</td><td>5.7.33</td></tr></tbody></table><h3 id="拉取命令"><a href="#拉取命令" class="headerlink" title="拉取命令"></a>拉取命令</h3><p>拉取 Nginx 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull nginx:1.21.1<br></code></pre></td></tr></table></figure><p>拉取 Nacos 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull nacos/nacos-server:2.2.0<br></code></pre></td></tr></table></figure><p>拉取 MySQL 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull mysql:5.7.33<br></code></pre></td></tr></table></figure><h2 id="部署容器"><a href="#部署容器" class="headerlink" title="部署容器"></a>部署容器</h2><h3 id="部署-MySQL"><a href="#部署-MySQL" class="headerlink" title="部署 MySQL"></a>部署 MySQL</h3><blockquote><p>如果已经安装过 MySQL 或拥有其他可用的 MySQL，则跳过此步骤。</p></blockquote><h4 id="编排-MySQL"><a href="#编排-MySQL" class="headerlink" title="编排 MySQL"></a>编排 MySQL</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><br><span class="hljs-attr">services:</span><br>    <span class="hljs-attr">mysql:</span><br>        <span class="hljs-attr">container_name:</span> <span class="hljs-string">MySQL5.7.33</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:5.7.33</span><br>        <span class="hljs-attr">environment:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_ROOT_PASSWORD=ok</span><br>        <span class="hljs-attr">volumes:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/mysql/conf:/etc/mysql</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/mysql/logs:/var/log/mysql</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/mysql/data:/var/lib/mysql</span><br>        <span class="hljs-attr">restart:</span> <span class="hljs-string">on-failure</span><br>        <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">3306</span><span class="hljs-string">:3306</span><br>        <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">stdin_open:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">tty:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><blockquote><p>重点说明：</p><p>环境变量 - 编排中的<code>MYSQL_ROOT_PASSWORD</code>环境变量指定了 MySQL 的 root 账户密码。</p><p>数据卷挂载 - 编排中需要挂载三部分内容，分别为：MySQL 配置、MySQL 日志、MySQL 数据文件。</p><p>重启策略 - 编排中设置的策略为<code>报错后重启</code>。</p><p>暴露端口 - ports 中的参数，左边为容器外部端口，即宿主机端口，右边为容器内部端口。</p><p>privileged - 为 true，则让容器内的 root 账户拥有真正的 root 权限。</p><p>stdin_open 和 tty - 为 true，则允许交互输入输出。</p></blockquote><h4 id="使用编排部署-MySQL"><a href="#使用编排部署-MySQL" class="headerlink" title="使用编排部署 MySQL"></a>使用编排部署 MySQL</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose -f &lt;编排文件路径&gt; up -d<br></code></pre></td></tr></table></figure><h4 id="初始化-Nacos-数据库"><a href="#初始化-Nacos-数据库" class="headerlink" title="初始化 Nacos 数据库"></a>初始化 Nacos 数据库</h4><h5 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database nacos-db;<br></code></pre></td></tr></table></figure><p>如果有 Navicat 、SQLYog 等图形化管理器，也可以使用其进行手工创建。</p><h5 id="nacos-db-表初始化"><a href="#nacos-db-表初始化" class="headerlink" title="nacos-db 表初始化"></a>nacos-db 表初始化</h5><p>初始化 sql 语句可以从 GitHub 上下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl https://raw.githubusercontent.com/alibaba/nacos/2.2.0/distribution/conf/mysql-schema.sql<br></code></pre></td></tr></table></figure><p>也可以复制以下脚本执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br> * Copyright 1999-2018 Alibaba Group Holding Ltd.<br> *<br> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br> * you may not use this file except in compliance with the License.<br> * You may obtain a copy of the License at<br> *<br> *      http://www.apache.org/licenses/LICENSE-2.0<br> *<br> * Unless required by applicable law or agreed to in writing, software<br> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br> * See the License for the specific language governing permissions and<br> * limitations under the License.<br> */<br><br>/******************************************/<br>/*   数据库全名 = nacos_config   */<br>/*   表名称 = config_info   */<br>/******************************************/<br>CREATE TABLE `config_info` (<br>  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,<br>  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,<br>  `group_id` varchar(128) DEFAULT NULL,<br>  `content` longtext NOT NULL COMMENT &#x27;content&#x27;,<br>  `md5` varchar(32) DEFAULT NULL COMMENT &#x27;md5&#x27;,<br>  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,<br>  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;修改时间&#x27;,<br>  `src_user` text COMMENT &#x27;source user&#x27;,<br>  `src_ip` varchar(50) DEFAULT NULL COMMENT &#x27;source ip&#x27;,<br>  `app_name` varchar(128) DEFAULT NULL,<br>  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;,<br>  `c_desc` varchar(256) DEFAULT NULL,<br>  `c_use` varchar(64) DEFAULT NULL,<br>  `effect` varchar(64) DEFAULT NULL,<br>  `type` varchar(64) DEFAULT NULL,<br>  `c_schema` text,<br>  `encrypted_data_key` text NOT NULL COMMENT &#x27;秘钥&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_info&#x27;;<br><br>/******************************************/<br>/*   数据库全名 = nacos_config   */<br>/*   表名称 = config_info_aggr   */<br>/******************************************/<br>CREATE TABLE `config_info_aggr` (<br>  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,<br>  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,<br>  `group_id` varchar(128) NOT NULL COMMENT &#x27;group_id&#x27;,<br>  `datum_id` varchar(255) NOT NULL COMMENT &#x27;datum_id&#x27;,<br>  `content` longtext NOT NULL COMMENT &#x27;内容&#x27;,<br>  `gmt_modified` datetime NOT NULL COMMENT &#x27;修改时间&#x27;,<br>  `app_name` varchar(128) DEFAULT NULL,<br>  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;增加租户字段&#x27;;<br><br><br>/******************************************/<br>/*   数据库全名 = nacos_config   */<br>/*   表名称 = config_info_beta   */<br>/******************************************/<br>CREATE TABLE `config_info_beta` (<br>  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,<br>  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,<br>  `group_id` varchar(128) NOT NULL COMMENT &#x27;group_id&#x27;,<br>  `app_name` varchar(128) DEFAULT NULL COMMENT &#x27;app_name&#x27;,<br>  `content` longtext NOT NULL COMMENT &#x27;content&#x27;,<br>  `beta_ips` varchar(1024) DEFAULT NULL COMMENT &#x27;betaIps&#x27;,<br>  `md5` varchar(32) DEFAULT NULL COMMENT &#x27;md5&#x27;,<br>  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,<br>  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;修改时间&#x27;,<br>  `src_user` text COMMENT &#x27;source user&#x27;,<br>  `src_ip` varchar(50) DEFAULT NULL COMMENT &#x27;source ip&#x27;,<br>  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;,<br>  `encrypted_data_key` text NOT NULL COMMENT &#x27;秘钥&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_info_beta&#x27;;<br><br>/******************************************/<br>/*   数据库全名 = nacos_config   */<br>/*   表名称 = config_info_tag   */<br>/******************************************/<br>CREATE TABLE `config_info_tag` (<br>  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,<br>  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,<br>  `group_id` varchar(128) NOT NULL COMMENT &#x27;group_id&#x27;,<br>  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;tenant_id&#x27;,<br>  `tag_id` varchar(128) NOT NULL COMMENT &#x27;tag_id&#x27;,<br>  `app_name` varchar(128) DEFAULT NULL COMMENT &#x27;app_name&#x27;,<br>  `content` longtext NOT NULL COMMENT &#x27;content&#x27;,<br>  `md5` varchar(32) DEFAULT NULL COMMENT &#x27;md5&#x27;,<br>  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,<br>  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;修改时间&#x27;,<br>  `src_user` text COMMENT &#x27;source user&#x27;,<br>  `src_ip` varchar(50) DEFAULT NULL COMMENT &#x27;source ip&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_info_tag&#x27;;<br><br>/******************************************/<br>/*   数据库全名 = nacos_config   */<br>/*   表名称 = config_tags_relation   */<br>/******************************************/<br>CREATE TABLE `config_tags_relation` (<br>  `id` bigint(20) NOT NULL COMMENT &#x27;id&#x27;,<br>  `tag_name` varchar(128) NOT NULL COMMENT &#x27;tag_name&#x27;,<br>  `tag_type` varchar(64) DEFAULT NULL COMMENT &#x27;tag_type&#x27;,<br>  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,<br>  `group_id` varchar(128) NOT NULL COMMENT &#x27;group_id&#x27;,<br>  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;tenant_id&#x27;,<br>  `nid` bigint(20) NOT NULL AUTO_INCREMENT,<br>  PRIMARY KEY (`nid`),<br>  UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),<br>  KEY `idx_tenant_id` (`tenant_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_tag_relation&#x27;;<br><br>/******************************************/<br>/*   数据库全名 = nacos_config   */<br>/*   表名称 = group_capacity   */<br>/******************************************/<br>CREATE TABLE `group_capacity` (<br>  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT &#x27;主键ID&#x27;,<br>  `group_id` varchar(128) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;Group ID，空字符表示整个集群&#x27;,<br>  `quota` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;配额，0表示使用默认值&#x27;,<br>  `usage` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;使用量&#x27;,<br>  `max_size` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;,<br>  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;聚合子配置最大个数，，0表示使用默认值&#x27;,<br>  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;,<br>  `max_history_count` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;最大变更历史数量&#x27;,<br>  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,<br>  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;修改时间&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `uk_group_id` (`group_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;集群、各Group容量信息表&#x27;;<br><br>/******************************************/<br>/*   数据库全名 = nacos_config   */<br>/*   表名称 = his_config_info   */<br>/******************************************/<br>CREATE TABLE `his_config_info` (<br>  `id` bigint(20) unsigned NOT NULL,<br>  `nid` bigint(20) unsigned NOT NULL AUTO_INCREMENT,<br>  `data_id` varchar(255) NOT NULL,<br>  `group_id` varchar(128) NOT NULL,<br>  `app_name` varchar(128) DEFAULT NULL COMMENT &#x27;app_name&#x27;,<br>  `content` longtext NOT NULL,<br>  `md5` varchar(32) DEFAULT NULL,<br>  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,<br>  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,<br>  `src_user` text,<br>  `src_ip` varchar(50) DEFAULT NULL,<br>  `op_type` char(10) DEFAULT NULL,<br>  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;,<br>  `encrypted_data_key` text NOT NULL COMMENT &#x27;秘钥&#x27;,<br>  PRIMARY KEY (`nid`),<br>  KEY `idx_gmt_create` (`gmt_create`),<br>  KEY `idx_gmt_modified` (`gmt_modified`),<br>  KEY `idx_did` (`data_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;多租户改造&#x27;;<br><br><br>/******************************************/<br>/*   数据库全名 = nacos_config   */<br>/*   表名称 = tenant_capacity   */<br>/******************************************/<br>CREATE TABLE `tenant_capacity` (<br>  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT &#x27;主键ID&#x27;,<br>  `tenant_id` varchar(128) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;Tenant ID&#x27;,<br>  `quota` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;配额，0表示使用默认值&#x27;,<br>  `usage` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;使用量&#x27;,<br>  `max_size` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;,<br>  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;聚合子配置最大个数&#x27;,<br>  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;,<br>  `max_history_count` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;最大变更历史数量&#x27;,<br>  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,<br>  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;修改时间&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `uk_tenant_id` (`tenant_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;租户容量信息表&#x27;;<br><br><br>CREATE TABLE `tenant_info` (<br>  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,<br>  `kp` varchar(128) NOT NULL COMMENT &#x27;kp&#x27;,<br>  `tenant_id` varchar(128) default &#x27;&#x27; COMMENT &#x27;tenant_id&#x27;,<br>  `tenant_name` varchar(128) default &#x27;&#x27; COMMENT &#x27;tenant_name&#x27;,<br>  `tenant_desc` varchar(256) DEFAULT NULL COMMENT &#x27;tenant_desc&#x27;,<br>  `create_source` varchar(32) DEFAULT NULL COMMENT &#x27;create_source&#x27;,<br>  `gmt_create` bigint(20) NOT NULL COMMENT &#x27;创建时间&#x27;,<br>  `gmt_modified` bigint(20) NOT NULL COMMENT &#x27;修改时间&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),<br>  KEY `idx_tenant_id` (`tenant_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;tenant_info&#x27;;<br><br>CREATE TABLE `users` (<br>`username` varchar(50) NOT NULL PRIMARY KEY,<br>`password` varchar(500) NOT NULL,<br>`enabled` boolean NOT NULL<br>);<br><br>CREATE TABLE `roles` (<br>`username` varchar(50) NOT NULL,<br>`role` varchar(50) NOT NULL,<br>UNIQUE INDEX `idx_user_role` (`username` ASC, `role` ASC) USING BTREE<br>);<br><br>CREATE TABLE `permissions` (<br>    `role` varchar(50) NOT NULL,<br>    `resource` varchar(255) NOT NULL,<br>    `action` varchar(8) NOT NULL,<br>    UNIQUE INDEX `uk_role_permission` (`role`,`resource`,`action`) USING BTREE<br>);<br><br>INSERT INTO users (username, password, enabled) VALUES (&#x27;nacos&#x27;, &#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;, TRUE);<br><br>INSERT INTO roles (username, role) VALUES (&#x27;nacos&#x27;, &#x27;ROLE_ADMIN&#x27;);<br></code></pre></td></tr></table></figure><h3 id="部署-Nacos-集群"><a href="#部署-Nacos-集群" class="headerlink" title="部署 Nacos 集群"></a>部署 Nacos 集群</h3><h4 id="编排-Nacos-集群"><a href="#编排-Nacos-集群" class="headerlink" title="编排 Nacos 集群"></a>编排 Nacos 集群</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><br><span class="hljs-attr">services:</span><br>    <span class="hljs-attr">nacos1:</span><br>        <span class="hljs-attr">container_name:</span> <span class="hljs-string">nacos-server01</span><br>        <span class="hljs-attr">hostname:</span> <span class="hljs-string">nacos-server01</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nacos/nacos-server:2.2.0</span><br>        <span class="hljs-attr">environment:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MODE=cluster</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">PREFER_HOST_MODE=hostname</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">NACOS_SERVERS=nacos-server01:8848</span> <span class="hljs-string">nacos-server02:8848</span> <span class="hljs-string">nacos-server03:8848</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">SPRING_DATASOURCE_PLATFORM=mysql</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_HOST=172.16.1.180</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_PORT=3306</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_USER=root</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_PASSWORD=ok</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_DB_NAME=nacos-db</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">JVM_XMS=128m</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">JVM_XMX=128m</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">JVM_XMN=128m</span><br>        <span class="hljs-attr">volumes:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/nacos/cluster-logs/nacos-server01:/home/nacos/logs</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/nacos/init.d:/home/nacos/init.d</span><br>        <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">8846</span><span class="hljs-string">:8848</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">9555</span><span class="hljs-string">:9555</span><br>        <span class="hljs-attr">restart:</span> <span class="hljs-string">on-failure</span><br><br>    <span class="hljs-attr">nacos2:</span><br>        <span class="hljs-attr">container_name:</span> <span class="hljs-string">nacos-server02</span><br>        <span class="hljs-attr">hostname:</span> <span class="hljs-string">nacos-server02</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nacos/nacos-server:2.2.0</span><br>        <span class="hljs-attr">environment:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MODE=cluster</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">PREFER_HOST_MODE=hostname</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">NACOS_SERVERS=nacos-server01:8848</span> <span class="hljs-string">nacos-server02:8848</span> <span class="hljs-string">nacos-server03:8848</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">SPRING_DATASOURCE_PLATFORM=mysql</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_HOST=172.16.1.180</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_PORT=3306</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_USER=root</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_PASSWORD=ok</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_DB_NAME=nacos-db</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">JVM_XMS=128m</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">JVM_XMX=128m</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">JVM_XMN=128m</span><br>        <span class="hljs-attr">volumes:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/nacos/cluster-logs/nacos-server02:/home/nacos/logs</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/nacos/init.d:/home/nacos/init.d</span><br>        <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">8847</span><span class="hljs-string">:8848</span><br>        <span class="hljs-attr">restart:</span> <span class="hljs-string">on-failure</span><br><br>    <span class="hljs-attr">nacos3:</span><br>        <span class="hljs-attr">container_name:</span> <span class="hljs-string">nacos-server03</span><br>        <span class="hljs-attr">hostname:</span> <span class="hljs-string">nacos-server03</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nacos/nacos-server:2.2.0</span><br>        <span class="hljs-attr">environment:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MODE=cluster</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">PREFER_HOST_MODE=hostname</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">NACOS_SERVERS=nacos-server01:8848</span> <span class="hljs-string">nacos-server02:8848</span> <span class="hljs-string">nacos-server03:8848</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">SPRING_DATASOURCE_PLATFORM=mysql</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_HOST=172.16.1.180</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_PORT=3306</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_USER=root</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_PASSWORD=ok</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_SERVICE_DB_NAME=nacos-db</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">JVM_XMS=128m</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">JVM_XMX=128m</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">JVM_XMN=128m</span><br>        <span class="hljs-attr">volumes:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/nacos/cluster-logs/nacos-server03:/home/nacos/logs</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/nacos/init.d:/home/nacos/init.d</span><br>        <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">8848</span><span class="hljs-string">:8848</span><br>        <span class="hljs-attr">restart:</span> <span class="hljs-string">on-failure</span><br></code></pre></td></tr></table></figure><blockquote><p>重要说明：</p><blockquote><p>环境变量说明</p><ul><li><p>MODE&#x3D;cluster</p><p>运行模式，默认为单机模式，cluster 为集群模式。</p></li><li><p>PREFER_HOST_MODE&#x3D;hostname</p><p>节点主机访问模式，hostname 为使用主机名访问。</p></li><li><p>NACOS_SERVERS&#x3D;nacos-server01:8848 nacos-server02:8848 nacos-server03:8848</p><p>Nacos 服务节点列表，本次搭建的是三节点集群。格式：主机名:端口号 或 IP:端口号。</p></li><li><p>SPRING_DATASOURCE_PLATFORM&#x3D;mysql</p><p>数据源平台，默认为空。mysql 为使用 MySQL 作为数据源。</p></li><li><p>MYSQL_SERVICE_HOST&#x3D;172.16.1.180</p><p>MySQL 的主机地址，注意不能使用 127.0.0.1，127.0.0.1 在部署 Docker 时指的是容器内的本地地址，而不是宿主机的本地地址。如果部署 MySQL 时，配置了 hostname ，也可以使用 hostname 作为地址。</p></li><li><p>MYSQL_SERVICE_PORT&#x3D;3306</p><p>MySQL 的端口号。</p></li><li><p>MYSQL_SERVICE_USER&#x3D;root</p><p>MySQL 的用户名。</p></li><li><p>MYSQL_SERVICE_PASSWORD&#x3D;ok</p><p>MySQL 的账户密码。</p></li><li><p>MYSQL_SERVICE_DB_NAME&#x3D;nacos-db</p><p>要连接的数据库名称。</p></li></ul><hr><ul><li><p>JVM_XMS&#x3D;128m</p></li><li><p>JVM_XMX&#x3D;128m</p></li><li><p>JVM_XMN&#x3D;128m</p><p>以上三个环境变量配置的是 Nacos 的 JVM，默认情况下 Nacos 分配的内存为 2G，如果是单机多容器部署，注意要加上此环境变量的配置，否则会一直重启。如果是多机单容器部署则不需要。</p></li></ul></blockquote><hr><blockquote><p>数据卷挂载说明</p><p>此次编排配置了两个挂载，分别为 Nacos 节点日志、Nacos 节点配置。其中节点日志为每个节点单独挂载了一个目录，节点配置则是三个节点共用一个配置，以保证三个节点的配置统一。</p><p>如果是多机环境，则每个节点的挂载各自独立，但如果修改其中一个主机的 nacos 节点配置，则最好将其他剩余节点的配置也统一修改。</p></blockquote></blockquote><h4 id="使用编排部署-Nacos-集群"><a href="#使用编排部署-Nacos-集群" class="headerlink" title="使用编排部署 Nacos 集群"></a>使用编排部署 Nacos 集群</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose -f &lt;编排文件路径&gt; up -d<br></code></pre></td></tr></table></figure><p>部署结束后，使用 docker logs 分别查看容器运行日志。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker logs -f &lt;容器ID&gt;<br></code></pre></td></tr></table></figure><p>如果返回如下内容，则说明此节点启动成功。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs text">         ,--.<br>       ,--.&#x27;|<br>   ,--,:  : |                                           Nacos 2.0.2<br>,`--.&#x27;`|  &#x27; :                       ,---.               Running in cluster mode, All function modules<br>|   :  :  | |                      &#x27;   ,&#x27;\   .--.--.    Port: 8848<br>:   |   \ | :  ,--.--.     ,---.  /   /   | /  /    &#x27;   Pid: 1<br>|   : &#x27;  &#x27;; | /       \   /     \.   ; ,. :|  :  /`./   Console: http://nacos-server01:8848/nacos/index.html<br>&#x27;   &#x27; ;.    ;.--.  .-. | /    / &#x27;&#x27;   | |: :|  :  ;_<br>|   | | \   | \__\/: . ..    &#x27; / &#x27;   | .; : \  \    `.      https://nacos.io<br>&#x27;   : |  ; .&#x27; ,&quot; .--.; |&#x27;   ; :__|   :    |  `----.   \<br>|   | &#x27;`--&#x27;  /  /  ,.  |&#x27;   | &#x27;.&#x27;|\   \  /  /  /`--&#x27;  /<br>&#x27;   : |     ;  :   .&#x27;   \   :    : `----&#x27;  &#x27;--&#x27;.     /<br>;   |.&#x27;     |  ,     .-./\   \  /            `--&#x27;---&#x27;<br>&#x27;---&#x27;        `--`---&#x27;     `----&#x27;<br><br>2021-07-27 11:21:15,725 INFO The server IP list of Nacos is [nacos-server01:8848, nacos-server02:8848, nacos-server03:8848]<br><br>2021-07-27 11:21:16,738 INFO Nacos is starting...<br><br>2021-07-27 11:21:16,738 INFO Nacos is starting...<br><br>2021-07-27 11:22:06,052 INFO Nacos started successfully in cluster mode. use external storage<br></code></pre></td></tr></table></figure><p>打开浏览器，分别输入：<code>http://&lt;ip&gt;:8846/nacos</code>、<code>http://&lt;ip&gt;:8847/nacos</code>、<code>http://&lt;ip&gt;:8848/nacos</code>，如果显示如下页面，则说明集群部署并启动成功。</p><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304191636701.png" alt="登录页"></p><p>输入默认账户和密码，即：<code>nacos</code>，用户名和密码一样。进入到管理后台。进入到<code>集群管理 -&gt; 节点列表</code>，页面显示如下：</p><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304191636356.png" alt="集群节点列表"></p><p>从页面中我们可以看到，三个节点的状态均为 UP（在线）。至此 Nacos 集群就搭建完毕了，接下来我们通过 Nginx 来为 Nacos 增加一个统一的访问入口，以便于后续的管理和维护。</p><p>我们可以在其中一个 Nacos 节点上创建一个配置文件，然后通过其他节点访问，如果都可以看到相同的配置文件，则说明集群可用。另外，创建完配置文件后，查看 MySQL 的 nacos-db 数据中的<code>config_info</code>表，如果可以看到我们新建的配置，则说明 nacos 可以使用 MySQL 进行持久化。</p><h3 id="部署-Nginx"><a href="#部署-Nginx" class="headerlink" title="部署 Nginx"></a>部署 Nginx</h3><h4 id="拷贝-Nginx-配置"><a href="#拷贝-Nginx-配置" class="headerlink" title="拷贝 Nginx 配置"></a>拷贝 Nginx 配置</h4><p>Nginx 的部署与其他服务部署略有不同，我们需要先启动一个 Nginx 容器实例，然后从容器事例中拷贝出 Nginx 的配置文件到指定目录，之后我们将复制出的配置文件与 Nginx 容器的数据卷进行挂载，从而达到可以在容器外部修改配置文件的目的。这么做是因为，如果直接挂载，那么容器实例中的的目录将会被外部的挂载所覆盖。这是官方 Nginx 镜像的一个小缺陷，注意一下就行了。</p><ul><li><p>运行 Nginx 容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name temp-nginx -p 8080:8080 -d nginx:1.21.1<br></code></pre></td></tr></table></figure></li><li><p>在宿主机创建 Nginx 的挂载目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">实际创建时以自己的机器环境为准</span><br>mkdir -p &lt;宿主机挂载目录&gt;<br></code></pre></td></tr></table></figure></li><li><p>拷贝容器中的配置到宿主机的挂载目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker cp &lt;Nginx容器ID&gt;:/etc/nginx/ &lt;宿主机挂载目录&gt;<br></code></pre></td></tr></table></figure></li><li><p>停止并删除容器实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker stop &lt;Nginx容器ID&gt;<br>docker rm &lt;Nginx容器ID&gt;<br></code></pre></td></tr></table></figure></li></ul><h4 id="修改-Nginx-配置文件"><a href="#修改-Nginx-配置文件" class="headerlink" title="修改 Nginx 配置文件"></a>修改 Nginx 配置文件</h4><p>位置：&lt;宿主机挂载目录&gt;&#x2F;conf.d&#x2F;default.conf</p><p>配置文件主要修改两个部分，一个是新增 upstream，通过负载均衡来配置 Nacos 服务的节点；第二个是修改 server 下的 location，在其中添加反向代理配置。另外，如果你的 Nginx 没有配置过 server_name，那么还需要修改 server 下的 server_name 配置。</p><p>完整配置文件如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs text"># 添加负载均衡配置<br>upstream nacos &#123;<br>    server nacos-server01:8846 weight=1 max_fails=2 fail_timeout=10s;<br>    server nacos-server01:8847 weight=1 max_fails=2 fail_timeout=10s;<br>    server nacos-server01:8848 weight=1 max_fails=2 fail_timeout=10s;<br>&#125;<br><br>server &#123;<br>    listen       80;<br>    listen  [::]:80;<br>    # 修改为宿主机的 IP地址<br>    server_name  172.16.1.180;<br><br>    #access_log  /var/log/nginx/host.access.log  main;<br><br>    location / &#123;<br>    # 添加代理配置<br>        proxy_pass http://nacos;<br>        proxy_set_header Host $host;<br>        proxy_set_header X-Real-IP $remote_addr;<br>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>        proxy_set_header REMOTE-HOST $remote_addr;<br>        add_header X-Cache $upstream_cache_status;<br>        add_header Cache-Control no-cache;<br><br>        #root   /usr/share/nginx/html;<br>        #index  index.html index.htm;<br>    &#125;<br><br>    #error_page  404              /404.html;<br><br>    # redirect server error pages to the static page /50x.html<br>    #<br>    error_page   500 502 503 504  /50x.html;<br>    location = /50x.html &#123;<br>        root   /usr/share/nginx/html;<br>    &#125;<br><br>    # proxy the PHP scripts to Apache listening on 127.0.0.1:80<br>    #<br>    #location ~ \.php$ &#123;<br>    #    proxy_pass   http://127.0.0.1;<br>    #&#125;<br><br>    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000<br>    #<br>    #location ~ \.php$ &#123;<br>    #    root           html;<br>    #    fastcgi_pass   127.0.0.1:9000;<br>    #    fastcgi_index  index.php;<br>    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;<br>    #    include        fastcgi_params;<br>    #&#125;<br><br>    # deny access to .htaccess files, if Apache&#x27;s document root<br>    # concurs with nginx&#x27;s one<br>    #<br>    #location ~ /\.ht &#123;<br>    #    deny  all;<br>    #&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="编排-Nginx"><a href="#编排-Nginx" class="headerlink" title="编排 Nginx"></a>编排 Nginx</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><br><span class="hljs-attr">services:</span><br>    <span class="hljs-attr">nacos-nginx:</span><br>        <span class="hljs-attr">container_name:</span> <span class="hljs-string">nacos-nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.21.1</span><br>        <span class="hljs-attr">volumes:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/nacos-nginx/conf:/etc/nginx</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">~/nacos-nginx/www:/usr/share/nginx</span><br>        <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">8845</span><span class="hljs-string">:80</span><br>        <span class="hljs-attr">restart:</span> <span class="hljs-string">on-failure</span><br></code></pre></td></tr></table></figure><blockquote><p>重要说明：</p><p>数据卷挂载 - 本例中分别将 Nginx 的配置文件目录和静态文件资源目录挂载到了宿主机，如果不需要提供静态资源访问，可以不用挂载此目录。</p><p>端口 - 本例中，为了避免与其他 Nginx 端口冲突，我们暴露的端口为 8845，其中 80 端口为容器内部端口。</p></blockquote><h4 id="使用编排部署-Nginx"><a href="#使用编排部署-Nginx" class="headerlink" title="使用编排部署 Nginx"></a>使用编排部署 Nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose -f &lt;编排文件路径&gt; up -d<br></code></pre></td></tr></table></figure><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><p>打来浏览器输入：<code>http://&lt;IP&gt;:8845/nacos</code>，如果显示如下界面，则说明部署成功。</p><p><img src="https://gitee.com/carl-d/blogimage/raw/master/docimage/202304191636357.png" alt="Nginx负载Nacos"></p><p>部署成功后，多刷新几次页面，如果每次显示的都是同一个页面则说明 Nginx 可以正常提供负载。因为我们在配置 Nginx 时，使用的是轮询负载策略。</p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
